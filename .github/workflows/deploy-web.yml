name: Deploy Website

concurrency: Website Production

on:
  push:
    branches:
      - main
    paths:
      - 'apps/web/**'
  repository_dispatch:
    types: [trigger-docs-deployment]

jobs:
  run-deploy-job:
    runs-on: ubuntu-latest
    environment: Website Production
    timeout-minutes: 22
    outputs:
      deployment_status: ${{ steps.deploy.outputs.status }}
      
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: "latest"

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true

      - name: Install dependencies
        run: bun install

      - name: Run security audit
        run: npm audit signatures

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2
          
      - name: Deploy to production
        id: deploy
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_DEFAULT_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_DEFAULT_ACCOUNT_ID }}
          CLOUDFLARE_EMAIL: ${{ secrets.CLOUDFLARE_EMAIL }}
        run: |
          start_time=$(date +%s)
          bun sst unlock --stage production
          if bun run sst deploy --stage production; then
            status="success"
          else
            status="failure"
          fi
          end_time=$(date +%s)
          duration=$((end_time - start_time))
          echo "status=$status" >> $GITHUB_OUTPUT
          echo "duration=$((duration / 60))m $((duration % 60))s" >> $GITHUB_OUTPUT

      - name: Fail the job if deployment failed
        if: steps.deploy.outputs.status == 'failure'
        run: exit 1