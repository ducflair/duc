// SCHEMA_VERSION=2.0.0

// Official FlatBuffers Compiler: https://flatbuffers.ar.je/ 
// Official FlatBuffers Documentation: https://flatbuffers.dev/tutorial/

// To maintain backward compatibility when evolving FlatBuffers schemas, follow these guidelines:

// - **Should be fine to rename fields**
// - **Add new fields at the END of tables**: This ensures older code can still read the data without issues.
// - **DONT REMOVE FIELDS**: Instead of deleting unused fields, mark them as deprecated to prevent their use in new code while maintaining compatibility with existing data.
// - **DONT CHANGE FIELD TYPES**: Modifying a field's type can lead to incompatibilities. If necessary, add a new field with the desired type and deprecate the old one.
// - **BE CAREFUL WITH DEFAULT VALUES**: Changing default values can cause inconsistencies when reading older data. It's best to set appropriate defaults initially and avoid altering them. 
// - **STRING or TABLE CANNOT FALLBACK TO NULL**: these fields cannot be null. They already have a default null value.

namespace Duc;

file_identifier "DUC_";

// =============================================================================
//  ENUMS
// =============================================================================

// Usually we start from the value 10 on enums because on some languages, 0 is treated as false and 1 is treated as true on if statements
enum VERTICAL_ALIGN:ubyte {
  TOP = 10,
  MIDDLE = 11,
  BOTTOM = 12
}

enum TEXT_ALIGN:ubyte {
  LEFT = 10,
  CENTER = 11,
  RIGHT = 12
}

enum LINE_SPACING_TYPE:ubyte {
  AT_LEAST = 10,
  EXACTLY = 11,
  MULTIPLE = 12
}

enum STACKED_TEXT_ALIGN:ubyte {
  CENTER = 10,
  DECIMAL = 11,
  SLASH = 12
}

enum STROKE_PLACEMENT:ubyte {
  INSIDE = 10,
  CENTER = 11,
  OUTSIDE = 12
}

enum STROKE_WIDTH:ubyte {
  THIN = 1,
  BOLD = 2,
  EXTRA_BOLD = 4
}

enum ELEMENT_CONTENT_PREFERENCE:ubyte {
  SOLID = 12,
  FILL = 14,
  FIT = 15,
  TILE = 16,
  STRETCH = 17,
  HATCH = 18
}

enum STROKE_PREFERENCE:ubyte {
  SOLID = 10,
  DASHED = 11,
  DOTTED = 12,
  CUSTOM = 13
}

enum STROKE_SIDE_PREFERENCE:ubyte {
  TOP = 10,
  BOTTOM = 11,
  LEFT = 12,
  RIGHT = 13,
  CUSTOM = 14,
  ALL = 15
}

enum STROKE_CAP:ubyte {
  BUTT = 10,
  ROUND = 11,
  SQUARE = 12
}

enum STROKE_JOIN:ubyte {
  MITER = 10,
  ROUND = 11,
  BEVEL = 12
}

enum LINE_HEAD:ubyte {
  ARROW = 10,
  BAR = 11,
  CIRCLE = 12,
  CIRCLE_OUTLINED = 13,
  TRIANGLE = 14,
  TRIANGLE_OUTLINED = 15,
  DIAMOND = 16,
  DIAMOND_OUTLINED = 17,
  CROSS = 18,
  OPEN_ARROW = 19,
  REVERSED_ARROW = 20,
  REVERSED_TRIANGLE = 21,
  REVERSED_TRIANGLE_OUTLINED = 22,
  CONE = 23,
  HALF_CONE = 24
}

enum BEZIER_MIRRORING:ubyte {
  NONE = 10,
  ANGLE = 11,
  ANGLE_LENGTH = 12
}

enum HANDLE_TYPE:ubyte {
  HANDLE_IN = 10,
  HANDLE_OUT = 11
}


enum YOUTUBE_STATES:byte {
  UNSTARTED = -1,
  ENDED = 0,
  PLAYING = 1,
  PAUSED = 2,
  BUFFERING = 3,
  CUED = 5
}

enum BLENDING:ubyte {
  MULTIPLY = 11,
  SCREEN = 12,
  OVERLAY = 13,
  DARKEN = 14,
  LIGHTEN = 15,
  DIFFERENCE = 16,
  EXCLUSION = 17
}

enum GRID_DISPLAY_TYPE:ubyte {
  LINES = 10,
  DOTS = 11,
  CROSSES = 12,
  ADAPTIVE = 13
}

enum GRID_TYPE:ubyte {
  RECTANGULAR = 10,
  ISOMETRIC = 11,
  POLAR = 12,
  TRIANGULAR = 13,
  CUSTOM = 14
}

enum OBJECT_SNAP_MODE:ubyte {
  ENDPOINT = 10,
  MIDPOINT = 11,
  CENTER = 12,
  QUADRANT = 13,
  INTERSECTION = 14,
  EXTENSION = 15,
  PERPENDICULAR = 16,
  TANGENT = 17,
  NEAREST = 18,
  NODE = 19, // For points
  INSERT = 20, // For block insertion points
  PARALLEL = 21,
  APPARENT = 22,
  FROM = 23, // Reference point snap
  POINT_FILTER = 24, // X,Y,Z filtering
  TEMPORARY = 25, // Temporary tracking points
  BETWEEN_TWO_POINTS = 26,
  POINT_ON_CURVE = 27,
  GEOMETRIC = 28 // vs bounding box center
}

enum SNAP_MODE:ubyte {
  RUNNING = 10,
  SINGLE = 11
}

enum SNAP_OVERRIDE_BEHAVIOR:ubyte {
  DISABLE = 10,
  FORCE_GRID = 11,
  FORCE_OBJECT = 12
}

enum SNAP_MARKER_SHAPE:ubyte {
  SQUARE = 10,
  CIRCLE = 11,
  TRIANGLE = 12,
  X = 13
}

enum TABLE_CELL_ALIGNMENT:ubyte {
  TOP_LEFT = 10,
  TOP_CENTER = 11,
  TOP_RIGHT = 12,
  MIDDLE_LEFT = 13,
  MIDDLE_CENTER = 14,
  MIDDLE_RIGHT = 15,
  BOTTOM_LEFT = 16,
  BOTTOM_CENTER = 17,
  BOTTOM_RIGHT = 18
}

enum TABLE_FLOW_DIRECTION:ubyte {
  DOWN = 10,
  UP = 11
}

enum TOLERANCE_DISPLAY:ubyte {
  NONE = 10,
  SYMMETRICAL = 11, // ¬±
  DEVIATION = 12, // +upper/-lower
  LIMITS = 13, // Upper/lower limits
  BASIC = 14 // Boxed dimension
}

enum DIMENSION_TYPE:ubyte {
  LINEAR = 10,
  ALIGNED = 11,
  ANGULAR = 12,
  ARC_LENGTH = 13,
  RADIUS = 14,
  DIAMETER = 15,
  CENTER_MARK = 16,
  ROTATED = 17,
  SPACING = 18,
  CONTINUE = 19,
  BASELINE = 20,
  JOGGED_LINEAR = 21,
  ORDINATE = 22
}

enum MARK_ELLIPSE_CENTER:ubyte {
  MARK = 10,
  LINE = 11
}

enum TEXT_FLOW_DIRECTION:ubyte {
  LEFT_TO_RIGHT = 10,
  RIGHT_TO_LEFT = 11,
  TOP_TO_BOTTOM = 12,
  BOTTOM_TO_TOP = 13
}

enum COLUMN_TYPE:ubyte {
  NO_COLUMNS = 10,
  STATIC_COLUMNS = 11,
  DYNAMIC_COLUMNS = 12
}

enum GDT_SYMBOL:ubyte {
  // Form tolerances
  STRAIGHTNESS = 10, // "‚è§"
  FLATNESS = 11, // "‚è•"
  CIRCULARITY = 12, // "‚óã"
  CYLINDRICITY = 13, // "‚å≠"
  
  // Orientation tolerances  
  PERPENDICULARITY = 14, // "‚ä•"
  ANGULARITY = 15, // "‚à†"
  PARALLELISM = 16, // "‚à•"
  
  // Location tolerances
  POSITION = 17, // "‚åñ"
  TRUE_POSITION = 18, // "‚åñ" // Alternative name
  CONCENTRICITY = 19, // "‚óé"
  COAXIALITY = 20, // "‚óØ" // Different from concentricity in some standards
  SYMMETRY = 21, // "‚åØ"
  
  // Runout tolerances
  CIRCULAR_RUNOUT = 22, // "‚Üó"
  TOTAL_RUNOUT = 23, // "‚Üó‚Üó"
  
  // Profile tolerances
  PROFILE_OF_LINE = 24, // "‚åí"
  PROFILE_OF_SURFACE = 25, // "‚åì"
  
  // Special symbols
  STATISTICAL = 26, // "‚óä"
  ALL_AROUND = 27, // "‚≠ï"
  ALL_OVER = 28, // "üîÑ"
  BETWEEN = 29 // "‚Üî"
}

enum MATERIAL_CONDITION:ubyte {
  MAXIMUM = 10, // "‚ìÇ" // MMC - Maximum Material Condition
  LEAST = 11, // "‚ìÅ" // LMC - Least Material Condition
  REGARDLESS = 12 // "‚ìà" // RFS - Regardless of Feature Size (often omitted)
}

enum FEATURE_MODIFIER:ubyte {
  FREE_STATE = 10, // "‚íª"
  TANGENT_PLANE = 11, // "‚ìâ"
  PROJECTED_TOLERANCE_ZONE = 12, // "‚ìÖ"
  DIAMETER = 13, // "‚åÄ"
  SPHERICAL_DIAMETER = 14, // "S‚åÄ"
  RADIUS = 15, // "R"
  SPHERICAL_RADIUS = 16, // "SR"
  CONTROLLED_RADIUS = 17, // "CR"
  SQUARE = 18, // "‚ñ°"
  TRANSLATION = 19, // "‚ßó" // Translation modifier for position
  ALL_AROUND = 20, // "‚≠ï" // Can be used as modifier too
  ALL_OVER = 21, // "üîÑ" // Can be used as modifier too
  STATISTICAL = 22, // "‚óä" // Can be used as modifier
  CONTINUOUS_FEATURE = 23, // "CF" // Continuous feature
  UNEQUALLY_DISPOSED = 24 // "UEQ" // Unequally disposed tolerance
}

enum TOLERANCE_ZONE_TYPE:ubyte {
  CYLINDRICAL = 10,
  SPHERICAL = 11, 
  RECTANGULAR = 12,
  LINEAR = 13,
  CIRCULAR = 14
}

enum DATUM_TARGET_TYPE:ubyte {
  POINT = 10,
  LINE = 11, 
  AREA = 12,
  MOVABLE = 13
}

enum TOLERANCE_TYPE:ubyte {
  SINGLE = 10, // Single tolerance specification
  COMPOSITE = 11, // Composite tolerance (multiple rows, related)
  MULTIPLE = 12 // Multiple single-segment tolerances (independent)
}

enum DATUM_BRACKET_STYLE:ubyte {
  SQUARE = 10,
  ROUND = 11,
  NONE = 12
}

enum DIMENSION_UNITS_FORMAT:ubyte {
  DECIMAL = 10,
  ENGINEERING = 11, // Feet and decimal inches
  ARCHITECTURAL = 12, // Feet and fractional inches
  FRACTIONAL = 13, // Fractional inches
  SCIENTIFIC = 14
}

enum DIMENSION_FIT_RULE:ubyte {
  TEXT_AND_ARROWS = 10,
  ARROWS_ONLY = 11,
  TEXT_ONLY = 12,
  BEST_FIT = 13
}

enum DIMENSION_TEXT_PLACEMENT:ubyte {
  BESIDE_LINE = 10,
  OVER_LINE = 11,
  OVER_LINE_WITH_LEADER = 12
}

enum ANGULAR_UNITS_FORMAT:ubyte {
  DECIMAL_DEGREES = 10,
  DEGREES_MINUTES_SECONDS = 11,
  GRADS = 12,
  RADIANS = 13,
  SURVEYOR = 14
}

enum UNIT_SYSTEM:ubyte {
  METRIC = 10,
  IMPERIAL = 11
}

enum DECIMAL_SEPARATOR:ubyte {
  DOT = 10, // "."
  COMMA = 11 // ","
}

enum VIEWPORT_SHADE_PLOT:ubyte {
  AS_DISPLAYED = 10,
  WIREFRAME = 11,
  HIDDEN = 12,
  RENDERED = 13
}

enum HATCH_STYLE:ubyte {
  NORMAL = 10,    // Normal hatch
  OUTER = 11,     // Outermost boundary only
  IGNORE = 12     // Ignore internal structures
}

enum IMAGE_STATUS:ubyte {
  PENDING = 10,
  SAVED = 11,
  ERROR = 12
}

enum BLOCK_ATTACHMENT:ubyte {
  CENTER_EXTENTS = 10,
  INSERTION_POINT = 11
}

enum AXIS:ubyte {
  X = 10,
  Y = 20,
  Z = 30
}

enum PRUNING_LEVEL:ubyte {
  CONSERVATIVE = 10,
  BALANCED = 20,
  AGGRESSIVE = 30
}

enum PARAMETRIC_SOURCE_TYPE:ubyte {
  CODE = 10,
  FILE = 11
}

enum LEADER_CONTENT_TYPE:ubyte {
  TEXT = 10,
  BLOCK = 11
}


// =============================================================================
//  UTILITY & GEOMETRY TYPES
// =============================================================================

/// A generic key-value pair for string dictionaries.
table DictionaryEntry {
  key: string (key);
  value: string;
}

/// A generic key-value pair for more complex structures like DucBlock attribute values.
table StringValueEntry {
  key: string (key);
  value: string;
}

/// A generic identifier used across various components like Standards, Layers, etc.
table Identifier {
  id: string (key);
  name: string;
  description: string;
}

/// A high-precision 2D point in the World Coordinate System.
struct GeometricPoint {
  x: double;
  y: double;
}

/// Defines a User Coordinate System (UCS) with an origin and rotation.
table DucUcs {
  origin: GeometricPoint;
  angle: double; // Radian
}

/// Defines a view with scroll, zoom, and center point.
table DucView {
  scroll_x: double;
  scroll_y: double;
  zoom: double;
  twist_angle: double; // Radian
  center_point: DucPoint;
  scope: string; // Scope
}

/// Represents margins for layouts and cells.
table Margins {
  top: double;
  right: double;
  bottom: double;
  left: double;
}

// =============================================================================
//  STYLING & CONTENT
// =============================================================================

table TilingProperties {
  size_in_percent: float;
  angle: double; // Radian
  spacing: double;
  offset_x: double;
  offset_y: double;
}

table HatchPatternLine {
  angle: double; // Radian
  origin: DucPoint;
  offset: [double]; // [x, y]
  dash_pattern: [double];
}

table CustomHatchPattern {
  name: string;
  description: string;
  lines: [HatchPatternLine];
}

table DucHatchStyle {
  hatch_style: HATCH_STYLE = null;
  pattern_name: string;
  pattern_scale: float;
  pattern_angle: double; // Radian
  pattern_origin: DucPoint;
  pattern_double: bool;
  custom_pattern: CustomHatchPattern;
}

table DucImageFilter {
  brightness: float; // Percentage
  contrast: float; // Percentage
}

table ElementContentBase {
  preference: ELEMENT_CONTENT_PREFERENCE = null;
  src: string; // Color, gradient, image URL, fileId, or block reference
  visible: bool;
  opacity: double;
  
  tiling: TilingProperties;
  hatch: DucHatchStyle;
  image_filter: DucImageFilter;
}

table StrokeStyle {
  preference: STROKE_PREFERENCE = null;
  cap: STROKE_CAP = null;
  join: STROKE_JOIN = null;
  dash: [double];
  dash_line_override: string; // DucBlockInstance ID
  dash_cap: STROKE_CAP = null;
  miter_limit: double;
}

table StrokeSides {
  preference: STROKE_SIDE_PREFERENCE = null;
  values: [double]; // [0,1] or [0,1,2,3]
}

table ElementStroke {
  content: ElementContentBase;
  width: double;
  style: StrokeStyle;
  placement: STROKE_PLACEMENT = null;
  stroke_sides: StrokeSides;
}

table ElementBackground {
  content: ElementContentBase;
}

/// Base style properties shared by many elements.
table _DucElementStylesBase {
  roundness: double;
  blending: BLENDING = null;
  background: [ElementBackground];
  stroke: [ElementStroke];
  opacity: double;
}


// =============================================================================
//  BASE ELEMENT & COMMON ELEMENT COMPONENTS
// =============================================================================

table BoundElement {
  id: string;
  type: string; // Represents DucElementType
}

/// The foundational table for all scene elements, containing common properties.
table _DucElementBase {
  id: string (key);
  x: double;
  y: double;
  width: double;
  height: double;
  angle: double; // Radian
  
  scope: string; // Scope
  label: string;
  description: string;
  is_visible: bool;

  seed: int;
  version: int;
  version_nonce: int;
  updated: long; // Epoch timestamp (ms)
  index: string; // FractionalIndex

  is_plot: bool;
  is_annotative: bool;
  is_deleted: bool;
  
  group_ids: [string];
  layer_id: string;
  frame_id: string;
  
  bound_elements: [BoundElement];
  z_index: float;

  link: string;
  locked: bool;
  
  // Contains a JSON string of custom key-value data.
  custom_data: string;
  
  styles: _DucElementStylesBase;
}

table DucPoint {
  x: double;
  y: double;
  mirroring: BEZIER_MIRRORING = null;
}

table DucHead {
  type: LINE_HEAD = null;
  block_id: string;
  size: double;
}

table PointBindingPoint {
  index: int;
  offset: double;
}

table DucPointBinding {
  element_id: string;
  focus: float;
  gap: double;
  fixed_point: GeometricPoint;
  point: PointBindingPoint;
  head: DucHead;
}

table DucLineReference {
  index: int;
  handle: GeometricPoint;
}

table DucLine {
  start: DucLineReference;
  end: DucLineReference;
}

table DucPath {
  line_indices: [int];
  background: ElementBackground;
  stroke: ElementStroke;
}

/// The base for linear elements like lines and arrows.
table _DucLinearElementBase {
  base: _DucElementBase;
  points: [DucPoint];
  lines: [DucLine];
  path_overrides: [DucPath];
  last_committed_point: DucPoint;
  start_binding: DucPointBinding;
  end_binding: DucPointBinding;
}

table DucStackLikeStyles {
  opacity: double;
  labeling_color: string;
}

table _DucStackBase {
  label: string;
  description: string;
  is_collapsed: bool;
  is_plot: bool;
  is_visible: bool;
  locked: bool;
  styles: DucStackLikeStyles;
}

table _DucStackElementBase {
  base: _DucElementBase;
  stack_base: _DucStackBase;
  clip: bool;
  label_visible: bool;
  standard_override: Standard;
}


// =============================================================================
//  ELEMENT-SPECIFIC STYLES
// =============================================================================

table LineSpacing {
  value: double; // Can also be interpreted as ScaleFactor
  type: LINE_SPACING_TYPE = null;
}

table DucTextStyle {
  base_style: _DucElementStylesBase;
  is_ltr: bool;
  font_family: string;
  big_font_family: string;
  
  text_align: TEXT_ALIGN = null;
  vertical_align: VERTICAL_ALIGN = null;
  
  line_height: float; // Unitless multiplier
  line_spacing: LineSpacing;
  
  oblique_angle: double; // Radian
  font_size: double;
  paper_text_height: double;
  width_factor: float; // ScaleFactor
  
  is_upside_down: bool;
  is_backwards: bool;
}

table DucTableCellStyle {
  base_style: _DucElementStylesBase;
  text_style: DucTextStyle;
  margins: Margins;
  alignment: TABLE_CELL_ALIGNMENT = null;
}

table DucTableStyle {
  base_style: _DucElementStylesBase;
  flow_direction: TABLE_FLOW_DIRECTION = null;
  header_row_style: DucTableCellStyle;
  data_row_style: DucTableCellStyle;
  data_column_style: DucTableCellStyle;
}

table DucLeaderStyle {
  base_style: _DucElementStylesBase;
  heads_override: [DucHead]; // [start, end]
  dogleg: double;
  text_style: DucTextStyle;
  text_attachment: VERTICAL_ALIGN = null;
  block_attachment: BLOCK_ATTACHMENT = null;
}

table DimensionToleranceStyle {
  enabled: bool;
  display_method: TOLERANCE_DISPLAY = null;
  upper_value: double;
  lower_value: double;
  precision: int;
  text_style: DucTextStyle;
}

table DimensionFitStyle {
  rule: DIMENSION_FIT_RULE = null;
  text_placement: DIMENSION_TEXT_PLACEMENT = null;
  force_text_inside: bool;
}

table DimensionLineStyle {
  stroke: ElementStroke;
  text_gap: double;
}

table DimensionExtLineStyle {
  stroke: ElementStroke;
  overshoot: double;
  offset: double;
}

table DimensionSymbolStyle {
  heads_override: [DucHead]; // [start, end]
  center_mark_type: MARK_ELLIPSE_CENTER = null;
  center_mark_size: double;
}

table DucDimensionStyle {
  dim_line: DimensionLineStyle;
  ext_line: DimensionExtLineStyle;
  text_style: DucTextStyle;
  symbols: DimensionSymbolStyle;
  tolerance: DimensionToleranceStyle;
  fit: DimensionFitStyle;
}

table FCFLayoutStyle {
  padding: double;
  segment_spacing: double;
  row_spacing: double;
}

table FCFSymbolStyle {
  scale: float;
}

table FCFDatumStyle {
  bracket_style: DATUM_BRACKET_STYLE = null;
}

table DucFeatureControlFrameStyle {
  base_style: _DucElementStylesBase;
  text_style: DucTextStyle;
  layout: FCFLayoutStyle;
  symbols: FCFSymbolStyle;
  datum_style: FCFDatumStyle;
}

table ParagraphFormatting {
  first_line_indent: double;
  hanging_indent: double;
  left_indent: double;
  right_indent: double;
  space_before: double;
  space_after: double;
  tab_stops: [double];
}

table StackFormatProperties {
  upper_scale: double;
  lower_scale: double;
  alignment: STACKED_TEXT_ALIGN = null;
}

table StackFormat {
  auto_stack: bool;
  stack_chars: [string];
  properties: StackFormatProperties;
}

table DucDocStyle {
  text_style: DucTextStyle;
  paragraph: ParagraphFormatting;
  stack_format: StackFormat;
}

table DucViewportStyle {
  base_style: _DucElementStylesBase;
  scale_indicator_visible: bool;
}

table DucPlotStyle {
  base_style: _DucElementStylesBase;
}

table DucXRayStyle {
  base_style: _DucElementStylesBase;
  color: string;
}

// =============================================================================
//  ELEMENT DEFINITIONS
// =============================================================================

table DucRectangleElement {
  base: _DucElementBase;
}

table DucPolygonElement {
  base: _DucElementBase;
  sides: int;
}

table DucEllipseElement {
  base: _DucElementBase;
  ratio: float; // Percentage
  start_angle: double; // Radian
  end_angle: double; // Radian
  show_aux_crosshair: bool;
}

table DucEmbeddableElement {
  base: _DucElementBase;
}

table DucMermaidElement {
  base: _DucElementBase;
  source: string;
  theme: string;
  svg_path: string;
}

table DucTableColumn {
  id: string (key);
  width: double;
  style_overrides: DucTableCellStyle;
}

table DucTableRow {
  id: string (key);
  height: double;
  style_overrides: DucTableCellStyle;
}

table DucTableCellSpan {
  columns: int;
  rows: int;
}

table DucTableCell {
  row_id: string;
  column_id: string;
  data: string; // Markdown content
  span: DucTableCellSpan;
  locked: bool;
  style_overrides: DucTableCellStyle;
}

table DucTableColumnEntry {
  key: string (key);
  value: DucTableColumn;
}

table DucTableRowEntry {
  key: string (key);
  value: DucTableRow;
}

table DucTableCellEntry {
  key: string (key); // "rowId:columnId"
  value: DucTableCell;
}

table DucTableAutoSize {
  columns: bool;
  rows: bool;
}

table DucTableElement {
  base: _DucElementBase;
  style: DucTableStyle;
  
  column_order: [string];
  row_order: [string];
  
  columns: [DucTableColumnEntry];
  rows: [DucTableRowEntry];
  cells: [DucTableCellEntry];
  
  header_row_count: int;
  auto_size: DucTableAutoSize;
}

table ImageCrop {
  x: double;
  y: double;
  width: double;
  height: double;
  natural_width: double;
  natural_height: double;
}

table DucImageElement {
  base: _DucElementBase;
  file_id: string;
  status: IMAGE_STATUS = null;
  scale: [double]; // [x, y]
  crop: ImageCrop;
  clipping_boundary: _DucLinearElementBase;
  filter: DucImageFilter;
}

table DucTextElement {
  base: _DucElementBase;
  style: DucTextStyle;
  text: string;
  auto_resize: bool;
  container_id: string;
  original_text: string;
}

table DucLinearElement {
  linear_base: _DucLinearElementBase;
  wipeout_below: bool;
}

table DucArrowElement {
  linear_base: _DucLinearElementBase;
  elbowed: bool;
}

table DucFreeDrawEnds {
  cap: bool;
  taper: float;
  easing: string;
}

table DucFreeDrawElement {
  base: _DucElementBase;
  points: [DucPoint];
  size: double;
  thinning: float; // Percentage
  smoothing: float; // Percentage
  streamline: float; // Percentage
  easing: string; // key that maps to an easing function
  start: DucFreeDrawEnds;
  end: DucFreeDrawEnds;
  pressures: [float];
  simulate_pressure: bool;
  last_committed_point: DucPoint;
  svg_path: string;
}

table DucBlockAttributeDefinition {
  tag: string;
  prompt: string;
  default_value: string;
  is_constant: bool;
}

table DucBlockAttributeDefinitionEntry {
  key: string (key);
  value: DucBlockAttributeDefinition;
}

table DucBlock {
  id: string (key);
  label: string;
  description: string;
  version: int;
  elements: [ElementWrapper];
  attribute_definitions: [DucBlockAttributeDefinitionEntry];
}

table DucBlockDuplicationArray {
  rows: int;
  cols: int;
  row_spacing: double;
  col_spacing: double;
}

table DucBlockInstanceElement {
  base: _DucElementBase;
  block_id: string;
  element_overrides: [StringValueEntry];
  attribute_values: [StringValueEntry];
  duplication_array: DucBlockDuplicationArray;
}

table DucFrameElement {
  stack_element_base: _DucStackElementBase;
}

table PlotLayout {
  margins: Margins;
}

table DucPlotElement {
  stack_element_base: _DucStackElementBase;
  style: DucPlotStyle;
  layout: PlotLayout;
}

table DucViewportElement {
  linear_base: _DucLinearElementBase;
  stack_base: _DucStackBase;
  style: DucViewportStyle;
  view: DucView;
  scale: float; // ViewportScale
  shade_plot: VIEWPORT_SHADE_PLOT = null;
  frozen_group_ids: [string];
  standard_override: Standard;
}

table DucXRayElement {
  base: _DucElementBase;
  style: DucXRayStyle;
  origin: DucPoint;
  direction: DucPoint;
  start_from_origin: bool;
}

table LeaderTextBlockContent {
  text: string;
}

table LeaderBlockContent {
  block_id: string;
  attribute_values: [StringValueEntry];
  element_overrides: [StringValueEntry];
}

union LeaderContentData {
  LeaderTextBlockContent,
  LeaderBlockContent
}

table LeaderContent {
  leader_content_type: LEADER_CONTENT_TYPE = null;
  content: LeaderContentData;
}

table DucLeaderElement {
  linear_base: _DucLinearElementBase;
  style: DucLeaderStyle;
  content: LeaderContent;
  content_anchor: GeometricPoint;
}

table DimensionDefinitionPoints {
  origin1: GeometricPoint;
  origin2: GeometricPoint;
  location: GeometricPoint;
  center: GeometricPoint;
  jog: GeometricPoint;
}

table DimensionBindings {
  origin1: DucPointBinding;
  origin2: DucPointBinding;
  center: DucPointBinding;
}

table DimensionBaselineData {
  base_dimension_id: string;
}

table DimensionContinueData {
  continue_from_dimension_id: string;
}

table DucDimensionElement {
  base: _DucElementBase;
  style: DucDimensionStyle;
  
  dimension_type: DIMENSION_TYPE = null;
  definition_points: DimensionDefinitionPoints;
  
  oblique_angle: float; // Radian
  ordinate_axis: AXIS = null;
  
  bindings: DimensionBindings;
  
  text_override: string;
  text_position: GeometricPoint;
  
  tolerance_override: DimensionToleranceStyle;
  
  baseline_data: DimensionBaselineData;
  continue_data: DimensionContinueData;
  
  // calculated_value: double; // This is readonly runtime data, should not be serialized
}

table DatumReference {
  letters: string;
  modifier: MATERIAL_CONDITION = null;
}

table ToleranceClause {
  value: string;
  zone_type: TOLERANCE_ZONE_TYPE = null;
  feature_modifiers: [FEATURE_MODIFIER];
  material_condition: MATERIAL_CONDITION = null;
}

table FeatureControlFrameSegment {
  symbol: GDT_SYMBOL = null;
  tolerance: ToleranceClause;
  datums: [DatumReference]; // [primary, secondary, tertiary]
}

table FCFBetweenModifier {
  start: string;
  end: string;
}

table FCFProjectedZoneModifier {
  value: double;
}

table FCFFrameModifiers {
  all_around: bool;
  all_over: bool;
  continuous_feature: bool;
  between: FCFBetweenModifier;
  projected_tolerance_zone: FCFProjectedZoneModifier;
}

table FCFDatumDefinition {
  letter: string;
  feature_binding: DucPointBinding;
}

table DucFeatureControlFrameElement {
  base: _DucElementBase;
  style: DucFeatureControlFrameStyle;
  
  rows: [FeatureControlFrameSegment];
  frame_modifiers: FCFFrameModifiers;
  leader_element_id: string;
  datum_definition: FCFDatumDefinition;
}

table TextColumn {
  width: double;
  gutter: double;
}

table ColumnLayout {
  type: COLUMN_TYPE = null;
  definitions: [TextColumn];
  auto_height: bool;
}

table DucDocElement {
  base: _DucElementBase;
  style: DucDocStyle;
  content: string; // Markdown
  flow_direction: TEXT_FLOW_DIRECTION = null;
  columns: ColumnLayout;
  auto_resize: bool;
}

table ParametricSource {
  type: PARAMETRIC_SOURCE_TYPE = null;
  code: string; // Used if type is CODE
  file_id: string; // Used if type is FILE
}

table DucParametricElement {
  base: _DucElementBase;
  source: ParametricSource;
}

// =============================================================================
//  ELEMENT UNION & WRAPPER
// =============================================================================

/// A union of all possible scene elements.
union Element {
  DucRectangleElement,
  DucPolygonElement,
  DucEllipseElement,
  DucEmbeddableElement,
  DucMermaidElement,
  DucTableElement,
  DucImageElement,
  DucTextElement,
  DucLinearElement,
  DucArrowElement,
  DucFreeDrawElement,
  DucBlockInstanceElement,
  DucFrameElement,
  DucPlotElement,
  DucViewportElement,
  DucXRayElement,
  DucLeaderElement,
  DucDimensionElement,
  DucFeatureControlFrameElement,
  DucDocElement,
  DucParametricElement
}

/// A wrapper to hold an element from the union.
table ElementWrapper {
  element: Element;
}


// =============================================================================
//  APP & DOCUMENT STATE
// =============================================================================

table DucGlobalState {
  name: string;
  view_background_color: string;
  main_scope: string; // Scope
  dash_spacing_scale: float; // ScaleFactor
  is_dash_spacing_affected_by_viewport_scale: bool;
  scope_exponent_threshold: int;
  dimensions_associative_by_default: bool;
  use_annotative_scaling: bool;
  display_precision_linear: int;
  display_precision_angular: int;
}

table DucLocalState {
  scope: string; // Scope
  active_standard_id: string;
  
  scroll_x: double;
  scroll_y: double;
  zoom: double;
  
  active_grid_settings: [string]; // Identifier["id"][]
  active_snap_settings: string; // Identifier["id"]
  
  is_binding_enabled: bool;
  
  current_item_stroke: ElementStroke;
  current_item_background: ElementBackground;
  current_item_opacity: float; // Percentage
  current_item_font_family: string; 
  current_item_font_size: double;
  current_item_text_align: TEXT_ALIGN = null;
  current_item_start_line_head: DucHead;
  current_item_end_line_head: DucHead;
  current_item_roundness: double;
  
  pen_mode: bool;
  view_mode_enabled: bool;
  objects_snap_mode_enabled: bool;
  grid_mode_enabled: bool;
  outline_mode_enabled: bool;
}

table BinaryFileData {
  mime_type: string;
  id: string (key);
  data_url: string;
  created: long;
  last_retrieved: long;
  version: int;
}

table BinaryFileEntry {
  key: string (key);
  value: BinaryFileData;
}

table DucGroup {
  id: string (key);
  stack_base: _DucStackBase;
}

table DucLayerOverrides {
  stroke: ElementStroke;
  background: ElementBackground;
}

table DucLayer {
  id: string (key);
  stack_base: _DucStackBase;
  readonly: bool;
  overrides: DucLayerOverrides;
}

// =============================================================================
//  STANDARDS & SETTINGS
// =============================================================================

table _UnitSystemBase {
  system: UNIT_SYSTEM = null;
  precision: int;
  suppress_leading_zeros: bool;
  suppress_trailing_zeros: bool;
}

table LinearUnitSystem {
  base: _UnitSystemBase;
  format: DIMENSION_UNITS_FORMAT = null;
  decimal_separator: DECIMAL_SEPARATOR = null;
  suppress_zero_feet: bool;
  suppress_zero_inches: bool;
}

table AngularUnitSystem {
  base: _UnitSystemBase;
  format: ANGULAR_UNITS_FORMAT = null;
}

table AlternateUnits {
  base: _UnitSystemBase;
  format: DIMENSION_UNITS_FORMAT = null;
  is_visible: bool;
  multiplier: float;
}

table PrimaryUnits {
  linear: LinearUnitSystem;
  angular: AngularUnitSystem;
}

table StandardUnits {
  primary_units: PrimaryUnits;
  alternate_units: AlternateUnits;
}

table UnitPrecision {
  linear: int;
  angular: int;
  area: int;
  volume: int;
}

table StandardOverrides {
  main_scope: string;
  elements_stroke_width_override: double;
  common_style_id: string;
  stack_like_style_id: string;
  text_style_id: string;
  dimension_style_id: string;
  leader_style_id: string;
  feature_control_frame_style_id: string;
  table_style_id: string;
  doc_style_id: string;
  viewport_style_id: string;
  plot_style_id: string;
  hatch_style_id: string;
  active_grid_settings_id: [string];
  active_snap_settings_id: string;
  dash_line_override: string;
  unit_precision: UnitPrecision;
}

table DucCommonStyle {
  background: ElementBackground;
  stroke: ElementStroke;
}
table IdentifiedCommonStyle { id: Identifier; style: DucCommonStyle; }
table IdentifiedStackLikeStyle { id: Identifier; style: DucStackLikeStyles; }
table IdentifiedTextStyle { id: Identifier; style: DucTextStyle; }
table IdentifiedDimensionStyle { id: Identifier; style: DucDimensionStyle; }
table IdentifiedLeaderStyle { id: Identifier; style: DucLeaderStyle; }
table IdentifiedFCFStyle { id: Identifier; style: DucFeatureControlFrameStyle; }
table IdentifiedTableStyle { id: Identifier; style: DucTableStyle; }
table IdentifiedDocStyle { id: Identifier; style: DucDocStyle; }
table IdentifiedViewportStyle { id: Identifier; style: DucViewportStyle; }
table IdentifiedHatchStyle { id: Identifier; style: DucHatchStyle; }
table IdentifiedXRayStyle { id: Identifier; style: DucXRayStyle; }

table StandardStyles {
  common_styles: [IdentifiedCommonStyle];
  stack_like_styles: [IdentifiedStackLikeStyle];
  text_styles: [IdentifiedTextStyle];
  dimension_styles: [IdentifiedDimensionStyle];
  leader_styles: [IdentifiedLeaderStyle];
  feature_control_frame_styles: [IdentifiedFCFStyle];
  table_styles: [IdentifiedTableStyle];
  doc_styles: [IdentifiedDocStyle];
  viewport_styles: [IdentifiedViewportStyle];
  hatch_styles: [IdentifiedHatchStyle];
  xray_styles: [IdentifiedXRayStyle];
}

table GridStyle {
  color: string;
  opacity: double;
  dash_pattern: [double];
}

table PolarGridSettings {
  radial_divisions: int;
  radial_spacing: double;
  show_labels: bool;
}

table IsometricGridSettings {
  left_angle: double; // Radian
  right_angle: double; // Radian
}

table GridSettings {
  type: GRID_TYPE = null;
  readonly: bool;
  display_type: GRID_DISPLAY_TYPE = null;
  is_adaptive: bool;
  x_spacing: double;
  y_spacing: double;
  subdivisions: int;
  origin: GeometricPoint;
  rotation: double; // Radian
  follow_ucs: bool;
  major_style: GridStyle;
  minor_style: GridStyle;
  show_minor: bool;
  min_zoom: double;
  max_zoom: double;
  auto_hide: bool;
  polar_settings: PolarGridSettings;
  isometric_settings: IsometricGridSettings;
  enable_snapping: bool;
}

table SnapOverride {
  key: string;
  behavior: SNAP_OVERRIDE_BEHAVIOR = null;
}

table DynamicSnapSettings {
  enabled_during_drag: bool;
  enabled_during_rotation: bool;
  enabled_during_scale: bool;
}

table PolarTrackingSettings {
  enabled: bool;
  angles: [double]; // Radian
  increment_angle: double; // Radian
  track_from_last_point: bool;
  show_polar_coordinates: bool;
}

table TrackingLineStyle {
  color: string;
  opacity: double;
  dash_pattern: [double];
}

table LayerSnapFilters {
  include_layers: [string];
  exclude_layers: [string];
}

table SnapMarkerStyle {
  shape: SNAP_MARKER_SHAPE = null;
  color: string;
}

table SnapMarkerStyleEntry {
  key: OBJECT_SNAP_MODE = null;
  value: SnapMarkerStyle;
}

table SnapMarkerSettings {
  enabled: bool;
  size: int;
  duration: int; // ms
  styles: [SnapMarkerStyleEntry];
}

table SnapSettings {
  readonly: bool;
  twist_angle: double; // Radian;
  snap_tolerance: int;
  object_snap_aperture: int;
  is_ortho_mode_on: bool;
  polar_tracking: PolarTrackingSettings;
  is_object_snap_on: bool;
  active_object_snap_modes: [OBJECT_SNAP_MODE];
  snap_priority: [OBJECT_SNAP_MODE];
  show_tracking_lines: bool;
  tracking_line_style: TrackingLineStyle;
  dynamic_snap: DynamicSnapSettings;
  temporary_overrides: [SnapOverride];
  incremental_distance: double;
  magnetic_strength: double;
  layer_snap_filters: LayerSnapFilters;
  element_type_filters: [string];
  snap_mode: SNAP_MODE = null;
  snap_markers: SnapMarkerSettings;
  construction_snap_enabled: bool;
  snap_to_grid_intersections: bool;
}

table IdentifiedGridSettings { id: Identifier; settings: GridSettings; }
table IdentifiedSnapSettings { id: Identifier; settings: SnapSettings; }
table IdentifiedUcs { id: Identifier; ucs: DucUcs; }
table IdentifiedView { id: Identifier; view: DucView; }

table StandardViewSettings {
  views: [IdentifiedView];
  ucs: [IdentifiedUcs];
  grid_settings: [IdentifiedGridSettings];
  snap_settings: [IdentifiedSnapSettings];
}

table DimensionValidationRules {
  min_text_height: double;
  max_text_height: double;
  allowed_precisions: [int];
}

table LayerValidationRules {
  prohibited_layer_names: [string];
}

table StandardValidation {
  dimension_rules: DimensionValidationRules;
  layer_rules: LayerValidationRules;
}

table Standard {
  identifier: Identifier;
  version: string;
  readonly: bool;
  overrides: StandardOverrides;
  styles: StandardStyles;
  view_settings: StandardViewSettings;
  units: StandardUnits;
  validation: StandardValidation;
}


// =============================================================================
//  VERSION CONTROL
// =============================================================================

table VersionBase {
  id: string;
  parent_id: string;
  timestamp: long;
  description: string;
  is_manual_save: bool;
  user_id: string;
}

table Checkpoint {
  base: VersionBase;
  data: [ubyte];
  size_bytes: long;
}

table JSONPatchOperation {
  op: string;
  path: string;
  // Can be any JSON type. It is stored here as a serialized JSON string.
  value: string;
}

table Delta {
  base: VersionBase;
  patch: [JSONPatchOperation];
}

table VersionGraphMetadata {
  pruning_level: PRUNING_LEVEL = null;
  last_pruned: long;
  total_size: long;
}

table VersionGraph {
  user_checkpoint_version_id: string;
  latest_version_id: string;
  checkpoints: [Checkpoint];
  deltas: [Delta];
  metadata: VersionGraphMetadata;
}


// =============================================================================
//  ROOT TYPE
// =============================================================================

/// Root data structure for the stored data state
table ExportedDataState {
  type: string;
  version_legacy: int (deprecated);
  version: string;
  
  source: string;
  thumbnail: [ubyte];
  dictionary: [DictionaryEntry];
  
  elements: [ElementWrapper];
  blocks: [DucBlock];
  groups: [DucGroup];
  layers: [DucLayer];
  standards: [Standard];

  duc_local_state: DucLocalState;
  duc_global_state: DucGlobalState;
  
  files: [BinaryFileEntry];
  
  version_graph: VersionGraph;
}

root_type ExportedDataState;