// SCHEMA_VERSION=2.0.0

// Official FlatBuffers Compiler: https://flatbuffers.ar.je/ 
// Official FlatBuffers Documentation: https://flatbuffers.dev/tutorial/

// To maintain backward compatibility when evolving FlatBuffers schemas, follow these guidelines:

// - **Should be fine to rename fields**
// - **Add new fields at the END of tables**: This ensures older code can still read the data without issues.
// - **DONT REMOVE FIELDS**: Instead of deleting unused fields, mark them as deprecated to prevent their use in new code while maintaining compatibility with existing data.
// - **DONT CHANGE FIELD TYPES**: Modifying a field's type can lead to incompatibilities. If necessary, add a new field with the desired type and deprecate the old one.
// - **BE CAREFUL WITH DEFAULT VALUES**: Changing default values can cause inconsistencies when reading older data. It's best to set appropriate defaults initially and avoid altering them. 
// - **STRING or TABLE CANNOT FALLBACK TO NULL**: these fields cannot be null. They already have a default null value.

namespace Duc;

file_identifier "DUC_";

// ENUMS
// // Usually we start from the value 10 on enums because on some languages, 0 is treated as false and 1 is treated as true on if statements

enum VERTICAL_ALIGN:ubyte {
  TOP = 10,
  MIDDLE = 11,
  BOTTOM = 12
}

enum TEXT_ALIGN:ubyte {
  LEFT = 10,
  CENTER = 11,
  RIGHT = 12
}

enum LINE_SPACING_TYPE:ubyte {
  AT_LEAST = 10,
  EXACTLY = 11,
  MULTIPLE = 12
}

enum STACKED_TEXT_ALIGN:ubyte {
  CENTER = 10,
  DECIMAL = 11,
  SLASH = 12
}

enum STROKE_PLACEMENT:ubyte {
  INSIDE = 10,
  CENTER = 11,
  OUTSIDE = 12
}

enum STROKE_WIDTH:ubyte {
  THIN = 1,
  BOLD = 2,
  EXTRA_BOLD = 4
}

enum ELEMENT_CONTENT_PREFERENCE:ubyte {
  SOLID = 12,
  FILL = 14,
  FIT = 15,
  TILE = 16,
  STRETCH = 17,
  HATCH = 18
}

enum STROKE_PREFERENCE:ubyte {
  SOLID = 10,
  DASHED = 11,
  DOTTED = 12,
  CUSTOM = 13
}

enum STROKE_SIDE_PREFERENCE:ubyte {
  TOP = 10,
  BOTTOM = 11,
  LEFT = 12,
  RIGHT = 13,
  CUSTOM = 14,
  ALL = 15
}

enum STROKE_CAP:ubyte {
  BUTT = 10,
  ROUND = 11,
  SQUARE = 12
}

enum STROKE_JOIN:ubyte {
  MITER = 10,
  ROUND = 11,
  BEVEL = 12
}

enum LINE_HEAD:ubyte {
  ARROW = 10,
  BAR = 11,
  CIRCLE = 12,
  CIRCLE_OUTLINED = 13,
  TRIANGLE = 14,
  TRIANGLE_OUTLINED = 15,
  DIAMOND = 16,
  DIAMOND_OUTLINED = 17,
  CROSS = 18,
  OPEN_ARROW = 19,
  REVERSED_ARROW = 20,
  REVERSED_TRIANGLE = 21,
  REVERSED_TRIANGLE_OUTLINED = 22,
  CONE = 23,
  HALF_CONE = 24
}

enum BEZIER_MIRRORING:ubyte {
  NONE = 10,
  ANGLE = 11,
  ANGLE_LENGTH = 12
}

enum HANDLE_TYPE:ubyte {
  HANDLE_IN = 10,
  HANDLE_OUT = 11
}

enum ANTI_ALIASING:ubyte {
  NONE = 10,
  ANALYTIC = 11,
  MSAA_8 = 8,
  MSAA_16 = 16
}

enum YOUTUBE_STATES:byte {
  UNSTARTED = -1,
  ENDED = 0,
  PLAYING = 1,
  PAUSED = 2,
  BUFFERING = 3,
  CUED = 5
}

enum BLENDING:ubyte {
  MULTIPLY = 11,
  SCREEN = 12,
  OVERLAY = 13,
  DARKEN = 14,
  LIGHTEN = 15,
  DIFFERENCE = 16,
  EXCLUSION = 17
}

enum GRID_DISPLAY_TYPE:ubyte {
  LINES = 10,
  DOTS = 11,
  CROSSES = 12,
  ADAPTIVE = 13
}

enum GRID_TYPE:ubyte {
  RECTANGULAR = 10,
  ISOMETRIC = 11,
  POLAR = 12,
  TRIANGULAR = 13,
  CUSTOM = 14
}

enum OBJECT_SNAP_MODE:ubyte {
  ENDPOINT = 10,
  MIDPOINT = 11,
  CENTER = 12,
  QUADRANT = 13,
  INTERSECTION = 14,
  EXTENSION = 15,
  PERPENDICULAR = 16,
  TANGENT = 17,
  NEAREST = 18,
  NODE = 19, // For points
  INSERT = 20, // For block insertion points
  PARALLEL = 21,
  APPARENT = 22,
  FROM = 23, // Reference point snap
  POINT_FILTER = 24, // X,Y,Z filtering
  TEMPORARY = 25, // Temporary tracking points
  BETWEEN_TWO_POINTS = 26,
  POINT_ON_CURVE = 27,
  GEOMETRIC = 28 // vs bounding box center
}

enum SNAP_MODE:ubyte {
  RUNNING = 10,
  SINGLE = 11
}

enum SNAP_OVERRIDE_BEHAVIOR:ubyte {
  DISABLE = 10,
  FORCE_GRID = 11,
  FORCE_OBJECT = 12
}

enum SNAP_MARKER_SHAPE:ubyte {
  SQUARE = 10,
  CIRCLE = 11,
  TRIANGLE = 12,
  X = 13
}

enum TABLE_CELL_ALIGNMENT:ubyte {
  TOP_LEFT = 10,
  TOP_CENTER = 11,
  TOP_RIGHT = 12,
  MIDDLE_LEFT = 13,
  MIDDLE_CENTER = 14,
  MIDDLE_RIGHT = 15,
  BOTTOM_LEFT = 16,
  BOTTOM_CENTER = 17,
  BOTTOM_RIGHT = 18
}

enum TABLE_FLOW_DIRECTION:ubyte {
  DOWN = 10,
  UP = 11
}

enum TOLERANCE_DISPLAY:ubyte {
  NONE = 10,
  SYMMETRICAL = 11, // ¬±
  DEVIATION = 12, // +upper/-lower
  LIMITS = 13, // Upper/lower limits
  BASIC = 14 // Boxed dimension
}

enum DIMENSION_TYPE:ubyte {
  LINEAR = 10,
  ALIGNED = 11,
  ANGULAR = 12,
  ARC_LENGTH = 13,
  RADIUS = 14,
  DIAMETER = 15,
  CENTER_MARK = 16,
  ROTATED = 17,
  SPACING = 18,
  CONTINUE = 19,
  BASELINE = 20,
  JOGGED_LINEAR = 21,
  ORDINATE = 22
}

enum MARK_ELLIPSE_CENTER:ubyte {
  MARK = 10,
  LINE = 11
}

enum TEXT_FLOW_DIRECTION:ubyte {
  LEFT_TO_RIGHT = 10,
  RIGHT_TO_LEFT = 11,
  TOP_TO_BOTTOM = 12,
  BOTTOM_TO_TOP = 13
}

enum COLUMN_TYPE:ubyte {
  NO_COLUMNS = 10,
  STATIC_COLUMNS = 11,
  DYNAMIC_COLUMNS = 12
}

enum GDT_SYMBOL:ubyte {
  // Form tolerances
  STRAIGHTNESS = 10, // "‚è§"
  FLATNESS = 11, // "‚è•"
  CIRCULARITY = 12, // "‚óã"
  CYLINDRICITY = 13, // "‚å≠"
  
  // Orientation tolerances  
  PERPENDICULARITY = 14, // "‚ä•"
  ANGULARITY = 15, // "‚à†"
  PARALLELISM = 16, // "‚à•"
  
  // Location tolerances
  POSITION = 17, // "‚åñ"
  TRUE_POSITION = 18, // "‚åñ" // Alternative name
  CONCENTRICITY = 19, // "‚óé"
  COAXIALITY = 20, // "‚óØ" // Different from concentricity in some standards
  SYMMETRY = 21, // "‚åØ"
  
  // Runout tolerances
  CIRCULAR_RUNOUT = 22, // "‚Üó"
  TOTAL_RUNOUT = 23, // "‚Üó‚Üó"
  
  // Profile tolerances
  PROFILE_OF_LINE = 24, // "‚åí"
  PROFILE_OF_SURFACE = 25, // "‚åì"
  
  // Special symbols
  STATISTICAL = 26, // "‚óä"
  ALL_AROUND = 27, // "‚≠ï"
  ALL_OVER = 28, // "üîÑ"
  BETWEEN = 29 // "‚Üî"
}

enum MATERIAL_CONDITION:ubyte {
  MAXIMUM = 10, // "‚ìÇ" // MMC - Maximum Material Condition
  LEAST = 11, // "‚ìÅ" // LMC - Least Material Condition
  REGARDLESS = 12 // "‚ìà" // RFS - Regardless of Feature Size (often omitted)
}

enum FEATURE_MODIFIER:ubyte {
  FREE_STATE = 10, // "‚íª"
  TANGENT_PLANE = 11, // "‚ìâ"
  PROJECTED_TOLERANCE_ZONE = 12, // "‚ìÖ"
  DIAMETER = 13, // "‚åÄ"
  SPHERICAL_DIAMETER = 14, // "S‚åÄ"
  RADIUS = 15, // "R"
  SPHERICAL_RADIUS = 16, // "SR"
  CONTROLLED_RADIUS = 17, // "CR"
  SQUARE = 18, // "‚ñ°"
  TRANSLATION = 19, // "‚ßó" // Translation modifier for position
  ALL_AROUND = 20, // "‚≠ï" // Can be used as modifier too
  ALL_OVER = 21, // "üîÑ" // Can be used as modifier too
  STATISTICAL = 22, // "‚óä" // Can be used as modifier
  CONTINUOUS_FEATURE = 23, // "CF" // Continuous feature
  UNEQUALLY_DISPOSED = 24 // "UEQ" // Unequally disposed tolerance
}

enum TOLERANCE_ZONE_TYPE:ubyte {
  CYLINDRICAL = 10,
  SPHERICAL = 11, 
  RECTANGULAR = 12,
  LINEAR = 13,
  CIRCULAR = 14
}

enum DATUM_TARGET_TYPE:ubyte {
  POINT = 10,
  LINE = 11, 
  AREA = 12,
  MOVABLE = 13
}

enum TOLERANCE_TYPE:ubyte {
  SINGLE = 10, // Single tolerance specification
  COMPOSITE = 11, // Composite tolerance (multiple rows, related)
  MULTIPLE = 12 // Multiple single-segment tolerances (independent)
}

enum DATUM_BRACKET_STYLE:ubyte {
  SQUARE = 10,
  ROUND = 11,
  NONE = 12
}

enum DIMENSION_UNITS_FORMAT:ubyte {
  DECIMAL = 10,
  ENGINEERING = 11, // Feet and decimal inches
  ARCHITECTURAL = 12, // Feet and fractional inches
  FRACTIONAL = 13, // Fractional inches
  SCIENTIFIC = 14
}

enum DIMENSION_FIT_RULE:ubyte {
  TEXT_AND_ARROWS = 10,
  ARROWS_ONLY = 11,
  TEXT_ONLY = 12,
  BEST_FIT = 13
}

enum DIMENSION_TEXT_PLACEMENT:ubyte {
  BESIDE_LINE = 10,
  OVER_LINE = 11,
  OVER_LINE_WITH_LEADER = 12
}

enum ANGULAR_UNITS_FORMAT:ubyte {
  DECIMAL_DEGREES = 10,
  DEGREES_MINUTES_SECONDS = 11,
  GRADS = 12,
  RADIANS = 13,
  SURVEYOR = 14
}

enum UNIT_SYSTEM:ubyte {
  METRIC = 10,
  IMPERIAL = 11
}

enum DECIMAL_SEPARATOR:ubyte {
  DOT = 10, // "."
  COMMA = 11 // ","
}

enum VIEWPORT_SHADE_PLOT:ubyte {
  AS_DISPLAYED = 10,
  WIREFRAME = 11,
  HIDDEN = 12,
  RENDERED = 13
}

enum HATCH_STYLE:ubyte {
  NORMAL = 10,    // Normal hatch
  OUTER = 11,     // Outermost boundary only
  IGNORE = 12     // Ignore internal structures
}

enum IMAGE_STATUS:ubyte {
  PENDING = 10,
  SAVED = 11,
  ERROR = 12
}

enum BLOCK_ATTACHMENT:ubyte {
  CENTER_EXTENTS = 10,
  INSERTION_POINT = 11
}

enum THEME:ubyte {
  LIGHT = 10,
  DARK = 11
}

enum AXIS:ubyte {
  X = 10,
  Y = 11,
  Z = 12
}

// /////////////////////

// Point type
table Point {
  x_v2: float = null;
  y_v2: float = null;
  is_curve: bool = null (deprecated); // Deprecated in favor of mirroring
  mirroring: byte = null;
  border_radius: double = null (deprecated); // Moved to lines system
  handle_in: SimplePoint (deprecated); // Moved to lines system
  handle_out: SimplePoint (deprecated); // Moved to lines system
  x_v3: double;
  y_v3: double;
  peer: int (deprecated); // Since version 5
  peers: [int] (deprecated); // Deprecated in favor of lines system
}

// Line reference for the new lines-based system
table DucLineReference {
  index: int; // Point index
  handle: SimplePoint; // Bezier handle position (null for linear)
}

// Line connection between two points
table DucLine {
  start: DucLineReference;
  end: DucLineReference;
}

table PointBinding {
  element_id: string;
  focus: float;
  gap: float;
  fixed_point_v3: Point (deprecated);
  point: BindingPoint;  // Optional point binding info
  head: byte;  // LINE_HEAD values
  fixed_point: SimplePoint;
}

table BindingPoint {
  index: int;
  offset: float;  // -1 to 1 range
}

table SimplePoint {
  x: double;
  y: double;  
}

table TilingProperties {
  size_in_percent: double;
  angle: double;
  spacing: double = null;
  offset_x: double = null;
  offset_y: double = null;
}

table ElementContentBase {
  preference: byte;  // ELEMENT_CONTENT_PREFERENCE values
  src: string;
  visible: bool;
  opacity: double;
  tiling: TilingProperties;
}

table StrokeStyle {
  preference: byte;  // STROKE_PREFERENCE values
  cap: byte = null;  // STROKE_CAP values
  join: byte = null;  // STROKE_JOIN values
  dash: [double];
  dash_cap: byte = null;  // STROKE_CAP values
  miter_limit: double = null;
}

table StrokeSides {
  preference: byte;  // STROKE_SIDE_PREFERENCE values
  values: [double];
}

table ElementStroke {
  content: ElementContentBase;
  width: double;
  style: StrokeStyle;
  placement: byte;  // StrokePlacement values
  stroke_sides: StrokeSides;
}

table ElementBackground {
  content: ElementContentBase;
}

table DucPath {
  line_indices: [int];
  background: ElementBackground;
  stroke: ElementStroke;
}

table ImageCrop {
  x: double;
  y: double;
  width: double;
  height: double;
  natural_width: double;
  natural_height: double;
}

// Table related definitions
table DucTableStyleProps {
  background_color: string;
  border_width: double;
  border_dashes: [double];
  border_color: string;
  text_color: string;
  text_size: double;
  text_font: string;
  text_align: byte; // TextAlign enum
}

table DucTableColumn {
  id: string;
  width: double;
  style: DucTableStyleProps;
}

table DucTableRow {
  id: string;
  height: double;
  style: DucTableStyleProps;
}

table DucTableCell {
  row_id: string;
  column_id: string;
  data: string;
  style: DucTableStyleProps;
}

table DucTableStyle {
  default_props: DucTableStyleProps;
}

table DucBlockInstanceElementOverride {
  element_id:string;
  overrides: string; // JSON stringified object
}

// Base table for DucElement with common fields
table DucElement {
  id: string;
  type: string;
  x_v2: float = null;
  y_v2: float = null;
  index: string (deprecated);
  scope: string;
  writing_layer: string (deprecated);
  label: string;
  is_visible: bool;
  roundness_type_v2: string (deprecated);
  roundness_value_v2: int (deprecated);
  background_color_v3: string;
  stroke_color_v3: string;
  stroke_width_v2: int (deprecated);
  stroke_style_v2: string (deprecated);
  fill_style_v2: string (deprecated);
  stroke_placement: byte (deprecated);
  opacity: float;
  width_v2: float = null;
  height_v2: float = null;
  angle_v2: float = null;
  is_deleted: bool;
  group_ids: [string];
  frame_id: string;
  bound_elements: [BoundElement];
  link: string;
  locked: bool;
  
  custom_data: string (deprecated);
  
  is_stroke_disabled: bool (deprecated);
  is_background_disabled: bool (deprecated);
  
  // TextElement specific fields
  text_font_size_v2: int = null;
  text_font_family: string;
  text_text: string;
  text_align_v2: string (deprecated);
  text_vertical_align_v2: string (deprecated);
  text_container_id: string;
  text_original_text: string (deprecated);
  text_line_height_v2: float = null;
  text_auto_resize: bool = null;
  
  // LinearElement specific fields
  linear_element_points: [Point];
  linear_element_last_committed_point: Point;
  linear_element_start_binding: PointBinding;
  linear_element_end_binding: PointBinding;
  arrow_start_arrowhead: string (deprecated);
  arrow_end_arrowhead: string (deprecated);
  arrow_elbowed: bool = null;
  
  // FreeDrawElement specific fields
  free_draw_pressures_v2: [float] (deprecated);
  free_draw_simulate_pressure: bool = null;
  
  file_id: string;
  image_status: IMAGE_STATUS = null;
  image_scale_v2: Point (deprecated);
  
  stack_like_is_collapsed: bool = null;
  name: string (deprecated);
  
  group_id_ref: string (deprecated);

  stroke_style_v3: byte;
  fill_style_v3: byte;
  text_text_align: byte = null;
  text_vertical_align: byte;
  
  x: double;
  y: double;
  image_scale: SimplePoint;
  free_draw_pressures: [double];
  stroke_width_v3: double;
  angle: double;
  roundness: double;
  width: double;
  height: double;
  text_font_size: double = null;
  text_line_height: double = null;

  blending: byte = null;
  background: [ElementBackground];
  stroke: [ElementStroke];
  image_crop: ImageCrop;
  stack_like_clip: bool = null;  
  
  subset: byte = null;  // ELEMENT_SUBSET values
  z_index: int;
  polygon_sides: int = null;

  // TableElement specific fields
  table_column_order: [string];
  table_row_order: [string];
  table_columns: [DucTableColumn];
  table_rows: [DucTableRow];
  table_cells: [DucTableCell];
  table_style: DucTableStyle;

  doc_content: string;

  linear_element_lines: [DucLine];

  ellipse_ratio: double = null;
  ellipse_start_angle: double = null;
  ellipse_end_angle: double = null;
  ellipse_show_aux_crosshair: bool = null;

  // FreeDrawElement specific fields
  free_draw_thinning: double = null;
  free_draw_smoothing: double = null;
  free_draw_streamline: double = null;
  free_draw_easing: string;
  free_draw_start_cap: bool = null;
  free_draw_start_taper: double = null;
  free_draw_start_easing: string;
  free_draw_end_cap: bool = null;
  free_draw_end_taper: double = null;
  free_draw_end_easing: string;
  free_draw_svg_path: string;
  free_draw_size: double = null;

  linear_element_path_overrides: [DucPath];
  
  description: string;
  no_plot: bool = null;

  stack_like_labeling_color: string;
  stack_like_stroke_override: ElementStroke;
  stack_like_background_override: ElementBackground;
  
  block_instance_block_id: string;
  block_instance_element_overrides: [DucBlockInstanceElementOverride];
}

// Define a table for BoundElement used in DucElement
table BoundElement {
  id: string;
  type: string;  // Any valid DucElementTypes
}

// LinearElementEditor
table SegmentMidpointState {
  value: Point;
  index: int;
  added: bool;
}

table PointerDownState {
  prev_selected_points_indices: [int];
  last_clicked_point: int;
  last_clicked_is_end_point: bool;
  origin: SimplePoint;
  segment_midpoint: SegmentMidpointState;
  handle_type: byte = null;
}

table LinearElementEditor {
  element_id: string;
  selected_points_indices: [int];
  pointer_down_state: PointerDownState;
  is_dragging: bool;
  last_uncommitted_point: Point;
  pointer_offset: SimplePoint;
  start_binding_element: string;
  end_binding_element: string;
  hover_point_index: int;
  segment_mid_point_hovered_coords: Point;
}
// 


table DucGroup {
  id: string;
  type: string (deprecated);
  is_collapsed: bool;
  label: string;
  scope: string (deprecated);
  writing_layer: string (deprecated);
  description: string;
  no_plot: bool = null;
  locked: bool;
  is_visible: bool;
  opacity: float;
  labeling_color: string;
  stroke_override: ElementStroke;
  background_override: ElementBackground;
  clip: bool = null;
}

table DucBlock {
  id: string;
  label: string;
  description: string;
  version: int;
  elements: [DucElement];
  attributes: [DucBlockAttribute];
}

table DucBlockAttributeDetails {
  tag: string;
  default_value: string;
  prompt: string;
  position: SimplePoint;
}

table DucBlockAttribute {
  name: string;
  details: DucBlockAttributeDetails;
}

table AppState {
  active_embeddable_element: DucElement (deprecated);
  active_embeddable_state: string (deprecated);
  dragging_element: DucElement (deprecated);
  resizing_element: DucElement (deprecated);
  multi_element: DucElement (deprecated);
  selection_element: DucElement (deprecated);
  frame_to_highlight: DucElement (deprecated);
  frame_rendering_enabled: bool;
  frame_rendering_name: bool;
  frame_rendering_outline: bool;
  frame_rendering_clip: bool;
  editing_frame: string (deprecated);
  elements_to_highlight: [DucElement] (deprecated);
  editing_element: DucElement (deprecated);
  current_item_stroke_color: string (deprecated);
  current_item_stroke_placement_v2: int (deprecated);
  current_item_background_color: string (deprecated);
  current_item_fill_style: string (deprecated);
  current_item_stroke_width_v2: int (deprecated);
  current_item_stroke_style: string (deprecated);
  current_item_roughness: int (deprecated);
  current_item_opacity: float;
  current_item_font_family: int (deprecated);
  current_item_font_size_v2: int (deprecated);
  current_item_text_align: string (deprecated);
  current_item_start_arrowhead: string (deprecated);
  current_item_end_arrowhead: string (deprecated);
  current_item_roundness: string (deprecated);
  view_background_color: string;
  scope: string;
  writing_layer: string (deprecated);
  groups: [DucGroup] (deprecated);
  scroll_x: float;
  scroll_y: float;
  cursor_button: string;
  scrolled_outside: bool;
  name: string;
  zoom: float;
  last_pointer_down_with: string;
  selected_element_ids: [string];
  previous_selected_element_ids: [string] (deprecated);
  selected_elements_are_being_dragged: bool (deprecated);
  should_cache_ignore_zoom: bool (deprecated);
  grid_size: int;
  selected_group_ids: [string] (deprecated);
  editing_group_id: string (deprecated);
  paste_dialog_shown: bool (deprecated);
  paste_dialog_data: string (deprecated);
  scale_ratio_locked: bool;
  display_all_point_distances: bool;
  display_distance_on_drawing: bool;
  display_all_point_coordinates: bool;
  display_all_point_info_selected: bool;
  display_root_axis: bool;

  enable_line_bending_on_edit: bool (deprecated);
  allow_independent_curve_handles: bool (deprecated); 
  coord_decimal_places: int (deprecated);

  current_item_fill_style_v3: byte (deprecated);
  current_item_stroke_style_v3: byte (deprecated);
  current_item_text_align_v3: byte;
  line_bending_mode: bool;

  current_item_stroke_width_v3: double (deprecated);
  current_item_stroke_placement_v3: byte (deprecated);
  current_item_font_size_v3: double;
  coord_decimal_places_v3: byte;
  current_item_stroke: ElementStroke;
  current_item_background: ElementBackground;
  
  main_scope: string;  // The preferred scope for the design
  standard: byte;  // DESIGN_STANDARD values
  current_item_start_line_head: byte = null;  // LINE_HEAD values
  current_item_end_line_head: byte = null;  // LINE_HEAD values
  current_item_roundness_v3: double;

  anti_aliasing: byte;
  v_sync: bool;

  current_item_font_family_v2: string;
  debug_rendering: bool;

  current_item_subset: byte = null;  // ELEMENT_SUBSET values
  editing_linear_element: LinearElementEditor;
  grid_mode_enabled: bool;
  grid_step: int;
  scope_exponent_threshold: byte;
  zoom_step: float;
  hovered_element_id: string;
  elements_pending_erasure: [string];
  suggested_binding_element_id: string;
  is_binding_enabled: bool;
}

// Define the BinaryFileData table
table BinaryFileData {
  mime_type: string;
  id: string;
  data: [ubyte];
  created: long;
  last_retrieved: long;
}

// Define a table to hold the BinaryFiles mapping
table BinaryFilesEntry {
  key: string;
  value: BinaryFileData;
}

table BinaryFiles {
  entries: [BinaryFilesEntry];
}

table RendererState {
  deleted_element_ids: [string];
}

table DictionaryEntry {
  key: string;
  value: string;
}

// ALWAYS PRESERVE THIS TABLE FOR BACKWARDS COMPATIBILITY ACROSS ANY MAJOR VERSIONS
table ExportedDataState {
  type: string;
  version_legacy: int;
  source: string;
  elements: [DucElement] (deprecated);
  app_state: AppState (deprecated);
  files: BinaryFiles (deprecated);
  renderer_state: RendererState;
  blocks: [DucBlock];
  groups: [DucGroup];
  version: string;
  layers: [DucLayer];
  standards: [Standard];
  dictionary: [DictionaryEntry];
  duc_state: DucState;
  duc_global_settings: DucGlobalSettings;
  thumbnail: [ubyte];
}

root_type ExportedDataState;