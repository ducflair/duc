// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { ActiveTool } from '../ducfig/active-tool';


export class AppState {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):AppState {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsAppState(bb:flatbuffers.ByteBuffer, obj?:AppState):AppState {
  return (obj || new AppState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsAppState(bb:flatbuffers.ByteBuffer, obj?:AppState):AppState {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new AppState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

isLoading():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

activeEmbeddableState():string|null
activeEmbeddableState(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
activeEmbeddableState(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

frameRenderingEnabled():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

frameRenderingName():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

frameRenderingOutline():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

frameRenderingClip():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

editingFrame():string|null
editingFrame(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
editingFrame(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

activeTool(obj?:ActiveTool):ActiveTool|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? (obj || new ActiveTool()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

penMode():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

penDetected():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

exportBackground():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

exportEmbedScene():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

exportWithDarkMode():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

exportScale():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

currentItemStrokeColor():string|null
currentItemStrokeColor(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
currentItemStrokeColor(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

currentItemBackgroundColor():string|null
currentItemBackgroundColor(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
currentItemBackgroundColor(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

currentItemFillStyle():string|null
currentItemFillStyle(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
currentItemFillStyle(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

currentItemStrokeWidth():number {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

currentItemStrokeStyle():string|null
currentItemStrokeStyle(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
currentItemStrokeStyle(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

currentItemRoughness():number {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

currentItemOpacity():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

currentItemFontFamily():string|null
currentItemFontFamily(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
currentItemFontFamily(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

currentItemFontSize():number {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

currentItemTextAlign():string|null
currentItemTextAlign(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
currentItemTextAlign(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

currentItemStartArrowhead():string|null
currentItemStartArrowhead(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
currentItemStartArrowhead(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

currentItemEndArrowhead():string|null
currentItemEndArrowhead(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
currentItemEndArrowhead(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

currentItemRoundness():string|null
currentItemRoundness(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
currentItemRoundness(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

viewBackgroundColor():string|null
viewBackgroundColor(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
viewBackgroundColor(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

scope():string|null
scope(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
scope(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

writingLayer():string|null
writingLayer(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
writingLayer(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

scrollX():number {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

scrollY():number {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

cursorButton():string|null
cursorButton(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
cursorButton(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

scrolledOutside():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

isResizing():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

isRotating():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

zoom():number {
  const offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

lastPointerDownWith():string|null
lastPointerDownWith(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
lastPointerDownWith(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

selectedElementIds(index: number):string
selectedElementIds(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
selectedElementIds(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 82);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

selectedElementIdsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 82);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

previousSelectedElementIds(index: number):string
previousSelectedElementIds(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
previousSelectedElementIds(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 84);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

previousSelectedElementIdsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 84);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

selectedElementsAreBeingDragged():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 86);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

shouldCacheIgnoreZoom():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 88);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

gridSize():number {
  const offset = this.bb!.__offset(this.bb_pos, 90);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

viewModeEnabled():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 92);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

width():number {
  const offset = this.bb!.__offset(this.bb_pos, 94);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

height():number {
  const offset = this.bb!.__offset(this.bb_pos, 96);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

offsetTop():number {
  const offset = this.bb!.__offset(this.bb_pos, 98);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

offsetLeft():number {
  const offset = this.bb!.__offset(this.bb_pos, 100);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

pasteDialogShown():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 102);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

pasteDialogData():string|null
pasteDialogData(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
pasteDialogData(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 104);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

pendingImageElementId():string|null
pendingImageElementId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
pendingImageElementId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 106);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

originSnapOffsetX():number {
  const offset = this.bb!.__offset(this.bb_pos, 108);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

originSnapOffsetY():number {
  const offset = this.bb!.__offset(this.bb_pos, 110);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

objectsSnapModeEnabled():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 112);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startAppState(builder:flatbuffers.Builder) {
  builder.startObject(55);
}

static addIsLoading(builder:flatbuffers.Builder, isLoading:boolean) {
  builder.addFieldInt8(0, +isLoading, +false);
}

static addActiveEmbeddableState(builder:flatbuffers.Builder, activeEmbeddableStateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, activeEmbeddableStateOffset, 0);
}

static addFrameRenderingEnabled(builder:flatbuffers.Builder, frameRenderingEnabled:boolean) {
  builder.addFieldInt8(2, +frameRenderingEnabled, +false);
}

static addFrameRenderingName(builder:flatbuffers.Builder, frameRenderingName:boolean) {
  builder.addFieldInt8(3, +frameRenderingName, +false);
}

static addFrameRenderingOutline(builder:flatbuffers.Builder, frameRenderingOutline:boolean) {
  builder.addFieldInt8(4, +frameRenderingOutline, +false);
}

static addFrameRenderingClip(builder:flatbuffers.Builder, frameRenderingClip:boolean) {
  builder.addFieldInt8(5, +frameRenderingClip, +false);
}

static addEditingFrame(builder:flatbuffers.Builder, editingFrameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, editingFrameOffset, 0);
}

static addActiveTool(builder:flatbuffers.Builder, activeToolOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, activeToolOffset, 0);
}

static addPenMode(builder:flatbuffers.Builder, penMode:boolean) {
  builder.addFieldInt8(8, +penMode, +false);
}

static addPenDetected(builder:flatbuffers.Builder, penDetected:boolean) {
  builder.addFieldInt8(9, +penDetected, +false);
}

static addExportBackground(builder:flatbuffers.Builder, exportBackground:boolean) {
  builder.addFieldInt8(10, +exportBackground, +false);
}

static addExportEmbedScene(builder:flatbuffers.Builder, exportEmbedScene:boolean) {
  builder.addFieldInt8(11, +exportEmbedScene, +false);
}

static addExportWithDarkMode(builder:flatbuffers.Builder, exportWithDarkMode:boolean) {
  builder.addFieldInt8(12, +exportWithDarkMode, +false);
}

static addExportScale(builder:flatbuffers.Builder, exportScale:number) {
  builder.addFieldFloat32(13, exportScale, 0.0);
}

static addCurrentItemStrokeColor(builder:flatbuffers.Builder, currentItemStrokeColorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, currentItemStrokeColorOffset, 0);
}

static addCurrentItemBackgroundColor(builder:flatbuffers.Builder, currentItemBackgroundColorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, currentItemBackgroundColorOffset, 0);
}

static addCurrentItemFillStyle(builder:flatbuffers.Builder, currentItemFillStyleOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, currentItemFillStyleOffset, 0);
}

static addCurrentItemStrokeWidth(builder:flatbuffers.Builder, currentItemStrokeWidth:number) {
  builder.addFieldInt32(17, currentItemStrokeWidth, 0);
}

static addCurrentItemStrokeStyle(builder:flatbuffers.Builder, currentItemStrokeStyleOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, currentItemStrokeStyleOffset, 0);
}

static addCurrentItemRoughness(builder:flatbuffers.Builder, currentItemRoughness:number) {
  builder.addFieldInt32(19, currentItemRoughness, 0);
}

static addCurrentItemOpacity(builder:flatbuffers.Builder, currentItemOpacity:number) {
  builder.addFieldFloat32(20, currentItemOpacity, 0.0);
}

static addCurrentItemFontFamily(builder:flatbuffers.Builder, currentItemFontFamilyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(21, currentItemFontFamilyOffset, 0);
}

static addCurrentItemFontSize(builder:flatbuffers.Builder, currentItemFontSize:number) {
  builder.addFieldInt32(22, currentItemFontSize, 0);
}

static addCurrentItemTextAlign(builder:flatbuffers.Builder, currentItemTextAlignOffset:flatbuffers.Offset) {
  builder.addFieldOffset(23, currentItemTextAlignOffset, 0);
}

static addCurrentItemStartArrowhead(builder:flatbuffers.Builder, currentItemStartArrowheadOffset:flatbuffers.Offset) {
  builder.addFieldOffset(24, currentItemStartArrowheadOffset, 0);
}

static addCurrentItemEndArrowhead(builder:flatbuffers.Builder, currentItemEndArrowheadOffset:flatbuffers.Offset) {
  builder.addFieldOffset(25, currentItemEndArrowheadOffset, 0);
}

static addCurrentItemRoundness(builder:flatbuffers.Builder, currentItemRoundnessOffset:flatbuffers.Offset) {
  builder.addFieldOffset(26, currentItemRoundnessOffset, 0);
}

static addViewBackgroundColor(builder:flatbuffers.Builder, viewBackgroundColorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(27, viewBackgroundColorOffset, 0);
}

static addScope(builder:flatbuffers.Builder, scopeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(28, scopeOffset, 0);
}

static addWritingLayer(builder:flatbuffers.Builder, writingLayerOffset:flatbuffers.Offset) {
  builder.addFieldOffset(29, writingLayerOffset, 0);
}

static addScrollX(builder:flatbuffers.Builder, scrollX:number) {
  builder.addFieldFloat32(30, scrollX, 0.0);
}

static addScrollY(builder:flatbuffers.Builder, scrollY:number) {
  builder.addFieldFloat32(31, scrollY, 0.0);
}

static addCursorButton(builder:flatbuffers.Builder, cursorButtonOffset:flatbuffers.Offset) {
  builder.addFieldOffset(32, cursorButtonOffset, 0);
}

static addScrolledOutside(builder:flatbuffers.Builder, scrolledOutside:boolean) {
  builder.addFieldInt8(33, +scrolledOutside, +false);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(34, nameOffset, 0);
}

static addIsResizing(builder:flatbuffers.Builder, isResizing:boolean) {
  builder.addFieldInt8(35, +isResizing, +false);
}

static addIsRotating(builder:flatbuffers.Builder, isRotating:boolean) {
  builder.addFieldInt8(36, +isRotating, +false);
}

static addZoom(builder:flatbuffers.Builder, zoom:number) {
  builder.addFieldFloat32(37, zoom, 0.0);
}

static addLastPointerDownWith(builder:flatbuffers.Builder, lastPointerDownWithOffset:flatbuffers.Offset) {
  builder.addFieldOffset(38, lastPointerDownWithOffset, 0);
}

static addSelectedElementIds(builder:flatbuffers.Builder, selectedElementIdsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(39, selectedElementIdsOffset, 0);
}

static createSelectedElementIdsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSelectedElementIdsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addPreviousSelectedElementIds(builder:flatbuffers.Builder, previousSelectedElementIdsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(40, previousSelectedElementIdsOffset, 0);
}

static createPreviousSelectedElementIdsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startPreviousSelectedElementIdsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addSelectedElementsAreBeingDragged(builder:flatbuffers.Builder, selectedElementsAreBeingDragged:boolean) {
  builder.addFieldInt8(41, +selectedElementsAreBeingDragged, +false);
}

static addShouldCacheIgnoreZoom(builder:flatbuffers.Builder, shouldCacheIgnoreZoom:boolean) {
  builder.addFieldInt8(42, +shouldCacheIgnoreZoom, +false);
}

static addGridSize(builder:flatbuffers.Builder, gridSize:number) {
  builder.addFieldInt32(43, gridSize, 0);
}

static addViewModeEnabled(builder:flatbuffers.Builder, viewModeEnabled:boolean) {
  builder.addFieldInt8(44, +viewModeEnabled, +false);
}

static addWidth(builder:flatbuffers.Builder, width:number) {
  builder.addFieldInt32(45, width, 0);
}

static addHeight(builder:flatbuffers.Builder, height:number) {
  builder.addFieldInt32(46, height, 0);
}

static addOffsetTop(builder:flatbuffers.Builder, offsetTop:number) {
  builder.addFieldInt32(47, offsetTop, 0);
}

static addOffsetLeft(builder:flatbuffers.Builder, offsetLeft:number) {
  builder.addFieldInt32(48, offsetLeft, 0);
}

static addPasteDialogShown(builder:flatbuffers.Builder, pasteDialogShown:boolean) {
  builder.addFieldInt8(49, +pasteDialogShown, +false);
}

static addPasteDialogData(builder:flatbuffers.Builder, pasteDialogDataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(50, pasteDialogDataOffset, 0);
}

static addPendingImageElementId(builder:flatbuffers.Builder, pendingImageElementIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(51, pendingImageElementIdOffset, 0);
}

static addOriginSnapOffsetX(builder:flatbuffers.Builder, originSnapOffsetX:number) {
  builder.addFieldFloat32(52, originSnapOffsetX, 0.0);
}

static addOriginSnapOffsetY(builder:flatbuffers.Builder, originSnapOffsetY:number) {
  builder.addFieldFloat32(53, originSnapOffsetY, 0.0);
}

static addObjectsSnapModeEnabled(builder:flatbuffers.Builder, objectsSnapModeEnabled:boolean) {
  builder.addFieldInt8(54, +objectsSnapModeEnabled, +false);
}

static endAppState(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
