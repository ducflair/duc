// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class UserToFollow {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):UserToFollow {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsUserToFollow(bb:flatbuffers.ByteBuffer, obj?:UserToFollow):UserToFollow {
  return (obj || new UserToFollow()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsUserToFollow(bb:flatbuffers.ByteBuffer, obj?:UserToFollow):UserToFollow {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new UserToFollow()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

socketId():string|null
socketId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
socketId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

username():string|null
username(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
username(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startUserToFollow(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addSocketId(builder:flatbuffers.Builder, socketIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, socketIdOffset, 0);
}

static addUsername(builder:flatbuffers.Builder, usernameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, usernameOffset, 0);
}

static endUserToFollow(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createUserToFollow(builder:flatbuffers.Builder, socketIdOffset:flatbuffers.Offset, usernameOffset:flatbuffers.Offset):flatbuffers.Offset {
  UserToFollow.startUserToFollow(builder);
  UserToFollow.addSocketId(builder, socketIdOffset);
  UserToFollow.addUsername(builder, usernameOffset);
  return UserToFollow.endUserToFollow(builder);
}
}
