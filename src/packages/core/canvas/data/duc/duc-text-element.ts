// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { DucElement } from '../duc/duc-element.js';


export class DucTextElement {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DucTextElement {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDucTextElement(bb:flatbuffers.ByteBuffer, obj?:DucTextElement):DucTextElement {
  return (obj || new DucTextElement()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDucTextElement(bb:flatbuffers.ByteBuffer, obj?:DucTextElement):DucTextElement {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DucTextElement()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

base(obj?:DucElement):DucElement|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new DucElement()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

type():string|null
type(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
type(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

fontSize():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

fontFamily():string|null
fontFamily(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
fontFamily(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

text():string|null
text(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
text(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

textAlign():string|null
textAlign(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
textAlign(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

verticalAlign():string|null
verticalAlign(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
verticalAlign(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

containerId():string|null
containerId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
containerId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

originalText():string|null
originalText(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
originalText(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

lineHeight():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

static startDucTextElement(builder:flatbuffers.Builder) {
  builder.startObject(10);
}

static addBase(builder:flatbuffers.Builder, baseOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, baseOffset, 0);
}

static addType(builder:flatbuffers.Builder, typeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, typeOffset, 0);
}

static addFontSize(builder:flatbuffers.Builder, fontSize:number) {
  builder.addFieldInt32(2, fontSize, 0);
}

static addFontFamily(builder:flatbuffers.Builder, fontFamilyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, fontFamilyOffset, 0);
}

static addText(builder:flatbuffers.Builder, textOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, textOffset, 0);
}

static addTextAlign(builder:flatbuffers.Builder, textAlignOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, textAlignOffset, 0);
}

static addVerticalAlign(builder:flatbuffers.Builder, verticalAlignOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, verticalAlignOffset, 0);
}

static addContainerId(builder:flatbuffers.Builder, containerIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, containerIdOffset, 0);
}

static addOriginalText(builder:flatbuffers.Builder, originalTextOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, originalTextOffset, 0);
}

static addLineHeight(builder:flatbuffers.Builder, lineHeight:number) {
  builder.addFieldFloat32(9, lineHeight, 0.0);
}

static endDucTextElement(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createDucTextElement(builder:flatbuffers.Builder, baseOffset:flatbuffers.Offset, typeOffset:flatbuffers.Offset, fontSize:number, fontFamilyOffset:flatbuffers.Offset, textOffset:flatbuffers.Offset, textAlignOffset:flatbuffers.Offset, verticalAlignOffset:flatbuffers.Offset, containerIdOffset:flatbuffers.Offset, originalTextOffset:flatbuffers.Offset, lineHeight:number):flatbuffers.Offset {
  DucTextElement.startDucTextElement(builder);
  DucTextElement.addBase(builder, baseOffset);
  DucTextElement.addType(builder, typeOffset);
  DucTextElement.addFontSize(builder, fontSize);
  DucTextElement.addFontFamily(builder, fontFamilyOffset);
  DucTextElement.addText(builder, textOffset);
  DucTextElement.addTextAlign(builder, textAlignOffset);
  DucTextElement.addVerticalAlign(builder, verticalAlignOffset);
  DucTextElement.addContainerId(builder, containerIdOffset);
  DucTextElement.addOriginalText(builder, originalTextOffset);
  DucTextElement.addLineHeight(builder, lineHeight);
  return DucTextElement.endDucTextElement(builder);
}
}
