// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { DucElement } from '../duc/duc-element.js';
import { Point } from '../duc/point.js';
import { PointBinding } from '../duc/point-binding.js';


export class DucLinearElement {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DucLinearElement {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDucLinearElement(bb:flatbuffers.ByteBuffer, obj?:DucLinearElement):DucLinearElement {
  return (obj || new DucLinearElement()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDucLinearElement(bb:flatbuffers.ByteBuffer, obj?:DucLinearElement):DucLinearElement {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DucLinearElement()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

base(obj?:DucElement):DucElement|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new DucElement()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

points(index: number, obj?:Point):Point|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Point()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

pointsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

lastCommittedPoint(obj?:Point):Point|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new Point()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

startBinding(obj?:PointBinding):PointBinding|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new PointBinding()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

endBinding(obj?:PointBinding):PointBinding|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new PointBinding()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

startArrowhead():string|null
startArrowhead(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
startArrowhead(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

endArrowhead():string|null
endArrowhead(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
endArrowhead(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startDucLinearElement(builder:flatbuffers.Builder) {
  builder.startObject(7);
}

static addBase(builder:flatbuffers.Builder, baseOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, baseOffset, 0);
}

static addPoints(builder:flatbuffers.Builder, pointsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, pointsOffset, 0);
}

static createPointsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startPointsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addLastCommittedPoint(builder:flatbuffers.Builder, lastCommittedPointOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, lastCommittedPointOffset, 0);
}

static addStartBinding(builder:flatbuffers.Builder, startBindingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, startBindingOffset, 0);
}

static addEndBinding(builder:flatbuffers.Builder, endBindingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, endBindingOffset, 0);
}

static addStartArrowhead(builder:flatbuffers.Builder, startArrowheadOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, startArrowheadOffset, 0);
}

static addEndArrowhead(builder:flatbuffers.Builder, endArrowheadOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, endArrowheadOffset, 0);
}

static endDucLinearElement(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
