// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { BoundElement } from '../duc/bound-element';
import { Point } from '../duc/point';
import { PointBinding } from '../duc/point-binding';


export class DucElement {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DucElement {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDucElement(bb:flatbuffers.ByteBuffer, obj?:DucElement):DucElement {
  return (obj || new DucElement()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDucElement(bb:flatbuffers.ByteBuffer, obj?:DucElement):DucElement {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DucElement()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

type():string|null
type(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
type(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

x():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

y():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

index():string|null
index(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
index(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

scope():string|null
scope(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
scope(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

writingLayer():string|null
writingLayer(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
writingLayer(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

label():string|null
label(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
label(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

ratioLocked():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

isVisible():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

fillStyle():string|null
fillStyle(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
fillStyle(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

roughness():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

roundnessType():string|null
roundnessType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
roundnessType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

roundnessValue():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

backgroundColor():string|null
backgroundColor(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
backgroundColor(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

strokeColor():string|null
strokeColor(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
strokeColor(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

strokeWidth():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

strokeStyle():string|null
strokeStyle(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
strokeStyle(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

strokePlacement():string|null
strokePlacement(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
strokePlacement(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

opacity():number {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

width():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

height():number {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

angle():number {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

seed():number {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

version():number {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

versionNonce():number {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

isDeleted():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

groupIds(index: number):string
groupIds(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
groupIds(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

groupIdsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

frameId():string|null
frameId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
frameId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

boundElements(index: number, obj?:BoundElement):BoundElement|null {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? (obj || new BoundElement()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

boundElementsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

updated():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

link():string|null
link(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
link(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

locked():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

customData():string|null
customData(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
customData(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

fontSize():number {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

fontFamily():string|null
fontFamily(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
fontFamily(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

text():string|null
text(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
text(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

textAlign():string|null
textAlign(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
textAlign(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

verticalAlign():string|null
verticalAlign(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
verticalAlign(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

containerId():string|null
containerId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
containerId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 82);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

originalText():string|null
originalText(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
originalText(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 84);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

lineHeight():number {
  const offset = this.bb!.__offset(this.bb_pos, 86);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

autoResize():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 88);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

points(index: number, obj?:Point):Point|null {
  const offset = this.bb!.__offset(this.bb_pos, 90);
  return offset ? (obj || new Point()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

pointsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 90);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

lastCommittedPoint(obj?:Point):Point|null {
  const offset = this.bb!.__offset(this.bb_pos, 92);
  return offset ? (obj || new Point()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

startBinding(obj?:PointBinding):PointBinding|null {
  const offset = this.bb!.__offset(this.bb_pos, 94);
  return offset ? (obj || new PointBinding()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

endBinding(obj?:PointBinding):PointBinding|null {
  const offset = this.bb!.__offset(this.bb_pos, 96);
  return offset ? (obj || new PointBinding()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

startArrowhead():string|null
startArrowhead(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
startArrowhead(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 98);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

endArrowhead():string|null
endArrowhead(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
endArrowhead(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 100);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

elbowed():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 102);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

pressures(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 104);
  return offset ? this.bb!.readFloat32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
}

pressuresLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 104);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

pressuresArray():Float32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 104);
  return offset ? new Float32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

simulatePressure():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 106);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

fileId():string|null
fileId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
fileId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 108);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

status():string|null
status(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
status(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 110);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

scale(obj?:Point):Point|null {
  const offset = this.bb!.__offset(this.bb_pos, 112);
  return offset ? (obj || new Point()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

isCollapsed():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 114);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 116);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

groupIdRef():string|null
groupIdRef(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
groupIdRef(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 118);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startDucElement(builder:flatbuffers.Builder) {
  builder.startObject(58);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addType(builder:flatbuffers.Builder, typeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, typeOffset, 0);
}

static addX(builder:flatbuffers.Builder, x:number) {
  builder.addFieldFloat32(2, x, 0.0);
}

static addY(builder:flatbuffers.Builder, y:number) {
  builder.addFieldFloat32(3, y, 0.0);
}

static addIndex(builder:flatbuffers.Builder, indexOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, indexOffset, 0);
}

static addScope(builder:flatbuffers.Builder, scopeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, scopeOffset, 0);
}

static addWritingLayer(builder:flatbuffers.Builder, writingLayerOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, writingLayerOffset, 0);
}

static addLabel(builder:flatbuffers.Builder, labelOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, labelOffset, 0);
}

static addRatioLocked(builder:flatbuffers.Builder, ratioLocked:boolean) {
  builder.addFieldInt8(8, +ratioLocked, +false);
}

static addIsVisible(builder:flatbuffers.Builder, isVisible:boolean) {
  builder.addFieldInt8(9, +isVisible, +false);
}

static addFillStyle(builder:flatbuffers.Builder, fillStyleOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, fillStyleOffset, 0);
}

static addRoughness(builder:flatbuffers.Builder, roughness:number) {
  builder.addFieldInt32(11, roughness, 0);
}

static addRoundnessType(builder:flatbuffers.Builder, roundnessTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, roundnessTypeOffset, 0);
}

static addRoundnessValue(builder:flatbuffers.Builder, roundnessValue:number) {
  builder.addFieldInt32(13, roundnessValue, 0);
}

static addBackgroundColor(builder:flatbuffers.Builder, backgroundColorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, backgroundColorOffset, 0);
}

static addStrokeColor(builder:flatbuffers.Builder, strokeColorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, strokeColorOffset, 0);
}

static addStrokeWidth(builder:flatbuffers.Builder, strokeWidth:number) {
  builder.addFieldInt32(16, strokeWidth, 0);
}

static addStrokeStyle(builder:flatbuffers.Builder, strokeStyleOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, strokeStyleOffset, 0);
}

static addStrokePlacement(builder:flatbuffers.Builder, strokePlacementOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, strokePlacementOffset, 0);
}

static addOpacity(builder:flatbuffers.Builder, opacity:number) {
  builder.addFieldFloat32(19, opacity, 0.0);
}

static addWidth(builder:flatbuffers.Builder, width:number) {
  builder.addFieldFloat32(20, width, 0.0);
}

static addHeight(builder:flatbuffers.Builder, height:number) {
  builder.addFieldFloat32(21, height, 0.0);
}

static addAngle(builder:flatbuffers.Builder, angle:number) {
  builder.addFieldFloat32(22, angle, 0.0);
}

static addSeed(builder:flatbuffers.Builder, seed:number) {
  builder.addFieldInt32(23, seed, 0);
}

static addVersion(builder:flatbuffers.Builder, version:number) {
  builder.addFieldInt32(24, version, 0);
}

static addVersionNonce(builder:flatbuffers.Builder, versionNonce:number) {
  builder.addFieldInt32(25, versionNonce, 0);
}

static addIsDeleted(builder:flatbuffers.Builder, isDeleted:boolean) {
  builder.addFieldInt8(26, +isDeleted, +false);
}

static addGroupIds(builder:flatbuffers.Builder, groupIdsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(27, groupIdsOffset, 0);
}

static createGroupIdsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startGroupIdsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addFrameId(builder:flatbuffers.Builder, frameIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(28, frameIdOffset, 0);
}

static addBoundElements(builder:flatbuffers.Builder, boundElementsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(29, boundElementsOffset, 0);
}

static createBoundElementsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startBoundElementsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addUpdated(builder:flatbuffers.Builder, updated:bigint) {
  builder.addFieldInt64(30, updated, BigInt('0'));
}

static addLink(builder:flatbuffers.Builder, linkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(31, linkOffset, 0);
}

static addLocked(builder:flatbuffers.Builder, locked:boolean) {
  builder.addFieldInt8(32, +locked, +false);
}

static addCustomData(builder:flatbuffers.Builder, customDataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(33, customDataOffset, 0);
}

static addFontSize(builder:flatbuffers.Builder, fontSize:number) {
  builder.addFieldInt32(34, fontSize, 0);
}

static addFontFamily(builder:flatbuffers.Builder, fontFamilyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(35, fontFamilyOffset, 0);
}

static addText(builder:flatbuffers.Builder, textOffset:flatbuffers.Offset) {
  builder.addFieldOffset(36, textOffset, 0);
}

static addTextAlign(builder:flatbuffers.Builder, textAlignOffset:flatbuffers.Offset) {
  builder.addFieldOffset(37, textAlignOffset, 0);
}

static addVerticalAlign(builder:flatbuffers.Builder, verticalAlignOffset:flatbuffers.Offset) {
  builder.addFieldOffset(38, verticalAlignOffset, 0);
}

static addContainerId(builder:flatbuffers.Builder, containerIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(39, containerIdOffset, 0);
}

static addOriginalText(builder:flatbuffers.Builder, originalTextOffset:flatbuffers.Offset) {
  builder.addFieldOffset(40, originalTextOffset, 0);
}

static addLineHeight(builder:flatbuffers.Builder, lineHeight:number) {
  builder.addFieldFloat32(41, lineHeight, 0.0);
}

static addAutoResize(builder:flatbuffers.Builder, autoResize:boolean) {
  builder.addFieldInt8(42, +autoResize, +false);
}

static addPoints(builder:flatbuffers.Builder, pointsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(43, pointsOffset, 0);
}

static createPointsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startPointsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addLastCommittedPoint(builder:flatbuffers.Builder, lastCommittedPointOffset:flatbuffers.Offset) {
  builder.addFieldOffset(44, lastCommittedPointOffset, 0);
}

static addStartBinding(builder:flatbuffers.Builder, startBindingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(45, startBindingOffset, 0);
}

static addEndBinding(builder:flatbuffers.Builder, endBindingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(46, endBindingOffset, 0);
}

static addStartArrowhead(builder:flatbuffers.Builder, startArrowheadOffset:flatbuffers.Offset) {
  builder.addFieldOffset(47, startArrowheadOffset, 0);
}

static addEndArrowhead(builder:flatbuffers.Builder, endArrowheadOffset:flatbuffers.Offset) {
  builder.addFieldOffset(48, endArrowheadOffset, 0);
}

static addElbowed(builder:flatbuffers.Builder, elbowed:boolean) {
  builder.addFieldInt8(49, +elbowed, +false);
}

static addPressures(builder:flatbuffers.Builder, pressuresOffset:flatbuffers.Offset) {
  builder.addFieldOffset(50, pressuresOffset, 0);
}

static createPressuresVector(builder:flatbuffers.Builder, data:number[]|Float32Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createPressuresVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createPressuresVector(builder:flatbuffers.Builder, data:number[]|Float32Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addFloat32(data[i]!);
  }
  return builder.endVector();
}

static startPressuresVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addSimulatePressure(builder:flatbuffers.Builder, simulatePressure:boolean) {
  builder.addFieldInt8(51, +simulatePressure, +false);
}

static addFileId(builder:flatbuffers.Builder, fileIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(52, fileIdOffset, 0);
}

static addStatus(builder:flatbuffers.Builder, statusOffset:flatbuffers.Offset) {
  builder.addFieldOffset(53, statusOffset, 0);
}

static addScale(builder:flatbuffers.Builder, scaleOffset:flatbuffers.Offset) {
  builder.addFieldOffset(54, scaleOffset, 0);
}

static addIsCollapsed(builder:flatbuffers.Builder, isCollapsed:boolean) {
  builder.addFieldInt8(55, +isCollapsed, +false);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(56, nameOffset, 0);
}

static addGroupIdRef(builder:flatbuffers.Builder, groupIdRefOffset:flatbuffers.Offset) {
  builder.addFieldOffset(57, groupIdRefOffset, 0);
}

static endDucElement(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
