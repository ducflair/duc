// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { AppState } from '../duc/app-state';
import { BinaryFiles } from '../duc/binary-files';
import { DucElement } from '../duc/duc-element';


export class ExportedDataState {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ExportedDataState {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsExportedDataState(bb:flatbuffers.ByteBuffer, obj?:ExportedDataState):ExportedDataState {
  return (obj || new ExportedDataState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsExportedDataState(bb:flatbuffers.ByteBuffer, obj?:ExportedDataState):ExportedDataState {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ExportedDataState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('DUC_');
}

type():string|null
type(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
type(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

version():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

elements(index: number, obj?:DucElement):DucElement|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new DucElement()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

elementsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

appState(obj?:AppState):AppState|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new AppState()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

files(obj?:BinaryFiles):BinaryFiles|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new BinaryFiles()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startExportedDataState(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addType(builder:flatbuffers.Builder, typeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, typeOffset, 0);
}

static addVersion(builder:flatbuffers.Builder, version:number) {
  builder.addFieldInt32(1, version, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, sourceOffset, 0);
}

static addElements(builder:flatbuffers.Builder, elementsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, elementsOffset, 0);
}

static createElementsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startElementsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addAppState(builder:flatbuffers.Builder, appStateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, appStateOffset, 0);
}

static addFiles(builder:flatbuffers.Builder, filesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, filesOffset, 0);
}

static endExportedDataState(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishExportedDataStateBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'DUC_');
}

static finishSizePrefixedExportedDataStateBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'DUC_', true);
}

}
