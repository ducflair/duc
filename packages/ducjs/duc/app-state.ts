// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { DucGroup } from './duc-group';
import { ElementBackground } from './element-background';
import { ElementStroke } from './element-stroke';
import { LinearElementEditor } from './linear-element-editor';


export class AppState {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):AppState {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsAppState(bb:flatbuffers.ByteBuffer, obj?:AppState):AppState {
  return (obj || new AppState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsAppState(bb:flatbuffers.ByteBuffer, obj?:AppState):AppState {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new AppState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

frameRenderingEnabled():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

frameRenderingName():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

frameRenderingOutline():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

frameRenderingClip():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

currentItemOpacity():number {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

viewBackgroundColor():string|null
viewBackgroundColor(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
viewBackgroundColor(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

scope():string|null
scope(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
scope(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

groups(index: number, obj?:DucGroup):DucGroup|null {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? (obj || new DucGroup()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

groupsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

scrollX():number {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

scrollY():number {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

cursorButton():string|null
cursorButton(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
cursorButton(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

scrolledOutside():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

zoom():number {
  const offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

lastPointerDownWith():string|null
lastPointerDownWith(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
lastPointerDownWith(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

selectedElementIds(index: number):string
selectedElementIds(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
selectedElementIds(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 82);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

selectedElementIdsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 82);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

gridSize():number {
  const offset = this.bb!.__offset(this.bb_pos, 90);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

scaleRatioLocked():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 100);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

displayAllPointDistances():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 102);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

displayDistanceOnDrawing():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 104);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

displayAllPointCoordinates():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 106);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

displayAllPointInfoSelected():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 108);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

displayRootAxis():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 110);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

currentItemTextAlignV3():number {
  const offset = this.bb!.__offset(this.bb_pos, 122);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : 0;
}

lineBendingMode():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 124);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

currentItemFontSizeV3():number {
  const offset = this.bb!.__offset(this.bb_pos, 130);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

coordDecimalPlacesV3():number {
  const offset = this.bb!.__offset(this.bb_pos, 132);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : 0;
}

currentItemStroke(obj?:ElementStroke):ElementStroke|null {
  const offset = this.bb!.__offset(this.bb_pos, 134);
  return offset ? (obj || new ElementStroke()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

currentItemBackground(obj?:ElementBackground):ElementBackground|null {
  const offset = this.bb!.__offset(this.bb_pos, 136);
  return offset ? (obj || new ElementBackground()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

mainScope():string|null
mainScope(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
mainScope(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 138);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

standard():number {
  const offset = this.bb!.__offset(this.bb_pos, 140);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : 0;
}

currentItemStartLineHead():number|null {
  const offset = this.bb!.__offset(this.bb_pos, 142);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : null;
}

currentItemEndLineHead():number|null {
  const offset = this.bb!.__offset(this.bb_pos, 144);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : null;
}

currentItemRoundnessV3():number {
  const offset = this.bb!.__offset(this.bb_pos, 146);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

antiAliasing():number {
  const offset = this.bb!.__offset(this.bb_pos, 148);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : 0;
}

vSync():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 150);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

currentItemFontFamilyV2():string|null
currentItemFontFamilyV2(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
currentItemFontFamilyV2(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 152);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

debugRendering():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 154);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

currentItemSubset():number|null {
  const offset = this.bb!.__offset(this.bb_pos, 156);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : null;
}

editingLinearElement(obj?:LinearElementEditor):LinearElementEditor|null {
  const offset = this.bb!.__offset(this.bb_pos, 158);
  return offset ? (obj || new LinearElementEditor()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

gridModeEnabled():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 160);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

gridStep():number {
  const offset = this.bb!.__offset(this.bb_pos, 162);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

scopeExponentThreshold():number {
  const offset = this.bb!.__offset(this.bb_pos, 164);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : 0;
}

zoomStep():number {
  const offset = this.bb!.__offset(this.bb_pos, 166);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

hoveredElementId():string|null
hoveredElementId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
hoveredElementId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 168);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

elementsPendingErasure(index: number):string
elementsPendingErasure(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
elementsPendingErasure(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 170);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

elementsPendingErasureLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 170);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

suggestedBindingElementId():string|null
suggestedBindingElementId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
suggestedBindingElementId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 172);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

isBindingEnabled():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 174);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startAppState(builder:flatbuffers.Builder) {
  builder.startObject(86);
}

static addFrameRenderingEnabled(builder:flatbuffers.Builder, frameRenderingEnabled:boolean) {
  builder.addFieldInt8(7, +frameRenderingEnabled, +false);
}

static addFrameRenderingName(builder:flatbuffers.Builder, frameRenderingName:boolean) {
  builder.addFieldInt8(8, +frameRenderingName, +false);
}

static addFrameRenderingOutline(builder:flatbuffers.Builder, frameRenderingOutline:boolean) {
  builder.addFieldInt8(9, +frameRenderingOutline, +false);
}

static addFrameRenderingClip(builder:flatbuffers.Builder, frameRenderingClip:boolean) {
  builder.addFieldInt8(10, +frameRenderingClip, +false);
}

static addCurrentItemOpacity(builder:flatbuffers.Builder, currentItemOpacity:number) {
  builder.addFieldFloat32(21, currentItemOpacity, 0.0);
}

static addViewBackgroundColor(builder:flatbuffers.Builder, viewBackgroundColorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(28, viewBackgroundColorOffset, 0);
}

static addScope(builder:flatbuffers.Builder, scopeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(29, scopeOffset, 0);
}

static addGroups(builder:flatbuffers.Builder, groupsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(31, groupsOffset, 0);
}

static createGroupsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startGroupsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addScrollX(builder:flatbuffers.Builder, scrollX:number) {
  builder.addFieldFloat32(32, scrollX, 0.0);
}

static addScrollY(builder:flatbuffers.Builder, scrollY:number) {
  builder.addFieldFloat32(33, scrollY, 0.0);
}

static addCursorButton(builder:flatbuffers.Builder, cursorButtonOffset:flatbuffers.Offset) {
  builder.addFieldOffset(34, cursorButtonOffset, 0);
}

static addScrolledOutside(builder:flatbuffers.Builder, scrolledOutside:boolean) {
  builder.addFieldInt8(35, +scrolledOutside, +false);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(36, nameOffset, 0);
}

static addZoom(builder:flatbuffers.Builder, zoom:number) {
  builder.addFieldFloat32(37, zoom, 0.0);
}

static addLastPointerDownWith(builder:flatbuffers.Builder, lastPointerDownWithOffset:flatbuffers.Offset) {
  builder.addFieldOffset(38, lastPointerDownWithOffset, 0);
}

static addSelectedElementIds(builder:flatbuffers.Builder, selectedElementIdsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(39, selectedElementIdsOffset, 0);
}

static createSelectedElementIdsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSelectedElementIdsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addGridSize(builder:flatbuffers.Builder, gridSize:number) {
  builder.addFieldInt32(43, gridSize, 0);
}

static addScaleRatioLocked(builder:flatbuffers.Builder, scaleRatioLocked:boolean) {
  builder.addFieldInt8(48, +scaleRatioLocked, +false);
}

static addDisplayAllPointDistances(builder:flatbuffers.Builder, displayAllPointDistances:boolean) {
  builder.addFieldInt8(49, +displayAllPointDistances, +false);
}

static addDisplayDistanceOnDrawing(builder:flatbuffers.Builder, displayDistanceOnDrawing:boolean) {
  builder.addFieldInt8(50, +displayDistanceOnDrawing, +false);
}

static addDisplayAllPointCoordinates(builder:flatbuffers.Builder, displayAllPointCoordinates:boolean) {
  builder.addFieldInt8(51, +displayAllPointCoordinates, +false);
}

static addDisplayAllPointInfoSelected(builder:flatbuffers.Builder, displayAllPointInfoSelected:boolean) {
  builder.addFieldInt8(52, +displayAllPointInfoSelected, +false);
}

static addDisplayRootAxis(builder:flatbuffers.Builder, displayRootAxis:boolean) {
  builder.addFieldInt8(53, +displayRootAxis, +false);
}

static addCurrentItemTextAlignV3(builder:flatbuffers.Builder, currentItemTextAlignV3:number) {
  builder.addFieldInt8(59, currentItemTextAlignV3, 0);
}

static addLineBendingMode(builder:flatbuffers.Builder, lineBendingMode:boolean) {
  builder.addFieldInt8(60, +lineBendingMode, +false);
}

static addCurrentItemFontSizeV3(builder:flatbuffers.Builder, currentItemFontSizeV3:number) {
  builder.addFieldFloat64(63, currentItemFontSizeV3, 0.0);
}

static addCoordDecimalPlacesV3(builder:flatbuffers.Builder, coordDecimalPlacesV3:number) {
  builder.addFieldInt8(64, coordDecimalPlacesV3, 0);
}

static addCurrentItemStroke(builder:flatbuffers.Builder, currentItemStrokeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(65, currentItemStrokeOffset, 0);
}

static addCurrentItemBackground(builder:flatbuffers.Builder, currentItemBackgroundOffset:flatbuffers.Offset) {
  builder.addFieldOffset(66, currentItemBackgroundOffset, 0);
}

static addMainScope(builder:flatbuffers.Builder, mainScopeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(67, mainScopeOffset, 0);
}

static addStandard(builder:flatbuffers.Builder, standard:number) {
  builder.addFieldInt8(68, standard, 0);
}

static addCurrentItemStartLineHead(builder:flatbuffers.Builder, currentItemStartLineHead:number) {
  builder.addFieldInt8(69, currentItemStartLineHead, null);
}

static addCurrentItemEndLineHead(builder:flatbuffers.Builder, currentItemEndLineHead:number) {
  builder.addFieldInt8(70, currentItemEndLineHead, null);
}

static addCurrentItemRoundnessV3(builder:flatbuffers.Builder, currentItemRoundnessV3:number) {
  builder.addFieldFloat64(71, currentItemRoundnessV3, 0.0);
}

static addAntiAliasing(builder:flatbuffers.Builder, antiAliasing:number) {
  builder.addFieldInt8(72, antiAliasing, 0);
}

static addVSync(builder:flatbuffers.Builder, vSync:boolean) {
  builder.addFieldInt8(73, +vSync, +false);
}

static addCurrentItemFontFamilyV2(builder:flatbuffers.Builder, currentItemFontFamilyV2Offset:flatbuffers.Offset) {
  builder.addFieldOffset(74, currentItemFontFamilyV2Offset, 0);
}

static addDebugRendering(builder:flatbuffers.Builder, debugRendering:boolean) {
  builder.addFieldInt8(75, +debugRendering, +false);
}

static addCurrentItemSubset(builder:flatbuffers.Builder, currentItemSubset:number) {
  builder.addFieldInt8(76, currentItemSubset, null);
}

static addEditingLinearElement(builder:flatbuffers.Builder, editingLinearElementOffset:flatbuffers.Offset) {
  builder.addFieldOffset(77, editingLinearElementOffset, 0);
}

static addGridModeEnabled(builder:flatbuffers.Builder, gridModeEnabled:boolean) {
  builder.addFieldInt8(78, +gridModeEnabled, +false);
}

static addGridStep(builder:flatbuffers.Builder, gridStep:number) {
  builder.addFieldInt32(79, gridStep, 0);
}

static addScopeExponentThreshold(builder:flatbuffers.Builder, scopeExponentThreshold:number) {
  builder.addFieldInt8(80, scopeExponentThreshold, 0);
}

static addZoomStep(builder:flatbuffers.Builder, zoomStep:number) {
  builder.addFieldFloat32(81, zoomStep, 0.0);
}

static addHoveredElementId(builder:flatbuffers.Builder, hoveredElementIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(82, hoveredElementIdOffset, 0);
}

static addElementsPendingErasure(builder:flatbuffers.Builder, elementsPendingErasureOffset:flatbuffers.Offset) {
  builder.addFieldOffset(83, elementsPendingErasureOffset, 0);
}

static createElementsPendingErasureVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startElementsPendingErasureVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addSuggestedBindingElementId(builder:flatbuffers.Builder, suggestedBindingElementIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(84, suggestedBindingElementIdOffset, 0);
}

static addIsBindingEnabled(builder:flatbuffers.Builder, isBindingEnabled:boolean) {
  builder.addFieldInt8(85, +isBindingEnabled, +false);
}

static endAppState(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
