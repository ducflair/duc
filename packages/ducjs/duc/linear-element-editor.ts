// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Point } from './point';
import { PointerDownState } from './pointer-down-state';
import { SimplePoint } from './simple-point';


export class LinearElementEditor {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):LinearElementEditor {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsLinearElementEditor(bb:flatbuffers.ByteBuffer, obj?:LinearElementEditor):LinearElementEditor {
  return (obj || new LinearElementEditor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsLinearElementEditor(bb:flatbuffers.ByteBuffer, obj?:LinearElementEditor):LinearElementEditor {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new LinearElementEditor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

elementId():string|null
elementId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
elementId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

selectedPointsIndices(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
}

selectedPointsIndicesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

selectedPointsIndicesArray():Int32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? new Int32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

pointerDownState(obj?:PointerDownState):PointerDownState|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new PointerDownState()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

isDragging():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

lastUncommittedPoint(obj?:Point):Point|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new Point()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

pointerOffset(obj?:SimplePoint):SimplePoint|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new SimplePoint()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

startBindingElement():string|null
startBindingElement(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
startBindingElement(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

endBindingElement():string|null
endBindingElement(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
endBindingElement(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

hoverPointIndex():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

segmentMidPointHoveredCoords(obj?:Point):Point|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? (obj || new Point()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startLinearElementEditor(builder:flatbuffers.Builder) {
  builder.startObject(10);
}

static addElementId(builder:flatbuffers.Builder, elementIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, elementIdOffset, 0);
}

static addSelectedPointsIndices(builder:flatbuffers.Builder, selectedPointsIndicesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, selectedPointsIndicesOffset, 0);
}

static createSelectedPointsIndicesVector(builder:flatbuffers.Builder, data:number[]|Int32Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createSelectedPointsIndicesVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createSelectedPointsIndicesVector(builder:flatbuffers.Builder, data:number[]|Int32Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]!);
  }
  return builder.endVector();
}

static startSelectedPointsIndicesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addPointerDownState(builder:flatbuffers.Builder, pointerDownStateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, pointerDownStateOffset, 0);
}

static addIsDragging(builder:flatbuffers.Builder, isDragging:boolean) {
  builder.addFieldInt8(3, +isDragging, +false);
}

static addLastUncommittedPoint(builder:flatbuffers.Builder, lastUncommittedPointOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, lastUncommittedPointOffset, 0);
}

static addPointerOffset(builder:flatbuffers.Builder, pointerOffsetOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, pointerOffsetOffset, 0);
}

static addStartBindingElement(builder:flatbuffers.Builder, startBindingElementOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, startBindingElementOffset, 0);
}

static addEndBindingElement(builder:flatbuffers.Builder, endBindingElementOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, endBindingElementOffset, 0);
}

static addHoverPointIndex(builder:flatbuffers.Builder, hoverPointIndex:number) {
  builder.addFieldInt32(8, hoverPointIndex, 0);
}

static addSegmentMidPointHoveredCoords(builder:flatbuffers.Builder, segmentMidPointHoveredCoordsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, segmentMidPointHoveredCoordsOffset, 0);
}

static endLinearElementEditor(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
