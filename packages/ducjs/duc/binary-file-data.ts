// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class BinaryFileData {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):BinaryFileData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsBinaryFileData(bb:flatbuffers.ByteBuffer, obj?:BinaryFileData):BinaryFileData {
  return (obj || new BinaryFileData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsBinaryFileData(bb:flatbuffers.ByteBuffer, obj?:BinaryFileData):BinaryFileData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new BinaryFileData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

mimeType():string|null
mimeType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
mimeType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

data(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

dataLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

dataArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

created():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

lastRetrieved():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

static startBinaryFileData(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addMimeType(builder:flatbuffers.Builder, mimeTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, mimeTypeOffset, 0);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, idOffset, 0);
}

static addData(builder:flatbuffers.Builder, dataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, dataOffset, 0);
}

static createDataVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startDataVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addCreated(builder:flatbuffers.Builder, created:bigint) {
  builder.addFieldInt64(3, created, BigInt('0'));
}

static addLastRetrieved(builder:flatbuffers.Builder, lastRetrieved:bigint) {
  builder.addFieldInt64(4, lastRetrieved, BigInt('0'));
}

static endBinaryFileData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createBinaryFileData(builder:flatbuffers.Builder, mimeTypeOffset:flatbuffers.Offset, idOffset:flatbuffers.Offset, dataOffset:flatbuffers.Offset, created:bigint, lastRetrieved:bigint):flatbuffers.Offset {
  BinaryFileData.startBinaryFileData(builder);
  BinaryFileData.addMimeType(builder, mimeTypeOffset);
  BinaryFileData.addId(builder, idOffset);
  BinaryFileData.addData(builder, dataOffset);
  BinaryFileData.addCreated(builder, created);
  BinaryFileData.addLastRetrieved(builder, lastRetrieved);
  return BinaryFileData.endBinaryFileData(builder);
}
}
