// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { DucTableStyleProps } from './duc-table-style-props';


export class DucTableCell {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DucTableCell {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDucTableCell(bb:flatbuffers.ByteBuffer, obj?:DucTableCell):DucTableCell {
  return (obj || new DucTableCell()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDucTableCell(bb:flatbuffers.ByteBuffer, obj?:DucTableCell):DucTableCell {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DucTableCell()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

rowId():string|null
rowId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
rowId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

columnId():string|null
columnId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
columnId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

data():string|null
data(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
data(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

style(obj?:DucTableStyleProps):DucTableStyleProps|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new DucTableStyleProps()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startDucTableCell(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addRowId(builder:flatbuffers.Builder, rowIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, rowIdOffset, 0);
}

static addColumnId(builder:flatbuffers.Builder, columnIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, columnIdOffset, 0);
}

static addData(builder:flatbuffers.Builder, dataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, dataOffset, 0);
}

static addStyle(builder:flatbuffers.Builder, styleOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, styleOffset, 0);
}

static endDucTableCell(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
