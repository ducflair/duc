// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Point } from './point';


export class SegmentMidpointState {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SegmentMidpointState {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSegmentMidpointState(bb:flatbuffers.ByteBuffer, obj?:SegmentMidpointState):SegmentMidpointState {
  return (obj || new SegmentMidpointState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSegmentMidpointState(bb:flatbuffers.ByteBuffer, obj?:SegmentMidpointState):SegmentMidpointState {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SegmentMidpointState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

value(obj?:Point):Point|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Point()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

index():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

added():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startSegmentMidpointState(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addValue(builder:flatbuffers.Builder, valueOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, valueOffset, 0);
}

static addIndex(builder:flatbuffers.Builder, index:number) {
  builder.addFieldInt32(1, index, 0);
}

static addAdded(builder:flatbuffers.Builder, added:boolean) {
  builder.addFieldInt8(2, +added, +false);
}

static endSegmentMidpointState(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createSegmentMidpointState(builder:flatbuffers.Builder, valueOffset:flatbuffers.Offset, index:number, added:boolean):flatbuffers.Offset {
  SegmentMidpointState.startSegmentMidpointState(builder);
  SegmentMidpointState.addValue(builder, valueOffset);
  SegmentMidpointState.addIndex(builder, index);
  SegmentMidpointState.addAdded(builder, added);
  return SegmentMidpointState.endSegmentMidpointState(builder);
}
}
