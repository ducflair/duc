// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class StrokeStyle {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):StrokeStyle {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsStrokeStyle(bb:flatbuffers.ByteBuffer, obj?:StrokeStyle):StrokeStyle {
  return (obj || new StrokeStyle()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsStrokeStyle(bb:flatbuffers.ByteBuffer, obj?:StrokeStyle):StrokeStyle {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new StrokeStyle()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

preference():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : 0;
}

cap():number|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : null;
}

join():number|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : null;
}

dash(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readFloat64(this.bb!.__vector(this.bb_pos + offset) + index * 8) : 0;
}

dashLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

dashArray():Float64Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? new Float64Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

dashCap():number|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : null;
}

miterLimit():number|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : null;
}

static startStrokeStyle(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addPreference(builder:flatbuffers.Builder, preference:number) {
  builder.addFieldInt8(0, preference, 0);
}

static addCap(builder:flatbuffers.Builder, cap:number) {
  builder.addFieldInt8(1, cap, null);
}

static addJoin(builder:flatbuffers.Builder, join:number) {
  builder.addFieldInt8(2, join, null);
}

static addDash(builder:flatbuffers.Builder, dashOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, dashOffset, 0);
}

static createDashVector(builder:flatbuffers.Builder, data:number[]|Float64Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createDashVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createDashVector(builder:flatbuffers.Builder, data:number[]|Float64Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(8, data.length, 8);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addFloat64(data[i]!);
  }
  return builder.endVector();
}

static startDashVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(8, numElems, 8);
}

static addDashCap(builder:flatbuffers.Builder, dashCap:number) {
  builder.addFieldInt8(4, dashCap, null);
}

static addMiterLimit(builder:flatbuffers.Builder, miterLimit:number) {
  builder.addFieldFloat64(5, miterLimit, null);
}

static endStrokeStyle(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createStrokeStyle(builder:flatbuffers.Builder, preference:number, cap:number|null, join:number|null, dashOffset:flatbuffers.Offset, dashCap:number|null, miterLimit:number|null):flatbuffers.Offset {
  StrokeStyle.startStrokeStyle(builder);
  StrokeStyle.addPreference(builder, preference);
  if (cap !== null)
    StrokeStyle.addCap(builder, cap);
  if (join !== null)
    StrokeStyle.addJoin(builder, join);
  StrokeStyle.addDash(builder, dashOffset);
  if (dashCap !== null)
    StrokeStyle.addDashCap(builder, dashCap);
  if (miterLimit !== null)
    StrokeStyle.addMiterLimit(builder, miterLimit);
  return StrokeStyle.endStrokeStyle(builder);
}
}
