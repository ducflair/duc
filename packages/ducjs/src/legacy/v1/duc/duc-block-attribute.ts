// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { DucBlockAttributeDetails } from '../duc/duc-block-attribute-details';


export class DucBlockAttribute {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DucBlockAttribute {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDucBlockAttribute(bb:flatbuffers.ByteBuffer, obj?:DucBlockAttribute):DucBlockAttribute {
  return (obj || new DucBlockAttribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDucBlockAttribute(bb:flatbuffers.ByteBuffer, obj?:DucBlockAttribute):DucBlockAttribute {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DucBlockAttribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

details(obj?:DucBlockAttributeDetails):DucBlockAttributeDetails|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new DucBlockAttributeDetails()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startDucBlockAttribute(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, nameOffset, 0);
}

static addDetails(builder:flatbuffers.Builder, detailsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, detailsOffset, 0);
}

static endDucBlockAttribute(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
