// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class DucTableStyleProps {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DucTableStyleProps {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDucTableStyleProps(bb:flatbuffers.ByteBuffer, obj?:DucTableStyleProps):DucTableStyleProps {
  return (obj || new DucTableStyleProps()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDucTableStyleProps(bb:flatbuffers.ByteBuffer, obj?:DucTableStyleProps):DucTableStyleProps {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DucTableStyleProps()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

backgroundColor():string|null
backgroundColor(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
backgroundColor(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

borderWidth():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

borderDashes(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat64(this.bb!.__vector(this.bb_pos + offset) + index * 8) : 0;
}

borderDashesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

borderDashesArray():Float64Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? new Float64Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

borderColor():string|null
borderColor(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
borderColor(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

textColor():string|null
textColor(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
textColor(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

textSize():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

textFont():string|null
textFont(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
textFont(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

textAlign():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : 0;
}

static startDucTableStyleProps(builder:flatbuffers.Builder) {
  builder.startObject(8);
}

static addBackgroundColor(builder:flatbuffers.Builder, backgroundColorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, backgroundColorOffset, 0);
}

static addBorderWidth(builder:flatbuffers.Builder, borderWidth:number) {
  builder.addFieldFloat64(1, borderWidth, 0.0);
}

static addBorderDashes(builder:flatbuffers.Builder, borderDashesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, borderDashesOffset, 0);
}

static createBorderDashesVector(builder:flatbuffers.Builder, data:number[]|Float64Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createBorderDashesVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createBorderDashesVector(builder:flatbuffers.Builder, data:number[]|Float64Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(8, data.length, 8);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addFloat64(data[i]!);
  }
  return builder.endVector();
}

static startBorderDashesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(8, numElems, 8);
}

static addBorderColor(builder:flatbuffers.Builder, borderColorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, borderColorOffset, 0);
}

static addTextColor(builder:flatbuffers.Builder, textColorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, textColorOffset, 0);
}

static addTextSize(builder:flatbuffers.Builder, textSize:number) {
  builder.addFieldFloat64(5, textSize, 0.0);
}

static addTextFont(builder:flatbuffers.Builder, textFontOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, textFontOffset, 0);
}

static addTextAlign(builder:flatbuffers.Builder, textAlign:number) {
  builder.addFieldInt8(7, textAlign, 0);
}

static endDucTableStyleProps(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createDucTableStyleProps(builder:flatbuffers.Builder, backgroundColorOffset:flatbuffers.Offset, borderWidth:number, borderDashesOffset:flatbuffers.Offset, borderColorOffset:flatbuffers.Offset, textColorOffset:flatbuffers.Offset, textSize:number, textFontOffset:flatbuffers.Offset, textAlign:number):flatbuffers.Offset {
  DucTableStyleProps.startDucTableStyleProps(builder);
  DucTableStyleProps.addBackgroundColor(builder, backgroundColorOffset);
  DucTableStyleProps.addBorderWidth(builder, borderWidth);
  DucTableStyleProps.addBorderDashes(builder, borderDashesOffset);
  DucTableStyleProps.addBorderColor(builder, borderColorOffset);
  DucTableStyleProps.addTextColor(builder, textColorOffset);
  DucTableStyleProps.addTextSize(builder, textSize);
  DucTableStyleProps.addTextFont(builder, textFontOffset);
  DucTableStyleProps.addTextAlign(builder, textAlign);
  return DucTableStyleProps.endDucTableStyleProps(builder);
}
}
