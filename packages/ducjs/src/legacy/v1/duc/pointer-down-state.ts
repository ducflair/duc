// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { SegmentMidpointState } from '../duc/segment-midpoint-state';
import { SimplePoint } from '../duc/simple-point';


export class PointerDownState {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):PointerDownState {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPointerDownState(bb:flatbuffers.ByteBuffer, obj?:PointerDownState):PointerDownState {
  return (obj || new PointerDownState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPointerDownState(bb:flatbuffers.ByteBuffer, obj?:PointerDownState):PointerDownState {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new PointerDownState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

prevSelectedPointsIndices(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
}

prevSelectedPointsIndicesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

prevSelectedPointsIndicesArray():Int32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Int32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

lastClickedPoint():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

lastClickedIsEndPoint():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

origin(obj?:SimplePoint):SimplePoint|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new SimplePoint()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

segmentMidpoint(obj?:SegmentMidpointState):SegmentMidpointState|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new SegmentMidpointState()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

handleType():number|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : null;
}

static startPointerDownState(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addPrevSelectedPointsIndices(builder:flatbuffers.Builder, prevSelectedPointsIndicesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, prevSelectedPointsIndicesOffset, 0);
}

static createPrevSelectedPointsIndicesVector(builder:flatbuffers.Builder, data:number[]|Int32Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createPrevSelectedPointsIndicesVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createPrevSelectedPointsIndicesVector(builder:flatbuffers.Builder, data:number[]|Int32Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]!);
  }
  return builder.endVector();
}

static startPrevSelectedPointsIndicesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addLastClickedPoint(builder:flatbuffers.Builder, lastClickedPoint:number) {
  builder.addFieldInt32(1, lastClickedPoint, 0);
}

static addLastClickedIsEndPoint(builder:flatbuffers.Builder, lastClickedIsEndPoint:boolean) {
  builder.addFieldInt8(2, +lastClickedIsEndPoint, +false);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, originOffset, 0);
}

static addSegmentMidpoint(builder:flatbuffers.Builder, segmentMidpointOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, segmentMidpointOffset, 0);
}

static addHandleType(builder:flatbuffers.Builder, handleType:number) {
  builder.addFieldInt8(5, handleType, null);
}

static endPointerDownState(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
