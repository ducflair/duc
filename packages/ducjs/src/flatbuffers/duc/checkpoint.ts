// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { VersionBase } from '../duc/version-base';


export class Checkpoint {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Checkpoint {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsCheckpoint(bb:flatbuffers.ByteBuffer, obj?:Checkpoint):Checkpoint {
  return (obj || new Checkpoint()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsCheckpoint(bb:flatbuffers.ByteBuffer, obj?:Checkpoint):Checkpoint {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Checkpoint()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

base(obj?:VersionBase):VersionBase|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new VersionBase()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

data(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

dataLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

dataArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

sizeBytes():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

static startCheckpoint(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addBase(builder:flatbuffers.Builder, baseOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, baseOffset, 0);
}

static addData(builder:flatbuffers.Builder, dataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, dataOffset, 0);
}

static createDataVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startDataVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addSizeBytes(builder:flatbuffers.Builder, sizeBytes:bigint) {
  builder.addFieldInt64(2, sizeBytes, BigInt('0'));
}

static endCheckpoint(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createCheckpoint(builder:flatbuffers.Builder, baseOffset:flatbuffers.Offset, dataOffset:flatbuffers.Offset, sizeBytes:bigint):flatbuffers.Offset {
  Checkpoint.startCheckpoint(builder);
  Checkpoint.addBase(builder, baseOffset);
  Checkpoint.addData(builder, dataOffset);
  Checkpoint.addSizeBytes(builder, sizeBytes);
  return Checkpoint.endCheckpoint(builder);
}
}
