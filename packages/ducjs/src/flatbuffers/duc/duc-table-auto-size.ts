// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class DucTableAutoSize {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DucTableAutoSize {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDucTableAutoSize(bb:flatbuffers.ByteBuffer, obj?:DucTableAutoSize):DucTableAutoSize {
  return (obj || new DucTableAutoSize()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDucTableAutoSize(bb:flatbuffers.ByteBuffer, obj?:DucTableAutoSize):DucTableAutoSize {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DucTableAutoSize()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

columns():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

rows():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startDucTableAutoSize(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addColumns(builder:flatbuffers.Builder, columns:boolean) {
  builder.addFieldInt8(0, +columns, +false);
}

static addRows(builder:flatbuffers.Builder, rows:boolean) {
  builder.addFieldInt8(1, +rows, +false);
}

static endDucTableAutoSize(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createDucTableAutoSize(builder:flatbuffers.Builder, columns:boolean, rows:boolean):flatbuffers.Offset {
  DucTableAutoSize.startDucTableAutoSize(builder);
  DucTableAutoSize.addColumns(builder, columns);
  DucTableAutoSize.addRows(builder, rows);
  return DucTableAutoSize.endDucTableAutoSize(builder);
}
}
