// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class VersionBase {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):VersionBase {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsVersionBase(bb:flatbuffers.ByteBuffer, obj?:VersionBase):VersionBase {
  return (obj || new VersionBase()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsVersionBase(bb:flatbuffers.ByteBuffer, obj?:VersionBase):VersionBase {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new VersionBase()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

parentId():string|null
parentId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
parentId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

timestamp():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

description():string|null
description(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
description(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

isManualSave():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

userId():string|null
userId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
userId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startVersionBase(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addParentId(builder:flatbuffers.Builder, parentIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, parentIdOffset, 0);
}

static addTimestamp(builder:flatbuffers.Builder, timestamp:bigint) {
  builder.addFieldInt64(2, timestamp, BigInt('0'));
}

static addDescription(builder:flatbuffers.Builder, descriptionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, descriptionOffset, 0);
}

static addIsManualSave(builder:flatbuffers.Builder, isManualSave:boolean) {
  builder.addFieldInt8(4, +isManualSave, +false);
}

static addUserId(builder:flatbuffers.Builder, userIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, userIdOffset, 0);
}

static endVersionBase(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createVersionBase(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, parentIdOffset:flatbuffers.Offset, timestamp:bigint, descriptionOffset:flatbuffers.Offset, isManualSave:boolean, userIdOffset:flatbuffers.Offset):flatbuffers.Offset {
  VersionBase.startVersionBase(builder);
  VersionBase.addId(builder, idOffset);
  VersionBase.addParentId(builder, parentIdOffset);
  VersionBase.addTimestamp(builder, timestamp);
  VersionBase.addDescription(builder, descriptionOffset);
  VersionBase.addIsManualSave(builder, isManualSave);
  VersionBase.addUserId(builder, userIdOffset);
  return VersionBase.endVersionBase(builder);
}
}
