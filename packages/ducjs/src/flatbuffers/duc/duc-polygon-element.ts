// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { _DucElementBase } from '../duc/duc-element-base';


export class DucPolygonElement {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DucPolygonElement {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDucPolygonElement(bb:flatbuffers.ByteBuffer, obj?:DucPolygonElement):DucPolygonElement {
  return (obj || new DucPolygonElement()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDucPolygonElement(bb:flatbuffers.ByteBuffer, obj?:DucPolygonElement):DucPolygonElement {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DucPolygonElement()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

base(obj?:_DucElementBase):_DucElementBase|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new _DucElementBase()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

sides():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startDucPolygonElement(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addBase(builder:flatbuffers.Builder, baseOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, baseOffset, 0);
}

static addSides(builder:flatbuffers.Builder, sides:number) {
  builder.addFieldInt32(1, sides, 0);
}

static endDucPolygonElement(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createDucPolygonElement(builder:flatbuffers.Builder, baseOffset:flatbuffers.Offset, sides:number):flatbuffers.Offset {
  DucPolygonElement.startDucPolygonElement(builder);
  DucPolygonElement.addBase(builder, baseOffset);
  DucPolygonElement.addSides(builder, sides);
  return DucPolygonElement.endDucPolygonElement(builder);
}
}
