// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class DucBlockAttributeDefinition {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DucBlockAttributeDefinition {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDucBlockAttributeDefinition(bb:flatbuffers.ByteBuffer, obj?:DucBlockAttributeDefinition):DucBlockAttributeDefinition {
  return (obj || new DucBlockAttributeDefinition()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDucBlockAttributeDefinition(bb:flatbuffers.ByteBuffer, obj?:DucBlockAttributeDefinition):DucBlockAttributeDefinition {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DucBlockAttributeDefinition()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

tag():string|null
tag(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
tag(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

prompt():string|null
prompt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
prompt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

defaultValue():string|null
defaultValue(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
defaultValue(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

isConstant():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startDucBlockAttributeDefinition(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addTag(builder:flatbuffers.Builder, tagOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, tagOffset, 0);
}

static addPrompt(builder:flatbuffers.Builder, promptOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, promptOffset, 0);
}

static addDefaultValue(builder:flatbuffers.Builder, defaultValueOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, defaultValueOffset, 0);
}

static addIsConstant(builder:flatbuffers.Builder, isConstant:boolean) {
  builder.addFieldInt8(3, +isConstant, +false);
}

static endDucBlockAttributeDefinition(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createDucBlockAttributeDefinition(builder:flatbuffers.Builder, tagOffset:flatbuffers.Offset, promptOffset:flatbuffers.Offset, defaultValueOffset:flatbuffers.Offset, isConstant:boolean):flatbuffers.Offset {
  DucBlockAttributeDefinition.startDucBlockAttributeDefinition(builder);
  DucBlockAttributeDefinition.addTag(builder, tagOffset);
  DucBlockAttributeDefinition.addPrompt(builder, promptOffset);
  DucBlockAttributeDefinition.addDefaultValue(builder, defaultValueOffset);
  DucBlockAttributeDefinition.addIsConstant(builder, isConstant);
  return DucBlockAttributeDefinition.endDucBlockAttributeDefinition(builder);
}
}
