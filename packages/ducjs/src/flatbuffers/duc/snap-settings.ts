// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { DynamicSnapSettings } from '../duc/dynamic-snap-settings';
import { LayerSnapFilters } from '../duc/layer-snap-filters';
import { OBJECT_SNAP_MODE } from '../duc/object-snap-mode';
import { PolarTrackingSettings } from '../duc/polar-tracking-settings';
import { SNAP_MODE } from '../duc/snap-mode';
import { SnapMarkerSettings } from '../duc/snap-marker-settings';
import { SnapOverride } from '../duc/snap-override';
import { TrackingLineStyle } from '../duc/tracking-line-style';


export class SnapSettings {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SnapSettings {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSnapSettings(bb:flatbuffers.ByteBuffer, obj?:SnapSettings):SnapSettings {
  return (obj || new SnapSettings()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSnapSettings(bb:flatbuffers.ByteBuffer, obj?:SnapSettings):SnapSettings {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SnapSettings()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

readonly():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

twistAngle():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

snapTolerance():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

objectSnapAperture():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

isOrthoModeOn():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

polarTracking(obj?:PolarTrackingSettings):PolarTrackingSettings|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new PolarTrackingSettings()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

isObjectSnapOn():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

activeObjectSnapModes(index: number):OBJECT_SNAP_MODE|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

activeObjectSnapModesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

activeObjectSnapModesArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

snapPriority(index: number):OBJECT_SNAP_MODE|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

snapPriorityLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

snapPriorityArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

showTrackingLines():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

trackingLineStyle(obj?:TrackingLineStyle):TrackingLineStyle|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? (obj || new TrackingLineStyle()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

dynamicSnap(obj?:DynamicSnapSettings):DynamicSnapSettings|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? (obj || new DynamicSnapSettings()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

temporaryOverrides(index: number, obj?:SnapOverride):SnapOverride|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? (obj || new SnapOverride()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

temporaryOverridesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

incrementalDistance():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

magneticStrength():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

layerSnapFilters(obj?:LayerSnapFilters):LayerSnapFilters|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? (obj || new LayerSnapFilters()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

elementTypeFilters(index: number):string
elementTypeFilters(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
elementTypeFilters(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

elementTypeFiltersLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

snapMode():SNAP_MODE|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : null;
}

snapMarkers(obj?:SnapMarkerSettings):SnapMarkerSettings|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? (obj || new SnapMarkerSettings()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

constructionSnapEnabled():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

snapToGridIntersections():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startSnapSettings(builder:flatbuffers.Builder) {
  builder.startObject(21);
}

static addReadonly(builder:flatbuffers.Builder, readonly:boolean) {
  builder.addFieldInt8(0, +readonly, +false);
}

static addTwistAngle(builder:flatbuffers.Builder, twistAngle:number) {
  builder.addFieldFloat64(1, twistAngle, 0.0);
}

static addSnapTolerance(builder:flatbuffers.Builder, snapTolerance:number) {
  builder.addFieldInt32(2, snapTolerance, 0);
}

static addObjectSnapAperture(builder:flatbuffers.Builder, objectSnapAperture:number) {
  builder.addFieldInt32(3, objectSnapAperture, 0);
}

static addIsOrthoModeOn(builder:flatbuffers.Builder, isOrthoModeOn:boolean) {
  builder.addFieldInt8(4, +isOrthoModeOn, +false);
}

static addPolarTracking(builder:flatbuffers.Builder, polarTrackingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, polarTrackingOffset, 0);
}

static addIsObjectSnapOn(builder:flatbuffers.Builder, isObjectSnapOn:boolean) {
  builder.addFieldInt8(6, +isObjectSnapOn, +false);
}

static addActiveObjectSnapModes(builder:flatbuffers.Builder, activeObjectSnapModesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, activeObjectSnapModesOffset, 0);
}

static createActiveObjectSnapModesVector(builder:flatbuffers.Builder, data:OBJECT_SNAP_MODE[]):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startActiveObjectSnapModesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addSnapPriority(builder:flatbuffers.Builder, snapPriorityOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, snapPriorityOffset, 0);
}

static createSnapPriorityVector(builder:flatbuffers.Builder, data:OBJECT_SNAP_MODE[]):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startSnapPriorityVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addShowTrackingLines(builder:flatbuffers.Builder, showTrackingLines:boolean) {
  builder.addFieldInt8(9, +showTrackingLines, +false);
}

static addTrackingLineStyle(builder:flatbuffers.Builder, trackingLineStyleOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, trackingLineStyleOffset, 0);
}

static addDynamicSnap(builder:flatbuffers.Builder, dynamicSnapOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, dynamicSnapOffset, 0);
}

static addTemporaryOverrides(builder:flatbuffers.Builder, temporaryOverridesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, temporaryOverridesOffset, 0);
}

static createTemporaryOverridesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTemporaryOverridesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addIncrementalDistance(builder:flatbuffers.Builder, incrementalDistance:number) {
  builder.addFieldFloat64(13, incrementalDistance, 0.0);
}

static addMagneticStrength(builder:flatbuffers.Builder, magneticStrength:number) {
  builder.addFieldFloat64(14, magneticStrength, 0.0);
}

static addLayerSnapFilters(builder:flatbuffers.Builder, layerSnapFiltersOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, layerSnapFiltersOffset, 0);
}

static addElementTypeFilters(builder:flatbuffers.Builder, elementTypeFiltersOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, elementTypeFiltersOffset, 0);
}

static createElementTypeFiltersVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startElementTypeFiltersVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addSnapMode(builder:flatbuffers.Builder, snapMode:SNAP_MODE) {
  builder.addFieldInt8(17, snapMode, null);
}

static addSnapMarkers(builder:flatbuffers.Builder, snapMarkersOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, snapMarkersOffset, 0);
}

static addConstructionSnapEnabled(builder:flatbuffers.Builder, constructionSnapEnabled:boolean) {
  builder.addFieldInt8(19, +constructionSnapEnabled, +false);
}

static addSnapToGridIntersections(builder:flatbuffers.Builder, snapToGridIntersections:boolean) {
  builder.addFieldInt8(20, +snapToGridIntersections, +false);
}

static endSnapSettings(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
