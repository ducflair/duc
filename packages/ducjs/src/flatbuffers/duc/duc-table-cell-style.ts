// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { DucTextStyle } from '../duc/duc-text-style';
import { Margins } from '../duc/margins';
import { TABLE_CELL_ALIGNMENT } from '../duc/table-cell-alignment';
import { _DucElementStylesBase } from '../duc/duc-element-styles-base';


export class DucTableCellStyle {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DucTableCellStyle {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDucTableCellStyle(bb:flatbuffers.ByteBuffer, obj?:DucTableCellStyle):DucTableCellStyle {
  return (obj || new DucTableCellStyle()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDucTableCellStyle(bb:flatbuffers.ByteBuffer, obj?:DucTableCellStyle):DucTableCellStyle {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DucTableCellStyle()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

baseStyle(obj?:_DucElementStylesBase):_DucElementStylesBase|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new _DucElementStylesBase()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

textStyle(obj?:DucTextStyle):DucTextStyle|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new DucTextStyle()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

margins(obj?:Margins):Margins|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new Margins()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

alignment():TABLE_CELL_ALIGNMENT|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : null;
}

static startDucTableCellStyle(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addBaseStyle(builder:flatbuffers.Builder, baseStyleOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, baseStyleOffset, 0);
}

static addTextStyle(builder:flatbuffers.Builder, textStyleOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, textStyleOffset, 0);
}

static addMargins(builder:flatbuffers.Builder, marginsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, marginsOffset, 0);
}

static addAlignment(builder:flatbuffers.Builder, alignment:TABLE_CELL_ALIGNMENT) {
  builder.addFieldInt8(3, alignment, null);
}

static endDucTableCellStyle(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
