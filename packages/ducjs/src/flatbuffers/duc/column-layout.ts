// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { COLUMN_TYPE } from '../duc/column-type';
import { TextColumn } from '../duc/text-column';


export class ColumnLayout {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ColumnLayout {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsColumnLayout(bb:flatbuffers.ByteBuffer, obj?:ColumnLayout):ColumnLayout {
  return (obj || new ColumnLayout()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsColumnLayout(bb:flatbuffers.ByteBuffer, obj?:ColumnLayout):ColumnLayout {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ColumnLayout()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

type():COLUMN_TYPE|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : null;
}

definitions(index: number, obj?:TextColumn):TextColumn|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new TextColumn()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

definitionsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

autoHeight():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startColumnLayout(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addType(builder:flatbuffers.Builder, type:COLUMN_TYPE) {
  builder.addFieldInt8(0, type, null);
}

static addDefinitions(builder:flatbuffers.Builder, definitionsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, definitionsOffset, 0);
}

static createDefinitionsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startDefinitionsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addAutoHeight(builder:flatbuffers.Builder, autoHeight:boolean) {
  builder.addFieldInt8(2, +autoHeight, +false);
}

static endColumnLayout(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createColumnLayout(builder:flatbuffers.Builder, type:COLUMN_TYPE|null, definitionsOffset:flatbuffers.Offset, autoHeight:boolean):flatbuffers.Offset {
  ColumnLayout.startColumnLayout(builder);
  if (type !== null)
    ColumnLayout.addType(builder, type);
  ColumnLayout.addDefinitions(builder, definitionsOffset);
  ColumnLayout.addAutoHeight(builder, autoHeight);
  return ColumnLayout.endColumnLayout(builder);
}
}
