// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { DatumReference } from '../duc/datum-reference';
import { GDT_SYMBOL } from '../duc/gdt-symbol';
import { ToleranceClause } from '../duc/tolerance-clause';


export class FeatureControlFrameSegment {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):FeatureControlFrameSegment {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsFeatureControlFrameSegment(bb:flatbuffers.ByteBuffer, obj?:FeatureControlFrameSegment):FeatureControlFrameSegment {
  return (obj || new FeatureControlFrameSegment()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsFeatureControlFrameSegment(bb:flatbuffers.ByteBuffer, obj?:FeatureControlFrameSegment):FeatureControlFrameSegment {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new FeatureControlFrameSegment()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

symbol():GDT_SYMBOL|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : null;
}

tolerance(obj?:ToleranceClause):ToleranceClause|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new ToleranceClause()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

datums(index: number, obj?:DatumReference):DatumReference|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new DatumReference()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

datumsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startFeatureControlFrameSegment(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addSymbol(builder:flatbuffers.Builder, symbol:GDT_SYMBOL) {
  builder.addFieldInt8(0, symbol, null);
}

static addTolerance(builder:flatbuffers.Builder, toleranceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, toleranceOffset, 0);
}

static addDatums(builder:flatbuffers.Builder, datumsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, datumsOffset, 0);
}

static createDatumsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startDatumsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endFeatureControlFrameSegment(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
