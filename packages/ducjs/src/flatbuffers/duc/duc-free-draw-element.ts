// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { DucFreeDrawEnds } from '../duc/duc-free-draw-ends';
import { DucPoint } from '../duc/duc-point';
import { _DucElementBase } from '../duc/duc-element-base';


export class DucFreeDrawElement {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DucFreeDrawElement {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDucFreeDrawElement(bb:flatbuffers.ByteBuffer, obj?:DucFreeDrawElement):DucFreeDrawElement {
  return (obj || new DucFreeDrawElement()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDucFreeDrawElement(bb:flatbuffers.ByteBuffer, obj?:DucFreeDrawElement):DucFreeDrawElement {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DucFreeDrawElement()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

base(obj?:_DucElementBase):_DucElementBase|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new _DucElementBase()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

points(index: number, obj?:DucPoint):DucPoint|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new DucPoint()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

pointsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

size():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

thinning():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

smoothing():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

streamline():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

easing():string|null
easing(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
easing(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

start(obj?:DucFreeDrawEnds):DucFreeDrawEnds|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? (obj || new DucFreeDrawEnds()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

end(obj?:DucFreeDrawEnds):DucFreeDrawEnds|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? (obj || new DucFreeDrawEnds()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

pressures(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readFloat32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
}

pressuresLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

pressuresArray():Float32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? new Float32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

simulatePressure():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

lastCommittedPoint(obj?:DucPoint):DucPoint|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? (obj || new DucPoint()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

svgPath():string|null
svgPath(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
svgPath(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startDucFreeDrawElement(builder:flatbuffers.Builder) {
  builder.startObject(13);
}

static addBase(builder:flatbuffers.Builder, baseOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, baseOffset, 0);
}

static addPoints(builder:flatbuffers.Builder, pointsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, pointsOffset, 0);
}

static createPointsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startPointsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addSize(builder:flatbuffers.Builder, size:number) {
  builder.addFieldFloat64(2, size, 0.0);
}

static addThinning(builder:flatbuffers.Builder, thinning:number) {
  builder.addFieldFloat32(3, thinning, 0.0);
}

static addSmoothing(builder:flatbuffers.Builder, smoothing:number) {
  builder.addFieldFloat32(4, smoothing, 0.0);
}

static addStreamline(builder:flatbuffers.Builder, streamline:number) {
  builder.addFieldFloat32(5, streamline, 0.0);
}

static addEasing(builder:flatbuffers.Builder, easingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, easingOffset, 0);
}

static addStart(builder:flatbuffers.Builder, startOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, startOffset, 0);
}

static addEnd(builder:flatbuffers.Builder, endOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, endOffset, 0);
}

static addPressures(builder:flatbuffers.Builder, pressuresOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, pressuresOffset, 0);
}

static createPressuresVector(builder:flatbuffers.Builder, data:number[]|Float32Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createPressuresVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createPressuresVector(builder:flatbuffers.Builder, data:number[]|Float32Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addFloat32(data[i]!);
  }
  return builder.endVector();
}

static startPressuresVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addSimulatePressure(builder:flatbuffers.Builder, simulatePressure:boolean) {
  builder.addFieldInt8(10, +simulatePressure, +false);
}

static addLastCommittedPoint(builder:flatbuffers.Builder, lastCommittedPointOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, lastCommittedPointOffset, 0);
}

static addSvgPath(builder:flatbuffers.Builder, svgPathOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, svgPathOffset, 0);
}

static endDucFreeDrawElement(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
