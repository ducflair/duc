// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { DucBlockAttributeDefinitionEntry } from '../duc/duc-block-attribute-definition-entry';
import { ElementWrapper } from '../duc/element-wrapper';


export class DucBlock {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DucBlock {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDucBlock(bb:flatbuffers.ByteBuffer, obj?:DucBlock):DucBlock {
  return (obj || new DucBlock()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDucBlock(bb:flatbuffers.ByteBuffer, obj?:DucBlock):DucBlock {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DucBlock()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

label():string|null
label(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
label(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

description():string|null
description(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
description(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

version():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

elements(index: number, obj?:ElementWrapper):ElementWrapper|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new ElementWrapper()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

elementsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

attributeDefinitions(index: number, obj?:DucBlockAttributeDefinitionEntry):DucBlockAttributeDefinitionEntry|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new DucBlockAttributeDefinitionEntry()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

attributeDefinitionsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startDucBlock(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addLabel(builder:flatbuffers.Builder, labelOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, labelOffset, 0);
}

static addDescription(builder:flatbuffers.Builder, descriptionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, descriptionOffset, 0);
}

static addVersion(builder:flatbuffers.Builder, version:number) {
  builder.addFieldInt32(3, version, 0);
}

static addElements(builder:flatbuffers.Builder, elementsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, elementsOffset, 0);
}

static createElementsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startElementsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addAttributeDefinitions(builder:flatbuffers.Builder, attributeDefinitionsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, attributeDefinitionsOffset, 0);
}

static createAttributeDefinitionsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startAttributeDefinitionsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endDucBlock(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // id
  return offset;
}

static createDucBlock(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, labelOffset:flatbuffers.Offset, descriptionOffset:flatbuffers.Offset, version:number, elementsOffset:flatbuffers.Offset, attributeDefinitionsOffset:flatbuffers.Offset):flatbuffers.Offset {
  DucBlock.startDucBlock(builder);
  DucBlock.addId(builder, idOffset);
  DucBlock.addLabel(builder, labelOffset);
  DucBlock.addDescription(builder, descriptionOffset);
  DucBlock.addVersion(builder, version);
  DucBlock.addElements(builder, elementsOffset);
  DucBlock.addAttributeDefinitions(builder, attributeDefinitionsOffset);
  return DucBlock.endDucBlock(builder);
}
}
