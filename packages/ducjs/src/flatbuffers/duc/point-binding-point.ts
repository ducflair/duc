// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class PointBindingPoint {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):PointBindingPoint {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPointBindingPoint(bb:flatbuffers.ByteBuffer, obj?:PointBindingPoint):PointBindingPoint {
  return (obj || new PointBindingPoint()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPointBindingPoint(bb:flatbuffers.ByteBuffer, obj?:PointBindingPoint):PointBindingPoint {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new PointBindingPoint()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

index():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

offset():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

static startPointBindingPoint(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addIndex(builder:flatbuffers.Builder, index:number) {
  builder.addFieldInt32(0, index, 0);
}

static addOffset(builder:flatbuffers.Builder, offset:number) {
  builder.addFieldFloat64(1, offset, 0.0);
}

static endPointBindingPoint(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createPointBindingPoint(builder:flatbuffers.Builder, index:number, offset:number):flatbuffers.Offset {
  PointBindingPoint.startPointBindingPoint(builder);
  PointBindingPoint.addIndex(builder, index);
  PointBindingPoint.addOffset(builder, offset);
  return PointBindingPoint.endPointBindingPoint(builder);
}
}
