// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class Margins {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Margins {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsMargins(bb:flatbuffers.ByteBuffer, obj?:Margins):Margins {
  return (obj || new Margins()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsMargins(bb:flatbuffers.ByteBuffer, obj?:Margins):Margins {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Margins()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

top():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

right():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

bottom():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

left():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

static startMargins(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addTop(builder:flatbuffers.Builder, top:number) {
  builder.addFieldFloat64(0, top, 0.0);
}

static addRight(builder:flatbuffers.Builder, right:number) {
  builder.addFieldFloat64(1, right, 0.0);
}

static addBottom(builder:flatbuffers.Builder, bottom:number) {
  builder.addFieldFloat64(2, bottom, 0.0);
}

static addLeft(builder:flatbuffers.Builder, left:number) {
  builder.addFieldFloat64(3, left, 0.0);
}

static endMargins(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createMargins(builder:flatbuffers.Builder, top:number, right:number, bottom:number, left:number):flatbuffers.Offset {
  Margins.startMargins(builder);
  Margins.addTop(builder, top);
  Margins.addRight(builder, right);
  Margins.addBottom(builder, bottom);
  Margins.addLeft(builder, left);
  return Margins.endMargins(builder);
}
}
