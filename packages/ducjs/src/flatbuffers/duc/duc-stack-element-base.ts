// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { _DucElementBase } from '../duc/duc-element-base';
import { _DucStackBase } from '../duc/duc-stack-base';


export class _DucStackElementBase {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):_DucStackElementBase {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAs_DucStackElementBase(bb:flatbuffers.ByteBuffer, obj?:_DucStackElementBase):_DucStackElementBase {
  return (obj || new _DucStackElementBase()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAs_DucStackElementBase(bb:flatbuffers.ByteBuffer, obj?:_DucStackElementBase):_DucStackElementBase {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new _DucStackElementBase()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

base(obj?:_DucElementBase):_DucElementBase|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new _DucElementBase()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

stackBase(obj?:_DucStackBase):_DucStackBase|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new _DucStackBase()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

clip():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

labelVisible():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

standardOverride():string|null
standardOverride(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
standardOverride(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static start_DucStackElementBase(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addBase(builder:flatbuffers.Builder, baseOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, baseOffset, 0);
}

static addStackBase(builder:flatbuffers.Builder, stackBaseOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, stackBaseOffset, 0);
}

static addClip(builder:flatbuffers.Builder, clip:boolean) {
  builder.addFieldInt8(2, +clip, +false);
}

static addLabelVisible(builder:flatbuffers.Builder, labelVisible:boolean) {
  builder.addFieldInt8(3, +labelVisible, +false);
}

static addStandardOverride(builder:flatbuffers.Builder, standardOverrideOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, standardOverrideOffset, 0);
}

static end_DucStackElementBase(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
