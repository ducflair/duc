// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { BLENDING } from '../duc/blending';
import { ElementBackground } from '../duc/element-background';
import { ElementStroke } from '../duc/element-stroke';


export class _DucElementStylesBase {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):_DucElementStylesBase {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAs_DucElementStylesBase(bb:flatbuffers.ByteBuffer, obj?:_DucElementStylesBase):_DucElementStylesBase {
  return (obj || new _DucElementStylesBase()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAs_DucElementStylesBase(bb:flatbuffers.ByteBuffer, obj?:_DucElementStylesBase):_DucElementStylesBase {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new _DucElementStylesBase()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

roundness():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

blending():BLENDING|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : null;
}

background(index: number, obj?:ElementBackground):ElementBackground|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new ElementBackground()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

backgroundLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

stroke(index: number, obj?:ElementStroke):ElementStroke|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new ElementStroke()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

strokeLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

opacity():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

static start_DucElementStylesBase(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addRoundness(builder:flatbuffers.Builder, roundness:number) {
  builder.addFieldFloat64(0, roundness, 0.0);
}

static addBlending(builder:flatbuffers.Builder, blending:BLENDING) {
  builder.addFieldInt8(1, blending, null);
}

static addBackground(builder:flatbuffers.Builder, backgroundOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, backgroundOffset, 0);
}

static createBackgroundVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startBackgroundVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addStroke(builder:flatbuffers.Builder, strokeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, strokeOffset, 0);
}

static createStrokeVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startStrokeVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addOpacity(builder:flatbuffers.Builder, opacity:number) {
  builder.addFieldFloat64(4, opacity, 0.0);
}

static end_DucElementStylesBase(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static create_DucElementStylesBase(builder:flatbuffers.Builder, roundness:number, blending:BLENDING|null, backgroundOffset:flatbuffers.Offset, strokeOffset:flatbuffers.Offset, opacity:number):flatbuffers.Offset {
  _DucElementStylesBase.start_DucElementStylesBase(builder);
  _DucElementStylesBase.addRoundness(builder, roundness);
  if (blending !== null)
    _DucElementStylesBase.addBlending(builder, blending);
  _DucElementStylesBase.addBackground(builder, backgroundOffset);
  _DucElementStylesBase.addStroke(builder, strokeOffset);
  _DucElementStylesBase.addOpacity(builder, opacity);
  return _DucElementStylesBase.end_DucElementStylesBase(builder);
}
}
