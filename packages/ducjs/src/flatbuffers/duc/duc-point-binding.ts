// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { DucHead } from '../duc/duc-head';
import { GeometricPoint } from '../duc/geometric-point';
import { PointBindingPoint } from '../duc/point-binding-point';


export class DucPointBinding {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DucPointBinding {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDucPointBinding(bb:flatbuffers.ByteBuffer, obj?:DucPointBinding):DucPointBinding {
  return (obj || new DucPointBinding()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDucPointBinding(bb:flatbuffers.ByteBuffer, obj?:DucPointBinding):DucPointBinding {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DucPointBinding()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

elementId():string|null
elementId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
elementId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

focus():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

gap():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

fixedPoint(obj?:GeometricPoint):GeometricPoint|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new GeometricPoint()).__init(this.bb_pos + offset, this.bb!) : null;
}

point(obj?:PointBindingPoint):PointBindingPoint|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new PointBindingPoint()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

head(obj?:DucHead):DucHead|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new DucHead()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startDucPointBinding(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addElementId(builder:flatbuffers.Builder, elementIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, elementIdOffset, 0);
}

static addFocus(builder:flatbuffers.Builder, focus:number) {
  builder.addFieldFloat32(1, focus, 0.0);
}

static addGap(builder:flatbuffers.Builder, gap:number) {
  builder.addFieldFloat64(2, gap, 0.0);
}

static addFixedPoint(builder:flatbuffers.Builder, fixedPointOffset:flatbuffers.Offset) {
  builder.addFieldStruct(3, fixedPointOffset, 0);
}

static addPoint(builder:flatbuffers.Builder, pointOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, pointOffset, 0);
}

static addHead(builder:flatbuffers.Builder, headOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, headOffset, 0);
}

static endDucPointBinding(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
