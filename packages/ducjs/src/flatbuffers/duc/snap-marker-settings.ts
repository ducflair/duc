// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { SnapMarkerStyleEntry } from '../duc/snap-marker-style-entry';


export class SnapMarkerSettings {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SnapMarkerSettings {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSnapMarkerSettings(bb:flatbuffers.ByteBuffer, obj?:SnapMarkerSettings):SnapMarkerSettings {
  return (obj || new SnapMarkerSettings()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSnapMarkerSettings(bb:flatbuffers.ByteBuffer, obj?:SnapMarkerSettings):SnapMarkerSettings {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SnapMarkerSettings()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

enabled():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

size():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

duration():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

styles(index: number, obj?:SnapMarkerStyleEntry):SnapMarkerStyleEntry|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new SnapMarkerStyleEntry()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

stylesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startSnapMarkerSettings(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addEnabled(builder:flatbuffers.Builder, enabled:boolean) {
  builder.addFieldInt8(0, +enabled, +false);
}

static addSize(builder:flatbuffers.Builder, size:number) {
  builder.addFieldInt32(1, size, 0);
}

static addDuration(builder:flatbuffers.Builder, duration:number) {
  builder.addFieldInt32(2, duration, 0);
}

static addStyles(builder:flatbuffers.Builder, stylesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, stylesOffset, 0);
}

static createStylesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startStylesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endSnapMarkerSettings(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createSnapMarkerSettings(builder:flatbuffers.Builder, enabled:boolean, size:number, duration:number, stylesOffset:flatbuffers.Offset):flatbuffers.Offset {
  SnapMarkerSettings.startSnapMarkerSettings(builder);
  SnapMarkerSettings.addEnabled(builder, enabled);
  SnapMarkerSettings.addSize(builder, size);
  SnapMarkerSettings.addDuration(builder, duration);
  SnapMarkerSettings.addStyles(builder, stylesOffset);
  return SnapMarkerSettings.endSnapMarkerSettings(builder);
}
}
