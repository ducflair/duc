// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { _DucStackElementBase } from '../duc/duc-stack-element-base';


export class DucFrameElement {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DucFrameElement {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDucFrameElement(bb:flatbuffers.ByteBuffer, obj?:DucFrameElement):DucFrameElement {
  return (obj || new DucFrameElement()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDucFrameElement(bb:flatbuffers.ByteBuffer, obj?:DucFrameElement):DucFrameElement {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DucFrameElement()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

stackElementBase(obj?:_DucStackElementBase):_DucStackElementBase|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new _DucStackElementBase()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startDucFrameElement(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addStackElementBase(builder:flatbuffers.Builder, stackElementBaseOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, stackElementBaseOffset, 0);
}

static endDucFrameElement(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createDucFrameElement(builder:flatbuffers.Builder, stackElementBaseOffset:flatbuffers.Offset):flatbuffers.Offset {
  DucFrameElement.startDucFrameElement(builder);
  DucFrameElement.addStackElementBase(builder, stackElementBaseOffset);
  return DucFrameElement.endDucFrameElement(builder);
}
}
