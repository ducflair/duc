// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { DucLeaderStyle } from '../duc/duc-leader-style';
import { GeometricPoint } from '../duc/geometric-point';
import { LeaderContent } from '../duc/leader-content';
import { _DucLinearElementBase } from '../duc/duc-linear-element-base';


export class DucLeaderElement {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DucLeaderElement {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDucLeaderElement(bb:flatbuffers.ByteBuffer, obj?:DucLeaderElement):DucLeaderElement {
  return (obj || new DucLeaderElement()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDucLeaderElement(bb:flatbuffers.ByteBuffer, obj?:DucLeaderElement):DucLeaderElement {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DucLeaderElement()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

linearBase(obj?:_DucLinearElementBase):_DucLinearElementBase|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new _DucLinearElementBase()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

style(obj?:DucLeaderStyle):DucLeaderStyle|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new DucLeaderStyle()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

content(obj?:LeaderContent):LeaderContent|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new LeaderContent()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

contentAnchor(obj?:GeometricPoint):GeometricPoint|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new GeometricPoint()).__init(this.bb_pos + offset, this.bb!) : null;
}

static startDucLeaderElement(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addLinearBase(builder:flatbuffers.Builder, linearBaseOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, linearBaseOffset, 0);
}

static addStyle(builder:flatbuffers.Builder, styleOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, styleOffset, 0);
}

static addContent(builder:flatbuffers.Builder, contentOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, contentOffset, 0);
}

static addContentAnchor(builder:flatbuffers.Builder, contentAnchorOffset:flatbuffers.Offset) {
  builder.addFieldStruct(3, contentAnchorOffset, 0);
}

static endDucLeaderElement(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
