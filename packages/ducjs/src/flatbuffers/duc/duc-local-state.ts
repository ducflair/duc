// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { DucHead } from '../duc/duc-head';
import { ElementBackground } from '../duc/element-background';
import { ElementStroke } from '../duc/element-stroke';
import { TEXT_ALIGN } from '../duc/text-align';


export class DucLocalState {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DucLocalState {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDucLocalState(bb:flatbuffers.ByteBuffer, obj?:DucLocalState):DucLocalState {
  return (obj || new DucLocalState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDucLocalState(bb:flatbuffers.ByteBuffer, obj?:DucLocalState):DucLocalState {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DucLocalState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

scope():string|null
scope(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
scope(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

activeStandardId():string|null
activeStandardId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
activeStandardId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

scrollX():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

scrollY():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

zoom():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

activeGridSettings(index: number):string
activeGridSettings(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
activeGridSettings(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

activeGridSettingsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

activeSnapSettings():string|null
activeSnapSettings(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
activeSnapSettings(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

isBindingEnabled():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

currentItemStroke(obj?:ElementStroke):ElementStroke|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? (obj || new ElementStroke()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

currentItemBackground(obj?:ElementBackground):ElementBackground|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? (obj || new ElementBackground()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

currentItemOpacity():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

currentItemFontFamily():string|null
currentItemFontFamily(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
currentItemFontFamily(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

currentItemFontSize():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

currentItemTextAlign():TEXT_ALIGN|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : null;
}

currentItemStartLineHead(obj?:DucHead):DucHead|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? (obj || new DucHead()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

currentItemEndLineHead(obj?:DucHead):DucHead|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? (obj || new DucHead()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

currentItemRoundness():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

penMode():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

viewModeEnabled():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

objectsSnapModeEnabled():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

gridModeEnabled():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

outlineModeEnabled():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startDucLocalState(builder:flatbuffers.Builder) {
  builder.startObject(22);
}

static addScope(builder:flatbuffers.Builder, scopeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, scopeOffset, 0);
}

static addActiveStandardId(builder:flatbuffers.Builder, activeStandardIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, activeStandardIdOffset, 0);
}

static addScrollX(builder:flatbuffers.Builder, scrollX:number) {
  builder.addFieldFloat64(2, scrollX, 0.0);
}

static addScrollY(builder:flatbuffers.Builder, scrollY:number) {
  builder.addFieldFloat64(3, scrollY, 0.0);
}

static addZoom(builder:flatbuffers.Builder, zoom:number) {
  builder.addFieldFloat64(4, zoom, 0.0);
}

static addActiveGridSettings(builder:flatbuffers.Builder, activeGridSettingsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, activeGridSettingsOffset, 0);
}

static createActiveGridSettingsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startActiveGridSettingsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addActiveSnapSettings(builder:flatbuffers.Builder, activeSnapSettingsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, activeSnapSettingsOffset, 0);
}

static addIsBindingEnabled(builder:flatbuffers.Builder, isBindingEnabled:boolean) {
  builder.addFieldInt8(7, +isBindingEnabled, +false);
}

static addCurrentItemStroke(builder:flatbuffers.Builder, currentItemStrokeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, currentItemStrokeOffset, 0);
}

static addCurrentItemBackground(builder:flatbuffers.Builder, currentItemBackgroundOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, currentItemBackgroundOffset, 0);
}

static addCurrentItemOpacity(builder:flatbuffers.Builder, currentItemOpacity:number) {
  builder.addFieldFloat32(10, currentItemOpacity, 0.0);
}

static addCurrentItemFontFamily(builder:flatbuffers.Builder, currentItemFontFamilyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, currentItemFontFamilyOffset, 0);
}

static addCurrentItemFontSize(builder:flatbuffers.Builder, currentItemFontSize:number) {
  builder.addFieldFloat64(12, currentItemFontSize, 0.0);
}

static addCurrentItemTextAlign(builder:flatbuffers.Builder, currentItemTextAlign:TEXT_ALIGN) {
  builder.addFieldInt8(13, currentItemTextAlign, null);
}

static addCurrentItemStartLineHead(builder:flatbuffers.Builder, currentItemStartLineHeadOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, currentItemStartLineHeadOffset, 0);
}

static addCurrentItemEndLineHead(builder:flatbuffers.Builder, currentItemEndLineHeadOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, currentItemEndLineHeadOffset, 0);
}

static addCurrentItemRoundness(builder:flatbuffers.Builder, currentItemRoundness:number) {
  builder.addFieldFloat64(16, currentItemRoundness, 0.0);
}

static addPenMode(builder:flatbuffers.Builder, penMode:boolean) {
  builder.addFieldInt8(17, +penMode, +false);
}

static addViewModeEnabled(builder:flatbuffers.Builder, viewModeEnabled:boolean) {
  builder.addFieldInt8(18, +viewModeEnabled, +false);
}

static addObjectsSnapModeEnabled(builder:flatbuffers.Builder, objectsSnapModeEnabled:boolean) {
  builder.addFieldInt8(19, +objectsSnapModeEnabled, +false);
}

static addGridModeEnabled(builder:flatbuffers.Builder, gridModeEnabled:boolean) {
  builder.addFieldInt8(20, +gridModeEnabled, +false);
}

static addOutlineModeEnabled(builder:flatbuffers.Builder, outlineModeEnabled:boolean) {
  builder.addFieldInt8(21, +outlineModeEnabled, +false);
}

static endDucLocalState(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
