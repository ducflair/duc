// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { DucTextDynamicSourceData, unionToDucTextDynamicSourceData, unionListToDucTextDynamicSourceData } from '../duc/duc-text-dynamic-source-data';
import { TEXT_FIELD_SOURCE_TYPE } from '../duc/text-field-source-type';


export class DucTextDynamicSource {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DucTextDynamicSource {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDucTextDynamicSource(bb:flatbuffers.ByteBuffer, obj?:DucTextDynamicSource):DucTextDynamicSource {
  return (obj || new DucTextDynamicSource()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDucTextDynamicSource(bb:flatbuffers.ByteBuffer, obj?:DucTextDynamicSource):DucTextDynamicSource {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DucTextDynamicSource()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

textSourceType():TEXT_FIELD_SOURCE_TYPE|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : null;
}

sourceType():DucTextDynamicSourceData {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : DucTextDynamicSourceData.NONE;
}

source<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startDucTextDynamicSource(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addTextSourceType(builder:flatbuffers.Builder, textSourceType:TEXT_FIELD_SOURCE_TYPE) {
  builder.addFieldInt8(0, textSourceType, null);
}

static addSourceType(builder:flatbuffers.Builder, sourceType:DucTextDynamicSourceData) {
  builder.addFieldInt8(1, sourceType, DucTextDynamicSourceData.NONE);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, sourceOffset, 0);
}

static endDucTextDynamicSource(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createDucTextDynamicSource(builder:flatbuffers.Builder, textSourceType:TEXT_FIELD_SOURCE_TYPE|null, sourceType:DucTextDynamicSourceData, sourceOffset:flatbuffers.Offset):flatbuffers.Offset {
  DucTextDynamicSource.startDucTextDynamicSource(builder);
  if (textSourceType !== null)
    DucTextDynamicSource.addTextSourceType(builder, textSourceType);
  DucTextDynamicSource.addSourceType(builder, sourceType);
  DucTextDynamicSource.addSource(builder, sourceOffset);
  return DucTextDynamicSource.endDucTextDynamicSource(builder);
}
}
