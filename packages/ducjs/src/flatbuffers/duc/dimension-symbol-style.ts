// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { DucHead } from '../duc/duc-head';
import { MARK_ELLIPSE_CENTER } from '../duc/mark-ellipse-center';


export class DimensionSymbolStyle {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DimensionSymbolStyle {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDimensionSymbolStyle(bb:flatbuffers.ByteBuffer, obj?:DimensionSymbolStyle):DimensionSymbolStyle {
  return (obj || new DimensionSymbolStyle()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDimensionSymbolStyle(bb:flatbuffers.ByteBuffer, obj?:DimensionSymbolStyle):DimensionSymbolStyle {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DimensionSymbolStyle()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

headsOverride(index: number, obj?:DucHead):DucHead|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new DucHead()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

headsOverrideLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

centerMarkType():MARK_ELLIPSE_CENTER|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : null;
}

centerMarkSize():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

static startDimensionSymbolStyle(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addHeadsOverride(builder:flatbuffers.Builder, headsOverrideOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, headsOverrideOffset, 0);
}

static createHeadsOverrideVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startHeadsOverrideVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addCenterMarkType(builder:flatbuffers.Builder, centerMarkType:MARK_ELLIPSE_CENTER) {
  builder.addFieldInt8(1, centerMarkType, null);
}

static addCenterMarkSize(builder:flatbuffers.Builder, centerMarkSize:number) {
  builder.addFieldFloat64(2, centerMarkSize, 0.0);
}

static endDimensionSymbolStyle(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createDimensionSymbolStyle(builder:flatbuffers.Builder, headsOverrideOffset:flatbuffers.Offset, centerMarkType:MARK_ELLIPSE_CENTER|null, centerMarkSize:number):flatbuffers.Offset {
  DimensionSymbolStyle.startDimensionSymbolStyle(builder);
  DimensionSymbolStyle.addHeadsOverride(builder, headsOverrideOffset);
  if (centerMarkType !== null)
    DimensionSymbolStyle.addCenterMarkType(builder, centerMarkType);
  DimensionSymbolStyle.addCenterMarkSize(builder, centerMarkSize);
  return DimensionSymbolStyle.endDimensionSymbolStyle(builder);
}
}
