// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { _DucLinearElementBase } from '../duc/duc-linear-element-base';


export class DucLinearElement {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DucLinearElement {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDucLinearElement(bb:flatbuffers.ByteBuffer, obj?:DucLinearElement):DucLinearElement {
  return (obj || new DucLinearElement()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDucLinearElement(bb:flatbuffers.ByteBuffer, obj?:DucLinearElement):DucLinearElement {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DucLinearElement()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

linearBase(obj?:_DucLinearElementBase):_DucLinearElementBase|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new _DucLinearElementBase()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

wipeoutBelow():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startDucLinearElement(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addLinearBase(builder:flatbuffers.Builder, linearBaseOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, linearBaseOffset, 0);
}

static addWipeoutBelow(builder:flatbuffers.Builder, wipeoutBelow:boolean) {
  builder.addFieldInt8(1, +wipeoutBelow, +false);
}

static endDucLinearElement(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createDucLinearElement(builder:flatbuffers.Builder, linearBaseOffset:flatbuffers.Offset, wipeoutBelow:boolean):flatbuffers.Offset {
  DucLinearElement.startDucLinearElement(builder);
  DucLinearElement.addLinearBase(builder, linearBaseOffset);
  DucLinearElement.addWipeoutBelow(builder, wipeoutBelow);
  return DucLinearElement.endDucLinearElement(builder);
}
}
