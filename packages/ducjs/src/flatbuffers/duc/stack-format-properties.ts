// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { STACKED_TEXT_ALIGN } from '../duc/stacked-text-align';


export class StackFormatProperties {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):StackFormatProperties {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsStackFormatProperties(bb:flatbuffers.ByteBuffer, obj?:StackFormatProperties):StackFormatProperties {
  return (obj || new StackFormatProperties()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsStackFormatProperties(bb:flatbuffers.ByteBuffer, obj?:StackFormatProperties):StackFormatProperties {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new StackFormatProperties()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

upperScale():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

lowerScale():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

alignment():STACKED_TEXT_ALIGN|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : null;
}

static startStackFormatProperties(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addUpperScale(builder:flatbuffers.Builder, upperScale:number) {
  builder.addFieldFloat64(0, upperScale, 0.0);
}

static addLowerScale(builder:flatbuffers.Builder, lowerScale:number) {
  builder.addFieldFloat64(1, lowerScale, 0.0);
}

static addAlignment(builder:flatbuffers.Builder, alignment:STACKED_TEXT_ALIGN) {
  builder.addFieldInt8(2, alignment, null);
}

static endStackFormatProperties(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createStackFormatProperties(builder:flatbuffers.Builder, upperScale:number, lowerScale:number, alignment:STACKED_TEXT_ALIGN|null):flatbuffers.Offset {
  StackFormatProperties.startStackFormatProperties(builder);
  StackFormatProperties.addUpperScale(builder, upperScale);
  StackFormatProperties.addLowerScale(builder, lowerScale);
  if (alignment !== null)
    StackFormatProperties.addAlignment(builder, alignment);
  return StackFormatProperties.endStackFormatProperties(builder);
}
}
