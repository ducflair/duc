// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { LineSpacing } from '../duc/line-spacing';
import { TEXT_ALIGN } from '../duc/text-align';
import { VERTICAL_ALIGN } from '../duc/vertical-align';


export class DucTextStyle {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DucTextStyle {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDucTextStyle(bb:flatbuffers.ByteBuffer, obj?:DucTextStyle):DucTextStyle {
  return (obj || new DucTextStyle()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDucTextStyle(bb:flatbuffers.ByteBuffer, obj?:DucTextStyle):DucTextStyle {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DucTextStyle()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

isLtr():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

fontFamily():string|null
fontFamily(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
fontFamily(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

bigFontFamily():string|null
bigFontFamily(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
bigFontFamily(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

textAlign():TEXT_ALIGN|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : null;
}

verticalAlign():VERTICAL_ALIGN|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : null;
}

lineHeight():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

lineSpacing(obj?:LineSpacing):LineSpacing|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? (obj || new LineSpacing()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

obliqueAngle():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

fontSize():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

paperTextHeight():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

widthFactor():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

isUpsideDown():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

isBackwards():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startDucTextStyle(builder:flatbuffers.Builder) {
  builder.startObject(14);
}

static addIsLtr(builder:flatbuffers.Builder, isLtr:boolean) {
  builder.addFieldInt8(1, +isLtr, +false);
}

static addFontFamily(builder:flatbuffers.Builder, fontFamilyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, fontFamilyOffset, 0);
}

static addBigFontFamily(builder:flatbuffers.Builder, bigFontFamilyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, bigFontFamilyOffset, 0);
}

static addTextAlign(builder:flatbuffers.Builder, textAlign:TEXT_ALIGN) {
  builder.addFieldInt8(4, textAlign, null);
}

static addVerticalAlign(builder:flatbuffers.Builder, verticalAlign:VERTICAL_ALIGN) {
  builder.addFieldInt8(5, verticalAlign, null);
}

static addLineHeight(builder:flatbuffers.Builder, lineHeight:number) {
  builder.addFieldFloat32(6, lineHeight, 0.0);
}

static addLineSpacing(builder:flatbuffers.Builder, lineSpacingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, lineSpacingOffset, 0);
}

static addObliqueAngle(builder:flatbuffers.Builder, obliqueAngle:number) {
  builder.addFieldFloat64(8, obliqueAngle, 0.0);
}

static addFontSize(builder:flatbuffers.Builder, fontSize:number) {
  builder.addFieldFloat64(9, fontSize, 0.0);
}

static addPaperTextHeight(builder:flatbuffers.Builder, paperTextHeight:number) {
  builder.addFieldFloat64(10, paperTextHeight, 0.0);
}

static addWidthFactor(builder:flatbuffers.Builder, widthFactor:number) {
  builder.addFieldFloat32(11, widthFactor, 0.0);
}

static addIsUpsideDown(builder:flatbuffers.Builder, isUpsideDown:boolean) {
  builder.addFieldInt8(12, +isUpsideDown, +false);
}

static addIsBackwards(builder:flatbuffers.Builder, isBackwards:boolean) {
  builder.addFieldInt8(13, +isBackwards, +false);
}

static endDucTextStyle(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
