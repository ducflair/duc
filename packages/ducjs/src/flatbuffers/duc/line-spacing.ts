// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { LINE_SPACING_TYPE } from '../duc/line-spacing-type';


export class LineSpacing {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):LineSpacing {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsLineSpacing(bb:flatbuffers.ByteBuffer, obj?:LineSpacing):LineSpacing {
  return (obj || new LineSpacing()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsLineSpacing(bb:flatbuffers.ByteBuffer, obj?:LineSpacing):LineSpacing {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new LineSpacing()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

value():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

type():LINE_SPACING_TYPE|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : null;
}

static startLineSpacing(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addValue(builder:flatbuffers.Builder, value:number) {
  builder.addFieldFloat64(0, value, 0.0);
}

static addType(builder:flatbuffers.Builder, type:LINE_SPACING_TYPE) {
  builder.addFieldInt8(1, type, null);
}

static endLineSpacing(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createLineSpacing(builder:flatbuffers.Builder, value:number, type:LINE_SPACING_TYPE|null):flatbuffers.Offset {
  LineSpacing.startLineSpacing(builder);
  LineSpacing.addValue(builder, value);
  if (type !== null)
    LineSpacing.addType(builder, type);
  return LineSpacing.endLineSpacing(builder);
}
}
