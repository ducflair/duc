// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Checkpoint } from '../duc/checkpoint';
import { Delta } from '../duc/delta';
import { VersionGraphMetadata } from '../duc/version-graph-metadata';


export class VersionGraph {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):VersionGraph {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsVersionGraph(bb:flatbuffers.ByteBuffer, obj?:VersionGraph):VersionGraph {
  return (obj || new VersionGraph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsVersionGraph(bb:flatbuffers.ByteBuffer, obj?:VersionGraph):VersionGraph {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new VersionGraph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

userCheckpointVersionId():string|null
userCheckpointVersionId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
userCheckpointVersionId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

latestVersionId():string|null
latestVersionId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
latestVersionId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

checkpoints(index: number, obj?:Checkpoint):Checkpoint|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new Checkpoint()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

checkpointsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

deltas(index: number, obj?:Delta):Delta|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new Delta()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

deltasLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

metadata(obj?:VersionGraphMetadata):VersionGraphMetadata|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new VersionGraphMetadata()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startVersionGraph(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addUserCheckpointVersionId(builder:flatbuffers.Builder, userCheckpointVersionIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, userCheckpointVersionIdOffset, 0);
}

static addLatestVersionId(builder:flatbuffers.Builder, latestVersionIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, latestVersionIdOffset, 0);
}

static addCheckpoints(builder:flatbuffers.Builder, checkpointsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, checkpointsOffset, 0);
}

static createCheckpointsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startCheckpointsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addDeltas(builder:flatbuffers.Builder, deltasOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, deltasOffset, 0);
}

static createDeltasVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startDeltasVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addMetadata(builder:flatbuffers.Builder, metadataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, metadataOffset, 0);
}

static endVersionGraph(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
