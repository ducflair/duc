// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class ParagraphFormatting {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ParagraphFormatting {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsParagraphFormatting(bb:flatbuffers.ByteBuffer, obj?:ParagraphFormatting):ParagraphFormatting {
  return (obj || new ParagraphFormatting()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsParagraphFormatting(bb:flatbuffers.ByteBuffer, obj?:ParagraphFormatting):ParagraphFormatting {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ParagraphFormatting()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

firstLineIndent():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

hangingIndent():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

leftIndent():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

rightIndent():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

spaceBefore():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

spaceAfter():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

tabStops(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readFloat64(this.bb!.__vector(this.bb_pos + offset) + index * 8) : 0;
}

tabStopsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

tabStopsArray():Float64Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? new Float64Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startParagraphFormatting(builder:flatbuffers.Builder) {
  builder.startObject(7);
}

static addFirstLineIndent(builder:flatbuffers.Builder, firstLineIndent:number) {
  builder.addFieldFloat64(0, firstLineIndent, 0.0);
}

static addHangingIndent(builder:flatbuffers.Builder, hangingIndent:number) {
  builder.addFieldFloat64(1, hangingIndent, 0.0);
}

static addLeftIndent(builder:flatbuffers.Builder, leftIndent:number) {
  builder.addFieldFloat64(2, leftIndent, 0.0);
}

static addRightIndent(builder:flatbuffers.Builder, rightIndent:number) {
  builder.addFieldFloat64(3, rightIndent, 0.0);
}

static addSpaceBefore(builder:flatbuffers.Builder, spaceBefore:number) {
  builder.addFieldFloat64(4, spaceBefore, 0.0);
}

static addSpaceAfter(builder:flatbuffers.Builder, spaceAfter:number) {
  builder.addFieldFloat64(5, spaceAfter, 0.0);
}

static addTabStops(builder:flatbuffers.Builder, tabStopsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, tabStopsOffset, 0);
}

static createTabStopsVector(builder:flatbuffers.Builder, data:number[]|Float64Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createTabStopsVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createTabStopsVector(builder:flatbuffers.Builder, data:number[]|Float64Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(8, data.length, 8);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addFloat64(data[i]!);
  }
  return builder.endVector();
}

static startTabStopsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(8, numElems, 8);
}

static endParagraphFormatting(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createParagraphFormatting(builder:flatbuffers.Builder, firstLineIndent:number, hangingIndent:number, leftIndent:number, rightIndent:number, spaceBefore:number, spaceAfter:number, tabStopsOffset:flatbuffers.Offset):flatbuffers.Offset {
  ParagraphFormatting.startParagraphFormatting(builder);
  ParagraphFormatting.addFirstLineIndent(builder, firstLineIndent);
  ParagraphFormatting.addHangingIndent(builder, hangingIndent);
  ParagraphFormatting.addLeftIndent(builder, leftIndent);
  ParagraphFormatting.addRightIndent(builder, rightIndent);
  ParagraphFormatting.addSpaceBefore(builder, spaceBefore);
  ParagraphFormatting.addSpaceAfter(builder, spaceAfter);
  ParagraphFormatting.addTabStops(builder, tabStopsOffset);
  return ParagraphFormatting.endParagraphFormatting(builder);
}
}
