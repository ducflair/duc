// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { FCFBetweenModifier } from '../duc/fcfbetween-modifier';
import { FCFProjectedZoneModifier } from '../duc/fcfprojected-zone-modifier';


export class FCFFrameModifiers {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):FCFFrameModifiers {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsFCFFrameModifiers(bb:flatbuffers.ByteBuffer, obj?:FCFFrameModifiers):FCFFrameModifiers {
  return (obj || new FCFFrameModifiers()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsFCFFrameModifiers(bb:flatbuffers.ByteBuffer, obj?:FCFFrameModifiers):FCFFrameModifiers {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new FCFFrameModifiers()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

allAround():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

allOver():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

continuousFeature():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

between(obj?:FCFBetweenModifier):FCFBetweenModifier|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new FCFBetweenModifier()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

projectedToleranceZone(obj?:FCFProjectedZoneModifier):FCFProjectedZoneModifier|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new FCFProjectedZoneModifier()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startFCFFrameModifiers(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addAllAround(builder:flatbuffers.Builder, allAround:boolean) {
  builder.addFieldInt8(0, +allAround, +false);
}

static addAllOver(builder:flatbuffers.Builder, allOver:boolean) {
  builder.addFieldInt8(1, +allOver, +false);
}

static addContinuousFeature(builder:flatbuffers.Builder, continuousFeature:boolean) {
  builder.addFieldInt8(2, +continuousFeature, +false);
}

static addBetween(builder:flatbuffers.Builder, betweenOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, betweenOffset, 0);
}

static addProjectedToleranceZone(builder:flatbuffers.Builder, projectedToleranceZoneOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, projectedToleranceZoneOffset, 0);
}

static endFCFFrameModifiers(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
