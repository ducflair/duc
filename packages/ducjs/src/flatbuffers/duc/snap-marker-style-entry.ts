// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { OBJECT_SNAP_MODE } from '../duc/object-snap-mode';
import { SnapMarkerStyle } from '../duc/snap-marker-style';


export class SnapMarkerStyleEntry {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SnapMarkerStyleEntry {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSnapMarkerStyleEntry(bb:flatbuffers.ByteBuffer, obj?:SnapMarkerStyleEntry):SnapMarkerStyleEntry {
  return (obj || new SnapMarkerStyleEntry()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSnapMarkerStyleEntry(bb:flatbuffers.ByteBuffer, obj?:SnapMarkerStyleEntry):SnapMarkerStyleEntry {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SnapMarkerStyleEntry()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

key():OBJECT_SNAP_MODE|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : null;
}

value(obj?:SnapMarkerStyle):SnapMarkerStyle|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new SnapMarkerStyle()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startSnapMarkerStyleEntry(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addKey(builder:flatbuffers.Builder, key:OBJECT_SNAP_MODE) {
  builder.addFieldInt8(0, key, null);
}

static addValue(builder:flatbuffers.Builder, valueOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, valueOffset, 0);
}

static endSnapMarkerStyleEntry(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
