// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { LINE_HEAD } from '../duc/line-head';


export class DucHead {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DucHead {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDucHead(bb:flatbuffers.ByteBuffer, obj?:DucHead):DucHead {
  return (obj || new DucHead()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDucHead(bb:flatbuffers.ByteBuffer, obj?:DucHead):DucHead {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DucHead()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

type():LINE_HEAD|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : null;
}

blockId():string|null
blockId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
blockId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

size():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

static startDucHead(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addType(builder:flatbuffers.Builder, type:LINE_HEAD) {
  builder.addFieldInt8(0, type, null);
}

static addBlockId(builder:flatbuffers.Builder, blockIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, blockIdOffset, 0);
}

static addSize(builder:flatbuffers.Builder, size:number) {
  builder.addFieldFloat64(2, size, 0.0);
}

static endDucHead(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createDucHead(builder:flatbuffers.Builder, type:LINE_HEAD|null, blockIdOffset:flatbuffers.Offset, size:number):flatbuffers.Offset {
  DucHead.startDucHead(builder);
  if (type !== null)
    DucHead.addType(builder, type);
  DucHead.addBlockId(builder, blockIdOffset);
  DucHead.addSize(builder, size);
  return DucHead.endDucHead(builder);
}
}
