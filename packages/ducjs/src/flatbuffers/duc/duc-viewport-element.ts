// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { DucView } from '../duc/duc-view';
import { DucViewportStyle } from '../duc/duc-viewport-style';
import { VIEWPORT_SHADE_PLOT } from '../duc/viewport-shade-plot';
import { _DucLinearElementBase } from '../duc/duc-linear-element-base';
import { _DucStackBase } from '../duc/duc-stack-base';


export class DucViewportElement {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DucViewportElement {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDucViewportElement(bb:flatbuffers.ByteBuffer, obj?:DucViewportElement):DucViewportElement {
  return (obj || new DucViewportElement()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDucViewportElement(bb:flatbuffers.ByteBuffer, obj?:DucViewportElement):DucViewportElement {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DucViewportElement()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

linearBase(obj?:_DucLinearElementBase):_DucLinearElementBase|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new _DucLinearElementBase()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

stackBase(obj?:_DucStackBase):_DucStackBase|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new _DucStackBase()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

style(obj?:DucViewportStyle):DucViewportStyle|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new DucViewportStyle()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

view(obj?:DucView):DucView|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new DucView()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

scale():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

shadePlot():VIEWPORT_SHADE_PLOT|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : null;
}

frozenGroupIds(index: number):string
frozenGroupIds(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
frozenGroupIds(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

frozenGroupIdsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

standardOverride():string|null
standardOverride(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
standardOverride(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startDucViewportElement(builder:flatbuffers.Builder) {
  builder.startObject(8);
}

static addLinearBase(builder:flatbuffers.Builder, linearBaseOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, linearBaseOffset, 0);
}

static addStackBase(builder:flatbuffers.Builder, stackBaseOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, stackBaseOffset, 0);
}

static addStyle(builder:flatbuffers.Builder, styleOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, styleOffset, 0);
}

static addView(builder:flatbuffers.Builder, viewOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, viewOffset, 0);
}

static addScale(builder:flatbuffers.Builder, scale:number) {
  builder.addFieldFloat32(4, scale, 0.0);
}

static addShadePlot(builder:flatbuffers.Builder, shadePlot:VIEWPORT_SHADE_PLOT) {
  builder.addFieldInt8(5, shadePlot, null);
}

static addFrozenGroupIds(builder:flatbuffers.Builder, frozenGroupIdsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, frozenGroupIdsOffset, 0);
}

static createFrozenGroupIdsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startFrozenGroupIdsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addStandardOverride(builder:flatbuffers.Builder, standardOverrideOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, standardOverrideOffset, 0);
}

static endDucViewportElement(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
