// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { PARAMETRIC_SOURCE_TYPE } from '../duc/parametric-source-type';


export class ParametricSource {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ParametricSource {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsParametricSource(bb:flatbuffers.ByteBuffer, obj?:ParametricSource):ParametricSource {
  return (obj || new ParametricSource()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsParametricSource(bb:flatbuffers.ByteBuffer, obj?:ParametricSource):ParametricSource {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ParametricSource()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

type():PARAMETRIC_SOURCE_TYPE|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : null;
}

code():string|null
code(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
code(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

fileId():string|null
fileId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
fileId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startParametricSource(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addType(builder:flatbuffers.Builder, type:PARAMETRIC_SOURCE_TYPE) {
  builder.addFieldInt8(0, type, null);
}

static addCode(builder:flatbuffers.Builder, codeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, codeOffset, 0);
}

static addFileId(builder:flatbuffers.Builder, fileIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, fileIdOffset, 0);
}

static endParametricSource(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createParametricSource(builder:flatbuffers.Builder, type:PARAMETRIC_SOURCE_TYPE|null, codeOffset:flatbuffers.Offset, fileIdOffset:flatbuffers.Offset):flatbuffers.Offset {
  ParametricSource.startParametricSource(builder);
  if (type !== null)
    ParametricSource.addType(builder, type);
  ParametricSource.addCode(builder, codeOffset);
  ParametricSource.addFileId(builder, fileIdOffset);
  return ParametricSource.endParametricSource(builder);
}
}
