// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class TilingProperties {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):TilingProperties {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsTilingProperties(bb:flatbuffers.ByteBuffer, obj?:TilingProperties):TilingProperties {
  return (obj || new TilingProperties()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsTilingProperties(bb:flatbuffers.ByteBuffer, obj?:TilingProperties):TilingProperties {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new TilingProperties()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

sizeInPercent():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

angle():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

spacing():number|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : null;
}

offsetX():number|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : null;
}

offsetY():number|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : null;
}

static startTilingProperties(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addSizeInPercent(builder:flatbuffers.Builder, sizeInPercent:number) {
  builder.addFieldFloat32(0, sizeInPercent, 0.0);
}

static addAngle(builder:flatbuffers.Builder, angle:number) {
  builder.addFieldFloat64(1, angle, 0.0);
}

static addSpacing(builder:flatbuffers.Builder, spacing:number) {
  builder.addFieldFloat64(2, spacing, null);
}

static addOffsetX(builder:flatbuffers.Builder, offsetX:number) {
  builder.addFieldFloat64(3, offsetX, null);
}

static addOffsetY(builder:flatbuffers.Builder, offsetY:number) {
  builder.addFieldFloat64(4, offsetY, null);
}

static endTilingProperties(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createTilingProperties(builder:flatbuffers.Builder, sizeInPercent:number, angle:number, spacing:number|null, offsetX:number|null, offsetY:number|null):flatbuffers.Offset {
  TilingProperties.startTilingProperties(builder);
  TilingProperties.addSizeInPercent(builder, sizeInPercent);
  TilingProperties.addAngle(builder, angle);
  if (spacing !== null)
    TilingProperties.addSpacing(builder, spacing);
  if (offsetX !== null)
    TilingProperties.addOffsetX(builder, offsetX);
  if (offsetY !== null)
    TilingProperties.addOffsetY(builder, offsetY);
  return TilingProperties.endTilingProperties(builder);
}
}
