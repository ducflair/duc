// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class DynamicSnapSettings {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DynamicSnapSettings {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDynamicSnapSettings(bb:flatbuffers.ByteBuffer, obj?:DynamicSnapSettings):DynamicSnapSettings {
  return (obj || new DynamicSnapSettings()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDynamicSnapSettings(bb:flatbuffers.ByteBuffer, obj?:DynamicSnapSettings):DynamicSnapSettings {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DynamicSnapSettings()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

enabledDuringDrag():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

enabledDuringRotation():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

enabledDuringScale():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startDynamicSnapSettings(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addEnabledDuringDrag(builder:flatbuffers.Builder, enabledDuringDrag:boolean) {
  builder.addFieldInt8(0, +enabledDuringDrag, +false);
}

static addEnabledDuringRotation(builder:flatbuffers.Builder, enabledDuringRotation:boolean) {
  builder.addFieldInt8(1, +enabledDuringRotation, +false);
}

static addEnabledDuringScale(builder:flatbuffers.Builder, enabledDuringScale:boolean) {
  builder.addFieldInt8(2, +enabledDuringScale, +false);
}

static endDynamicSnapSettings(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createDynamicSnapSettings(builder:flatbuffers.Builder, enabledDuringDrag:boolean, enabledDuringRotation:boolean, enabledDuringScale:boolean):flatbuffers.Offset {
  DynamicSnapSettings.startDynamicSnapSettings(builder);
  DynamicSnapSettings.addEnabledDuringDrag(builder, enabledDuringDrag);
  DynamicSnapSettings.addEnabledDuringRotation(builder, enabledDuringRotation);
  DynamicSnapSettings.addEnabledDuringScale(builder, enabledDuringScale);
  return DynamicSnapSettings.endDynamicSnapSettings(builder);
}
}
