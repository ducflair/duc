// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { ElementBackground } from '../duc/element-background';
import { ElementStroke } from '../duc/element-stroke';


export class DucPath {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DucPath {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDucPath(bb:flatbuffers.ByteBuffer, obj?:DucPath):DucPath {
  return (obj || new DucPath()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDucPath(bb:flatbuffers.ByteBuffer, obj?:DucPath):DucPath {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DucPath()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

lineIndices(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
}

lineIndicesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

lineIndicesArray():Int32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Int32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

background(obj?:ElementBackground):ElementBackground|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new ElementBackground()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

stroke(obj?:ElementStroke):ElementStroke|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new ElementStroke()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startDucPath(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addLineIndices(builder:flatbuffers.Builder, lineIndicesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, lineIndicesOffset, 0);
}

static createLineIndicesVector(builder:flatbuffers.Builder, data:number[]|Int32Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createLineIndicesVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createLineIndicesVector(builder:flatbuffers.Builder, data:number[]|Int32Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]!);
  }
  return builder.endVector();
}

static startLineIndicesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addBackground(builder:flatbuffers.Builder, backgroundOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, backgroundOffset, 0);
}

static addStroke(builder:flatbuffers.Builder, strokeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, strokeOffset, 0);
}

static endDucPath(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
