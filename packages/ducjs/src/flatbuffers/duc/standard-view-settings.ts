// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { IdentifiedGridSettings } from '../duc/identified-grid-settings';
import { IdentifiedSnapSettings } from '../duc/identified-snap-settings';
import { IdentifiedUcs } from '../duc/identified-ucs';
import { IdentifiedView } from '../duc/identified-view';


export class StandardViewSettings {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):StandardViewSettings {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsStandardViewSettings(bb:flatbuffers.ByteBuffer, obj?:StandardViewSettings):StandardViewSettings {
  return (obj || new StandardViewSettings()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsStandardViewSettings(bb:flatbuffers.ByteBuffer, obj?:StandardViewSettings):StandardViewSettings {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new StandardViewSettings()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

views(index: number, obj?:IdentifiedView):IdentifiedView|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new IdentifiedView()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

viewsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

ucs(index: number, obj?:IdentifiedUcs):IdentifiedUcs|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new IdentifiedUcs()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

ucsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

gridSettings(index: number, obj?:IdentifiedGridSettings):IdentifiedGridSettings|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new IdentifiedGridSettings()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

gridSettingsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

snapSettings(index: number, obj?:IdentifiedSnapSettings):IdentifiedSnapSettings|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new IdentifiedSnapSettings()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

snapSettingsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startStandardViewSettings(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addViews(builder:flatbuffers.Builder, viewsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, viewsOffset, 0);
}

static createViewsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startViewsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addUcs(builder:flatbuffers.Builder, ucsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, ucsOffset, 0);
}

static createUcsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startUcsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addGridSettings(builder:flatbuffers.Builder, gridSettingsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, gridSettingsOffset, 0);
}

static createGridSettingsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startGridSettingsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addSnapSettings(builder:flatbuffers.Builder, snapSettingsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, snapSettingsOffset, 0);
}

static createSnapSettingsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSnapSettingsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endStandardViewSettings(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createStandardViewSettings(builder:flatbuffers.Builder, viewsOffset:flatbuffers.Offset, ucsOffset:flatbuffers.Offset, gridSettingsOffset:flatbuffers.Offset, snapSettingsOffset:flatbuffers.Offset):flatbuffers.Offset {
  StandardViewSettings.startStandardViewSettings(builder);
  StandardViewSettings.addViews(builder, viewsOffset);
  StandardViewSettings.addUcs(builder, ucsOffset);
  StandardViewSettings.addGridSettings(builder, gridSettingsOffset);
  StandardViewSettings.addSnapSettings(builder, snapSettingsOffset);
  return StandardViewSettings.endStandardViewSettings(builder);
}
}
