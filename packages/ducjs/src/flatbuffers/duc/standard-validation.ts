// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { DimensionValidationRules } from '../duc/dimension-validation-rules';
import { LayerValidationRules } from '../duc/layer-validation-rules';


export class StandardValidation {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):StandardValidation {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsStandardValidation(bb:flatbuffers.ByteBuffer, obj?:StandardValidation):StandardValidation {
  return (obj || new StandardValidation()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsStandardValidation(bb:flatbuffers.ByteBuffer, obj?:StandardValidation):StandardValidation {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new StandardValidation()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

dimensionRules(obj?:DimensionValidationRules):DimensionValidationRules|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new DimensionValidationRules()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

layerRules(obj?:LayerValidationRules):LayerValidationRules|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new LayerValidationRules()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startStandardValidation(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addDimensionRules(builder:flatbuffers.Builder, dimensionRulesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, dimensionRulesOffset, 0);
}

static addLayerRules(builder:flatbuffers.Builder, layerRulesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, layerRulesOffset, 0);
}

static endStandardValidation(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
