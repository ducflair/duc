// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { SNAP_MARKER_SHAPE } from '../duc/snap-marker-shape';


export class SnapMarkerStyle {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SnapMarkerStyle {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSnapMarkerStyle(bb:flatbuffers.ByteBuffer, obj?:SnapMarkerStyle):SnapMarkerStyle {
  return (obj || new SnapMarkerStyle()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSnapMarkerStyle(bb:flatbuffers.ByteBuffer, obj?:SnapMarkerStyle):SnapMarkerStyle {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SnapMarkerStyle()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

shape():SNAP_MARKER_SHAPE|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : null;
}

color():string|null
color(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
color(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startSnapMarkerStyle(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addShape(builder:flatbuffers.Builder, shape:SNAP_MARKER_SHAPE) {
  builder.addFieldInt8(0, shape, null);
}

static addColor(builder:flatbuffers.Builder, colorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, colorOffset, 0);
}

static endSnapMarkerStyle(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createSnapMarkerStyle(builder:flatbuffers.Builder, shape:SNAP_MARKER_SHAPE|null, colorOffset:flatbuffers.Offset):flatbuffers.Offset {
  SnapMarkerStyle.startSnapMarkerStyle(builder);
  if (shape !== null)
    SnapMarkerStyle.addShape(builder, shape);
  SnapMarkerStyle.addColor(builder, colorOffset);
  return SnapMarkerStyle.endSnapMarkerStyle(builder);
}
}
