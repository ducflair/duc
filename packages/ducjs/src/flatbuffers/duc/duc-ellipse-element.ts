// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { _DucElementBase } from '../duc/duc-element-base';


export class DucEllipseElement {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DucEllipseElement {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDucEllipseElement(bb:flatbuffers.ByteBuffer, obj?:DucEllipseElement):DucEllipseElement {
  return (obj || new DucEllipseElement()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDucEllipseElement(bb:flatbuffers.ByteBuffer, obj?:DucEllipseElement):DucEllipseElement {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DucEllipseElement()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

base(obj?:_DucElementBase):_DucElementBase|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new _DucElementBase()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

ratio():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

startAngle():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

endAngle():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

showAuxCrosshair():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startDucEllipseElement(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addBase(builder:flatbuffers.Builder, baseOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, baseOffset, 0);
}

static addRatio(builder:flatbuffers.Builder, ratio:number) {
  builder.addFieldFloat32(1, ratio, 0.0);
}

static addStartAngle(builder:flatbuffers.Builder, startAngle:number) {
  builder.addFieldFloat64(2, startAngle, 0.0);
}

static addEndAngle(builder:flatbuffers.Builder, endAngle:number) {
  builder.addFieldFloat64(3, endAngle, 0.0);
}

static addShowAuxCrosshair(builder:flatbuffers.Builder, showAuxCrosshair:boolean) {
  builder.addFieldInt8(4, +showAuxCrosshair, +false);
}

static endDucEllipseElement(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createDucEllipseElement(builder:flatbuffers.Builder, baseOffset:flatbuffers.Offset, ratio:number, startAngle:number, endAngle:number, showAuxCrosshair:boolean):flatbuffers.Offset {
  DucEllipseElement.startDucEllipseElement(builder);
  DucEllipseElement.addBase(builder, baseOffset);
  DucEllipseElement.addRatio(builder, ratio);
  DucEllipseElement.addStartAngle(builder, startAngle);
  DucEllipseElement.addEndAngle(builder, endAngle);
  DucEllipseElement.addShowAuxCrosshair(builder, showAuxCrosshair);
  return DucEllipseElement.endDucEllipseElement(builder);
}
}
