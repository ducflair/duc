// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { DucTableAutoSize } from '../duc/duc-table-auto-size';
import { DucTableCellEntry } from '../duc/duc-table-cell-entry';
import { DucTableColumnEntry } from '../duc/duc-table-column-entry';
import { DucTableRowEntry } from '../duc/duc-table-row-entry';
import { DucTableStyle } from '../duc/duc-table-style';
import { _DucElementBase } from '../duc/duc-element-base';


export class DucTableElement {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DucTableElement {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDucTableElement(bb:flatbuffers.ByteBuffer, obj?:DucTableElement):DucTableElement {
  return (obj || new DucTableElement()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDucTableElement(bb:flatbuffers.ByteBuffer, obj?:DucTableElement):DucTableElement {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DucTableElement()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

base(obj?:_DucElementBase):_DucElementBase|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new _DucElementBase()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

style(obj?:DucTableStyle):DucTableStyle|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new DucTableStyle()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

columnOrder(index: number):string
columnOrder(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
columnOrder(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

columnOrderLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

rowOrder(index: number):string
rowOrder(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
rowOrder(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

rowOrderLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

columns(index: number, obj?:DucTableColumnEntry):DucTableColumnEntry|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new DucTableColumnEntry()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

columnsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

rows(index: number, obj?:DucTableRowEntry):DucTableRowEntry|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new DucTableRowEntry()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

rowsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

cells(index: number, obj?:DucTableCellEntry):DucTableCellEntry|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? (obj || new DucTableCellEntry()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

cellsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

headerRowCount():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

autoSize(obj?:DucTableAutoSize):DucTableAutoSize|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? (obj || new DucTableAutoSize()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startDucTableElement(builder:flatbuffers.Builder) {
  builder.startObject(9);
}

static addBase(builder:flatbuffers.Builder, baseOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, baseOffset, 0);
}

static addStyle(builder:flatbuffers.Builder, styleOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, styleOffset, 0);
}

static addColumnOrder(builder:flatbuffers.Builder, columnOrderOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, columnOrderOffset, 0);
}

static createColumnOrderVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startColumnOrderVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addRowOrder(builder:flatbuffers.Builder, rowOrderOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, rowOrderOffset, 0);
}

static createRowOrderVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startRowOrderVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addColumns(builder:flatbuffers.Builder, columnsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, columnsOffset, 0);
}

static createColumnsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startColumnsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addRows(builder:flatbuffers.Builder, rowsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, rowsOffset, 0);
}

static createRowsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startRowsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addCells(builder:flatbuffers.Builder, cellsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, cellsOffset, 0);
}

static createCellsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startCellsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addHeaderRowCount(builder:flatbuffers.Builder, headerRowCount:number) {
  builder.addFieldInt32(7, headerRowCount, 0);
}

static addAutoSize(builder:flatbuffers.Builder, autoSizeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, autoSizeOffset, 0);
}

static endDucTableElement(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
