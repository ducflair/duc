// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { DIMENSION_UNITS_FORMAT } from '../duc/dimension-units-format';
import { _UnitSystemBase } from '../duc/unit-system-base';


export class AlternateUnits {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):AlternateUnits {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsAlternateUnits(bb:flatbuffers.ByteBuffer, obj?:AlternateUnits):AlternateUnits {
  return (obj || new AlternateUnits()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsAlternateUnits(bb:flatbuffers.ByteBuffer, obj?:AlternateUnits):AlternateUnits {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new AlternateUnits()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

base(obj?:_UnitSystemBase):_UnitSystemBase|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new _UnitSystemBase()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

format():DIMENSION_UNITS_FORMAT|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : null;
}

isVisible():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

multiplier():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

static startAlternateUnits(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addBase(builder:flatbuffers.Builder, baseOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, baseOffset, 0);
}

static addFormat(builder:flatbuffers.Builder, format:DIMENSION_UNITS_FORMAT) {
  builder.addFieldInt8(1, format, null);
}

static addIsVisible(builder:flatbuffers.Builder, isVisible:boolean) {
  builder.addFieldInt8(2, +isVisible, +false);
}

static addMultiplier(builder:flatbuffers.Builder, multiplier:number) {
  builder.addFieldFloat32(3, multiplier, 0.0);
}

static endAlternateUnits(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createAlternateUnits(builder:flatbuffers.Builder, baseOffset:flatbuffers.Offset, format:DIMENSION_UNITS_FORMAT|null, isVisible:boolean, multiplier:number):flatbuffers.Offset {
  AlternateUnits.startAlternateUnits(builder);
  AlternateUnits.addBase(builder, baseOffset);
  if (format !== null)
    AlternateUnits.addFormat(builder, format);
  AlternateUnits.addIsVisible(builder, isVisible);
  AlternateUnits.addMultiplier(builder, multiplier);
  return AlternateUnits.endAlternateUnits(builder);
}
}
