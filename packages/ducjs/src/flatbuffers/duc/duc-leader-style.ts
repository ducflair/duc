// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { BLOCK_ATTACHMENT } from '../duc/block-attachment';
import { DucHead } from '../duc/duc-head';
import { DucTextStyle } from '../duc/duc-text-style';
import { VERTICAL_ALIGN } from '../duc/vertical-align';
import { _DucElementStylesBase } from '../duc/duc-element-styles-base';


export class DucLeaderStyle {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DucLeaderStyle {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDucLeaderStyle(bb:flatbuffers.ByteBuffer, obj?:DucLeaderStyle):DucLeaderStyle {
  return (obj || new DucLeaderStyle()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDucLeaderStyle(bb:flatbuffers.ByteBuffer, obj?:DucLeaderStyle):DucLeaderStyle {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DucLeaderStyle()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

baseStyle(obj?:_DucElementStylesBase):_DucElementStylesBase|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new _DucElementStylesBase()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

headsOverride(index: number, obj?:DucHead):DucHead|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new DucHead()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

headsOverrideLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

dogleg():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

textStyle(obj?:DucTextStyle):DucTextStyle|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new DucTextStyle()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

textAttachment():VERTICAL_ALIGN|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : null;
}

blockAttachment():BLOCK_ATTACHMENT|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : null;
}

static startDucLeaderStyle(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addBaseStyle(builder:flatbuffers.Builder, baseStyleOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, baseStyleOffset, 0);
}

static addHeadsOverride(builder:flatbuffers.Builder, headsOverrideOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, headsOverrideOffset, 0);
}

static createHeadsOverrideVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startHeadsOverrideVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addDogleg(builder:flatbuffers.Builder, dogleg:number) {
  builder.addFieldFloat64(2, dogleg, 0.0);
}

static addTextStyle(builder:flatbuffers.Builder, textStyleOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, textStyleOffset, 0);
}

static addTextAttachment(builder:flatbuffers.Builder, textAttachment:VERTICAL_ALIGN) {
  builder.addFieldInt8(4, textAttachment, null);
}

static addBlockAttachment(builder:flatbuffers.Builder, blockAttachment:BLOCK_ATTACHMENT) {
  builder.addFieldInt8(5, blockAttachment, null);
}

static endDucLeaderStyle(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
