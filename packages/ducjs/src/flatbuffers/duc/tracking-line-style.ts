// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class TrackingLineStyle {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):TrackingLineStyle {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsTrackingLineStyle(bb:flatbuffers.ByteBuffer, obj?:TrackingLineStyle):TrackingLineStyle {
  return (obj || new TrackingLineStyle()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsTrackingLineStyle(bb:flatbuffers.ByteBuffer, obj?:TrackingLineStyle):TrackingLineStyle {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new TrackingLineStyle()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

color():string|null
color(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
color(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

opacity():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

dashPattern(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat64(this.bb!.__vector(this.bb_pos + offset) + index * 8) : 0;
}

dashPatternLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

dashPatternArray():Float64Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? new Float64Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startTrackingLineStyle(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addColor(builder:flatbuffers.Builder, colorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, colorOffset, 0);
}

static addOpacity(builder:flatbuffers.Builder, opacity:number) {
  builder.addFieldFloat64(1, opacity, 0.0);
}

static addDashPattern(builder:flatbuffers.Builder, dashPatternOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, dashPatternOffset, 0);
}

static createDashPatternVector(builder:flatbuffers.Builder, data:number[]|Float64Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createDashPatternVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createDashPatternVector(builder:flatbuffers.Builder, data:number[]|Float64Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(8, data.length, 8);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addFloat64(data[i]!);
  }
  return builder.endVector();
}

static startDashPatternVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(8, numElems, 8);
}

static endTrackingLineStyle(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createTrackingLineStyle(builder:flatbuffers.Builder, colorOffset:flatbuffers.Offset, opacity:number, dashPatternOffset:flatbuffers.Offset):flatbuffers.Offset {
  TrackingLineStyle.startTrackingLineStyle(builder);
  TrackingLineStyle.addColor(builder, colorOffset);
  TrackingLineStyle.addOpacity(builder, opacity);
  TrackingLineStyle.addDashPattern(builder, dashPatternOffset);
  return TrackingLineStyle.endTrackingLineStyle(builder);
}
}
