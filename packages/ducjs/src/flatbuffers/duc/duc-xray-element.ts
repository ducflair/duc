// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { DucPoint } from '../duc/duc-point';
import { DucXRayStyle } from '../duc/duc-xray-style';
import { _DucElementBase } from '../duc/duc-element-base';


export class DucXRayElement {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DucXRayElement {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDucXRayElement(bb:flatbuffers.ByteBuffer, obj?:DucXRayElement):DucXRayElement {
  return (obj || new DucXRayElement()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDucXRayElement(bb:flatbuffers.ByteBuffer, obj?:DucXRayElement):DucXRayElement {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DucXRayElement()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

base(obj?:_DucElementBase):_DucElementBase|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new _DucElementBase()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

style(obj?:DucXRayStyle):DucXRayStyle|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new DucXRayStyle()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

origin(obj?:DucPoint):DucPoint|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new DucPoint()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

direction(obj?:DucPoint):DucPoint|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new DucPoint()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

startFromOrigin():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startDucXRayElement(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addBase(builder:flatbuffers.Builder, baseOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, baseOffset, 0);
}

static addStyle(builder:flatbuffers.Builder, styleOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, styleOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, originOffset, 0);
}

static addDirection(builder:flatbuffers.Builder, directionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, directionOffset, 0);
}

static addStartFromOrigin(builder:flatbuffers.Builder, startFromOrigin:boolean) {
  builder.addFieldInt8(4, +startFromOrigin, +false);
}

static endDucXRayElement(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
