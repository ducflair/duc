// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { DucXRayStyle } from '../duc/duc-xray-style';
import { Identifier } from '../duc/identifier';


export class IdentifiedXRayStyle {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):IdentifiedXRayStyle {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsIdentifiedXRayStyle(bb:flatbuffers.ByteBuffer, obj?:IdentifiedXRayStyle):IdentifiedXRayStyle {
  return (obj || new IdentifiedXRayStyle()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsIdentifiedXRayStyle(bb:flatbuffers.ByteBuffer, obj?:IdentifiedXRayStyle):IdentifiedXRayStyle {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new IdentifiedXRayStyle()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

id(obj?:Identifier):Identifier|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Identifier()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

style(obj?:DucXRayStyle):DucXRayStyle|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new DucXRayStyle()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startIdentifiedXRayStyle(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addStyle(builder:flatbuffers.Builder, styleOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, styleOffset, 0);
}

static endIdentifiedXRayStyle(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
