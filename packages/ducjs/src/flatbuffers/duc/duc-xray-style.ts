// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { _DucElementStylesBase } from '../duc/duc-element-styles-base';


export class DucXRayStyle {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DucXRayStyle {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDucXRayStyle(bb:flatbuffers.ByteBuffer, obj?:DucXRayStyle):DucXRayStyle {
  return (obj || new DucXRayStyle()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDucXRayStyle(bb:flatbuffers.ByteBuffer, obj?:DucXRayStyle):DucXRayStyle {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DucXRayStyle()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

baseStyle(obj?:_DucElementStylesBase):_DucElementStylesBase|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new _DucElementStylesBase()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

color():string|null
color(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
color(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startDucXRayStyle(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addBaseStyle(builder:flatbuffers.Builder, baseStyleOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, baseStyleOffset, 0);
}

static addColor(builder:flatbuffers.Builder, colorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, colorOffset, 0);
}

static endDucXRayStyle(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createDucXRayStyle(builder:flatbuffers.Builder, baseStyleOffset:flatbuffers.Offset, colorOffset:flatbuffers.Offset):flatbuffers.Offset {
  DucXRayStyle.startDucXRayStyle(builder);
  DucXRayStyle.addBaseStyle(builder, baseStyleOffset);
  DucXRayStyle.addColor(builder, colorOffset);
  return DucXRayStyle.endDucXRayStyle(builder);
}
}
