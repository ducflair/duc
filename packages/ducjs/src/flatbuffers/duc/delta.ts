// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { JSONPatchOperation } from '../duc/jsonpatch-operation';
import { VersionBase } from '../duc/version-base';


export class Delta {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Delta {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDelta(bb:flatbuffers.ByteBuffer, obj?:Delta):Delta {
  return (obj || new Delta()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDelta(bb:flatbuffers.ByteBuffer, obj?:Delta):Delta {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Delta()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

base(obj?:VersionBase):VersionBase|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new VersionBase()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

patch(index: number, obj?:JSONPatchOperation):JSONPatchOperation|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new JSONPatchOperation()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

patchLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startDelta(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addBase(builder:flatbuffers.Builder, baseOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, baseOffset, 0);
}

static addPatch(builder:flatbuffers.Builder, patchOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, patchOffset, 0);
}

static createPatchVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startPatchVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endDelta(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createDelta(builder:flatbuffers.Builder, baseOffset:flatbuffers.Offset, patchOffset:flatbuffers.Offset):flatbuffers.Offset {
  Delta.startDelta(builder);
  Delta.addBase(builder, baseOffset);
  Delta.addPatch(builder, patchOffset);
  return Delta.endDelta(builder);
}
}
