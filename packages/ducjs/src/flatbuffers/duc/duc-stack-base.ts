// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { DucStackLikeStyles } from '../duc/duc-stack-like-styles';


export class _DucStackBase {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):_DucStackBase {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAs_DucStackBase(bb:flatbuffers.ByteBuffer, obj?:_DucStackBase):_DucStackBase {
  return (obj || new _DucStackBase()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAs_DucStackBase(bb:flatbuffers.ByteBuffer, obj?:_DucStackBase):_DucStackBase {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new _DucStackBase()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

label():string|null
label(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
label(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

description():string|null
description(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
description(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

isCollapsed():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

isPlot():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

isVisible():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

locked():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

styles(obj?:DucStackLikeStyles):DucStackLikeStyles|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? (obj || new DucStackLikeStyles()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static start_DucStackBase(builder:flatbuffers.Builder) {
  builder.startObject(7);
}

static addLabel(builder:flatbuffers.Builder, labelOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, labelOffset, 0);
}

static addDescription(builder:flatbuffers.Builder, descriptionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, descriptionOffset, 0);
}

static addIsCollapsed(builder:flatbuffers.Builder, isCollapsed:boolean) {
  builder.addFieldInt8(2, +isCollapsed, +false);
}

static addIsPlot(builder:flatbuffers.Builder, isPlot:boolean) {
  builder.addFieldInt8(3, +isPlot, +false);
}

static addIsVisible(builder:flatbuffers.Builder, isVisible:boolean) {
  builder.addFieldInt8(4, +isVisible, +false);
}

static addLocked(builder:flatbuffers.Builder, locked:boolean) {
  builder.addFieldInt8(5, +locked, +false);
}

static addStyles(builder:flatbuffers.Builder, stylesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, stylesOffset, 0);
}

static end_DucStackBase(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
