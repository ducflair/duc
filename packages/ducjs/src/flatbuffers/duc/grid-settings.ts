// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { GRID_DISPLAY_TYPE } from '../duc/grid-display-type';
import { GRID_TYPE } from '../duc/grid-type';
import { GeometricPoint } from '../duc/geometric-point';
import { GridStyle } from '../duc/grid-style';
import { IsometricGridSettings } from '../duc/isometric-grid-settings';
import { PolarGridSettings } from '../duc/polar-grid-settings';


export class GridSettings {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):GridSettings {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGridSettings(bb:flatbuffers.ByteBuffer, obj?:GridSettings):GridSettings {
  return (obj || new GridSettings()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGridSettings(bb:flatbuffers.ByteBuffer, obj?:GridSettings):GridSettings {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GridSettings()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

type():GRID_TYPE|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : null;
}

readonly():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

displayType():GRID_DISPLAY_TYPE|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : null;
}

isAdaptive():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

xSpacing():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

ySpacing():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

subdivisions():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

origin(obj?:GeometricPoint):GeometricPoint|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? (obj || new GeometricPoint()).__init(this.bb_pos + offset, this.bb!) : null;
}

rotation():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

followUcs():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

majorStyle(obj?:GridStyle):GridStyle|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? (obj || new GridStyle()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

minorStyle(obj?:GridStyle):GridStyle|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? (obj || new GridStyle()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

showMinor():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

minZoom():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

maxZoom():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

autoHide():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

polarSettings(obj?:PolarGridSettings):PolarGridSettings|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? (obj || new PolarGridSettings()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

isometricSettings(obj?:IsometricGridSettings):IsometricGridSettings|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? (obj || new IsometricGridSettings()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

enableSnapping():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startGridSettings(builder:flatbuffers.Builder) {
  builder.startObject(19);
}

static addType(builder:flatbuffers.Builder, type:GRID_TYPE) {
  builder.addFieldInt8(0, type, null);
}

static addReadonly(builder:flatbuffers.Builder, readonly:boolean) {
  builder.addFieldInt8(1, +readonly, +false);
}

static addDisplayType(builder:flatbuffers.Builder, displayType:GRID_DISPLAY_TYPE) {
  builder.addFieldInt8(2, displayType, null);
}

static addIsAdaptive(builder:flatbuffers.Builder, isAdaptive:boolean) {
  builder.addFieldInt8(3, +isAdaptive, +false);
}

static addXSpacing(builder:flatbuffers.Builder, xSpacing:number) {
  builder.addFieldFloat64(4, xSpacing, 0.0);
}

static addYSpacing(builder:flatbuffers.Builder, ySpacing:number) {
  builder.addFieldFloat64(5, ySpacing, 0.0);
}

static addSubdivisions(builder:flatbuffers.Builder, subdivisions:number) {
  builder.addFieldInt32(6, subdivisions, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldStruct(7, originOffset, 0);
}

static addRotation(builder:flatbuffers.Builder, rotation:number) {
  builder.addFieldFloat64(8, rotation, 0.0);
}

static addFollowUcs(builder:flatbuffers.Builder, followUcs:boolean) {
  builder.addFieldInt8(9, +followUcs, +false);
}

static addMajorStyle(builder:flatbuffers.Builder, majorStyleOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, majorStyleOffset, 0);
}

static addMinorStyle(builder:flatbuffers.Builder, minorStyleOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, minorStyleOffset, 0);
}

static addShowMinor(builder:flatbuffers.Builder, showMinor:boolean) {
  builder.addFieldInt8(12, +showMinor, +false);
}

static addMinZoom(builder:flatbuffers.Builder, minZoom:number) {
  builder.addFieldFloat64(13, minZoom, 0.0);
}

static addMaxZoom(builder:flatbuffers.Builder, maxZoom:number) {
  builder.addFieldFloat64(14, maxZoom, 0.0);
}

static addAutoHide(builder:flatbuffers.Builder, autoHide:boolean) {
  builder.addFieldInt8(15, +autoHide, +false);
}

static addPolarSettings(builder:flatbuffers.Builder, polarSettingsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, polarSettingsOffset, 0);
}

static addIsometricSettings(builder:flatbuffers.Builder, isometricSettingsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, isometricSettingsOffset, 0);
}

static addEnableSnapping(builder:flatbuffers.Builder, enableSnapping:boolean) {
  builder.addFieldInt8(18, +enableSnapping, +false);
}

static endGridSettings(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
