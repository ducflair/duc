// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { FEATURE_MODIFIER } from '../duc/feature-modifier';
import { MATERIAL_CONDITION } from '../duc/material-condition';
import { TOLERANCE_ZONE_TYPE } from '../duc/tolerance-zone-type';


export class ToleranceClause {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ToleranceClause {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsToleranceClause(bb:flatbuffers.ByteBuffer, obj?:ToleranceClause):ToleranceClause {
  return (obj || new ToleranceClause()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsToleranceClause(bb:flatbuffers.ByteBuffer, obj?:ToleranceClause):ToleranceClause {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ToleranceClause()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

value():string|null
value(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
value(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

zoneType():TOLERANCE_ZONE_TYPE|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : null;
}

featureModifiers(index: number):FEATURE_MODIFIER|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

featureModifiersLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

featureModifiersArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

materialCondition():MATERIAL_CONDITION|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : null;
}

static startToleranceClause(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addValue(builder:flatbuffers.Builder, valueOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, valueOffset, 0);
}

static addZoneType(builder:flatbuffers.Builder, zoneType:TOLERANCE_ZONE_TYPE) {
  builder.addFieldInt8(1, zoneType, null);
}

static addFeatureModifiers(builder:flatbuffers.Builder, featureModifiersOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, featureModifiersOffset, 0);
}

static createFeatureModifiersVector(builder:flatbuffers.Builder, data:FEATURE_MODIFIER[]):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startFeatureModifiersVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addMaterialCondition(builder:flatbuffers.Builder, materialCondition:MATERIAL_CONDITION) {
  builder.addFieldInt8(3, materialCondition, null);
}

static endToleranceClause(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createToleranceClause(builder:flatbuffers.Builder, valueOffset:flatbuffers.Offset, zoneType:TOLERANCE_ZONE_TYPE|null, featureModifiersOffset:flatbuffers.Offset, materialCondition:MATERIAL_CONDITION|null):flatbuffers.Offset {
  ToleranceClause.startToleranceClause(builder);
  ToleranceClause.addValue(builder, valueOffset);
  if (zoneType !== null)
    ToleranceClause.addZoneType(builder, zoneType);
  ToleranceClause.addFeatureModifiers(builder, featureModifiersOffset);
  if (materialCondition !== null)
    ToleranceClause.addMaterialCondition(builder, materialCondition);
  return ToleranceClause.endToleranceClause(builder);
}
}
