// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { DucHatchStyle } from '../duc/duc-hatch-style';
import { DucImageFilter } from '../duc/duc-image-filter';
import { ELEMENT_CONTENT_PREFERENCE } from '../duc/element-content-preference';
import { TilingProperties } from '../duc/tiling-properties';


export class ElementContentBase {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ElementContentBase {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsElementContentBase(bb:flatbuffers.ByteBuffer, obj?:ElementContentBase):ElementContentBase {
  return (obj || new ElementContentBase()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsElementContentBase(bb:flatbuffers.ByteBuffer, obj?:ElementContentBase):ElementContentBase {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ElementContentBase()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

preference():ELEMENT_CONTENT_PREFERENCE|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : null;
}

src():string|null
src(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
src(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

visible():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

opacity():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

tiling(obj?:TilingProperties):TilingProperties|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new TilingProperties()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

hatch(obj?:DucHatchStyle):DucHatchStyle|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new DucHatchStyle()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

imageFilter(obj?:DucImageFilter):DucImageFilter|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? (obj || new DucImageFilter()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startElementContentBase(builder:flatbuffers.Builder) {
  builder.startObject(7);
}

static addPreference(builder:flatbuffers.Builder, preference:ELEMENT_CONTENT_PREFERENCE) {
  builder.addFieldInt8(0, preference, null);
}

static addSrc(builder:flatbuffers.Builder, srcOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, srcOffset, 0);
}

static addVisible(builder:flatbuffers.Builder, visible:boolean) {
  builder.addFieldInt8(2, +visible, +false);
}

static addOpacity(builder:flatbuffers.Builder, opacity:number) {
  builder.addFieldFloat64(3, opacity, 0.0);
}

static addTiling(builder:flatbuffers.Builder, tilingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, tilingOffset, 0);
}

static addHatch(builder:flatbuffers.Builder, hatchOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, hatchOffset, 0);
}

static addImageFilter(builder:flatbuffers.Builder, imageFilterOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, imageFilterOffset, 0);
}

static endElementContentBase(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
