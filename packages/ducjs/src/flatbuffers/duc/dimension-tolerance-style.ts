// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { DucTextStyle } from '../duc/duc-text-style';
import { TOLERANCE_DISPLAY } from '../duc/tolerance-display';


export class DimensionToleranceStyle {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DimensionToleranceStyle {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDimensionToleranceStyle(bb:flatbuffers.ByteBuffer, obj?:DimensionToleranceStyle):DimensionToleranceStyle {
  return (obj || new DimensionToleranceStyle()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDimensionToleranceStyle(bb:flatbuffers.ByteBuffer, obj?:DimensionToleranceStyle):DimensionToleranceStyle {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DimensionToleranceStyle()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

enabled():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

displayMethod():TOLERANCE_DISPLAY|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : null;
}

upperValue():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

lowerValue():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

precision():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

textStyle(obj?:DucTextStyle):DucTextStyle|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new DucTextStyle()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startDimensionToleranceStyle(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addEnabled(builder:flatbuffers.Builder, enabled:boolean) {
  builder.addFieldInt8(0, +enabled, +false);
}

static addDisplayMethod(builder:flatbuffers.Builder, displayMethod:TOLERANCE_DISPLAY) {
  builder.addFieldInt8(1, displayMethod, null);
}

static addUpperValue(builder:flatbuffers.Builder, upperValue:number) {
  builder.addFieldFloat64(2, upperValue, 0.0);
}

static addLowerValue(builder:flatbuffers.Builder, lowerValue:number) {
  builder.addFieldFloat64(3, lowerValue, 0.0);
}

static addPrecision(builder:flatbuffers.Builder, precision:number) {
  builder.addFieldInt32(4, precision, 0);
}

static addTextStyle(builder:flatbuffers.Builder, textStyleOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, textStyleOffset, 0);
}

static endDimensionToleranceStyle(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
