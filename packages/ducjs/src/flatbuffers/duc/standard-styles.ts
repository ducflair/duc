// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { IdentifiedCommonStyle } from '../duc/identified-common-style';
import { IdentifiedDimensionStyle } from '../duc/identified-dimension-style';
import { IdentifiedDocStyle } from '../duc/identified-doc-style';
import { IdentifiedFCFStyle } from '../duc/identified-fcfstyle';
import { IdentifiedHatchStyle } from '../duc/identified-hatch-style';
import { IdentifiedLeaderStyle } from '../duc/identified-leader-style';
import { IdentifiedStackLikeStyle } from '../duc/identified-stack-like-style';
import { IdentifiedTableStyle } from '../duc/identified-table-style';
import { IdentifiedTextStyle } from '../duc/identified-text-style';
import { IdentifiedViewportStyle } from '../duc/identified-viewport-style';
import { IdentifiedXRayStyle } from '../duc/identified-xray-style';


export class StandardStyles {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):StandardStyles {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsStandardStyles(bb:flatbuffers.ByteBuffer, obj?:StandardStyles):StandardStyles {
  return (obj || new StandardStyles()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsStandardStyles(bb:flatbuffers.ByteBuffer, obj?:StandardStyles):StandardStyles {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new StandardStyles()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

commonStyles(index: number, obj?:IdentifiedCommonStyle):IdentifiedCommonStyle|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new IdentifiedCommonStyle()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

commonStylesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

stackLikeStyles(index: number, obj?:IdentifiedStackLikeStyle):IdentifiedStackLikeStyle|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new IdentifiedStackLikeStyle()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

stackLikeStylesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

textStyles(index: number, obj?:IdentifiedTextStyle):IdentifiedTextStyle|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new IdentifiedTextStyle()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

textStylesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

dimensionStyles(index: number, obj?:IdentifiedDimensionStyle):IdentifiedDimensionStyle|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new IdentifiedDimensionStyle()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

dimensionStylesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

leaderStyles(index: number, obj?:IdentifiedLeaderStyle):IdentifiedLeaderStyle|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new IdentifiedLeaderStyle()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

leaderStylesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

featureControlFrameStyles(index: number, obj?:IdentifiedFCFStyle):IdentifiedFCFStyle|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new IdentifiedFCFStyle()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

featureControlFrameStylesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

tableStyles(index: number, obj?:IdentifiedTableStyle):IdentifiedTableStyle|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? (obj || new IdentifiedTableStyle()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

tableStylesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

docStyles(index: number, obj?:IdentifiedDocStyle):IdentifiedDocStyle|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? (obj || new IdentifiedDocStyle()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

docStylesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

viewportStyles(index: number, obj?:IdentifiedViewportStyle):IdentifiedViewportStyle|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? (obj || new IdentifiedViewportStyle()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

viewportStylesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

hatchStyles(index: number, obj?:IdentifiedHatchStyle):IdentifiedHatchStyle|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? (obj || new IdentifiedHatchStyle()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

hatchStylesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

xrayStyles(index: number, obj?:IdentifiedXRayStyle):IdentifiedXRayStyle|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? (obj || new IdentifiedXRayStyle()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

xrayStylesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startStandardStyles(builder:flatbuffers.Builder) {
  builder.startObject(11);
}

static addCommonStyles(builder:flatbuffers.Builder, commonStylesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, commonStylesOffset, 0);
}

static createCommonStylesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startCommonStylesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addStackLikeStyles(builder:flatbuffers.Builder, stackLikeStylesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, stackLikeStylesOffset, 0);
}

static createStackLikeStylesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startStackLikeStylesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addTextStyles(builder:flatbuffers.Builder, textStylesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, textStylesOffset, 0);
}

static createTextStylesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTextStylesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addDimensionStyles(builder:flatbuffers.Builder, dimensionStylesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, dimensionStylesOffset, 0);
}

static createDimensionStylesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startDimensionStylesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addLeaderStyles(builder:flatbuffers.Builder, leaderStylesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, leaderStylesOffset, 0);
}

static createLeaderStylesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startLeaderStylesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addFeatureControlFrameStyles(builder:flatbuffers.Builder, featureControlFrameStylesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, featureControlFrameStylesOffset, 0);
}

static createFeatureControlFrameStylesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startFeatureControlFrameStylesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addTableStyles(builder:flatbuffers.Builder, tableStylesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, tableStylesOffset, 0);
}

static createTableStylesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTableStylesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addDocStyles(builder:flatbuffers.Builder, docStylesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, docStylesOffset, 0);
}

static createDocStylesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startDocStylesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addViewportStyles(builder:flatbuffers.Builder, viewportStylesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, viewportStylesOffset, 0);
}

static createViewportStylesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startViewportStylesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addHatchStyles(builder:flatbuffers.Builder, hatchStylesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, hatchStylesOffset, 0);
}

static createHatchStylesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startHatchStylesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addXrayStyles(builder:flatbuffers.Builder, xrayStylesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, xrayStylesOffset, 0);
}

static createXrayStylesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startXrayStylesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endStandardStyles(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createStandardStyles(builder:flatbuffers.Builder, commonStylesOffset:flatbuffers.Offset, stackLikeStylesOffset:flatbuffers.Offset, textStylesOffset:flatbuffers.Offset, dimensionStylesOffset:flatbuffers.Offset, leaderStylesOffset:flatbuffers.Offset, featureControlFrameStylesOffset:flatbuffers.Offset, tableStylesOffset:flatbuffers.Offset, docStylesOffset:flatbuffers.Offset, viewportStylesOffset:flatbuffers.Offset, hatchStylesOffset:flatbuffers.Offset, xrayStylesOffset:flatbuffers.Offset):flatbuffers.Offset {
  StandardStyles.startStandardStyles(builder);
  StandardStyles.addCommonStyles(builder, commonStylesOffset);
  StandardStyles.addStackLikeStyles(builder, stackLikeStylesOffset);
  StandardStyles.addTextStyles(builder, textStylesOffset);
  StandardStyles.addDimensionStyles(builder, dimensionStylesOffset);
  StandardStyles.addLeaderStyles(builder, leaderStylesOffset);
  StandardStyles.addFeatureControlFrameStyles(builder, featureControlFrameStylesOffset);
  StandardStyles.addTableStyles(builder, tableStylesOffset);
  StandardStyles.addDocStyles(builder, docStylesOffset);
  StandardStyles.addViewportStyles(builder, viewportStylesOffset);
  StandardStyles.addHatchStyles(builder, hatchStylesOffset);
  StandardStyles.addXrayStyles(builder, xrayStylesOffset);
  return StandardStyles.endStandardStyles(builder);
}
}
