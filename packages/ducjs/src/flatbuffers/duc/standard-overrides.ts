// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { UnitPrecision } from '../duc/unit-precision';


export class StandardOverrides {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):StandardOverrides {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsStandardOverrides(bb:flatbuffers.ByteBuffer, obj?:StandardOverrides):StandardOverrides {
  return (obj || new StandardOverrides()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsStandardOverrides(bb:flatbuffers.ByteBuffer, obj?:StandardOverrides):StandardOverrides {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new StandardOverrides()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

mainScope():string|null
mainScope(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
mainScope(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

elementsStrokeWidthOverride():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

commonStyleId():string|null
commonStyleId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
commonStyleId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

stackLikeStyleId():string|null
stackLikeStyleId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
stackLikeStyleId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

textStyleId():string|null
textStyleId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
textStyleId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

dimensionStyleId():string|null
dimensionStyleId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
dimensionStyleId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

leaderStyleId():string|null
leaderStyleId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
leaderStyleId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

featureControlFrameStyleId():string|null
featureControlFrameStyleId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
featureControlFrameStyleId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

tableStyleId():string|null
tableStyleId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
tableStyleId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

docStyleId():string|null
docStyleId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
docStyleId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

viewportStyleId():string|null
viewportStyleId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
viewportStyleId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

plotStyleId():string|null
plotStyleId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
plotStyleId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

hatchStyleId():string|null
hatchStyleId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
hatchStyleId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

activeGridSettingsId(index: number):string
activeGridSettingsId(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
activeGridSettingsId(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

activeGridSettingsIdLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

activeSnapSettingsId():string|null
activeSnapSettingsId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
activeSnapSettingsId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

dashLineOverride():string|null
dashLineOverride(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
dashLineOverride(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

unitPrecision(obj?:UnitPrecision):UnitPrecision|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? (obj || new UnitPrecision()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startStandardOverrides(builder:flatbuffers.Builder) {
  builder.startObject(17);
}

static addMainScope(builder:flatbuffers.Builder, mainScopeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, mainScopeOffset, 0);
}

static addElementsStrokeWidthOverride(builder:flatbuffers.Builder, elementsStrokeWidthOverride:number) {
  builder.addFieldFloat64(1, elementsStrokeWidthOverride, 0.0);
}

static addCommonStyleId(builder:flatbuffers.Builder, commonStyleIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, commonStyleIdOffset, 0);
}

static addStackLikeStyleId(builder:flatbuffers.Builder, stackLikeStyleIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, stackLikeStyleIdOffset, 0);
}

static addTextStyleId(builder:flatbuffers.Builder, textStyleIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, textStyleIdOffset, 0);
}

static addDimensionStyleId(builder:flatbuffers.Builder, dimensionStyleIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, dimensionStyleIdOffset, 0);
}

static addLeaderStyleId(builder:flatbuffers.Builder, leaderStyleIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, leaderStyleIdOffset, 0);
}

static addFeatureControlFrameStyleId(builder:flatbuffers.Builder, featureControlFrameStyleIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, featureControlFrameStyleIdOffset, 0);
}

static addTableStyleId(builder:flatbuffers.Builder, tableStyleIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, tableStyleIdOffset, 0);
}

static addDocStyleId(builder:flatbuffers.Builder, docStyleIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, docStyleIdOffset, 0);
}

static addViewportStyleId(builder:flatbuffers.Builder, viewportStyleIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, viewportStyleIdOffset, 0);
}

static addPlotStyleId(builder:flatbuffers.Builder, plotStyleIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, plotStyleIdOffset, 0);
}

static addHatchStyleId(builder:flatbuffers.Builder, hatchStyleIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, hatchStyleIdOffset, 0);
}

static addActiveGridSettingsId(builder:flatbuffers.Builder, activeGridSettingsIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, activeGridSettingsIdOffset, 0);
}

static createActiveGridSettingsIdVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startActiveGridSettingsIdVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addActiveSnapSettingsId(builder:flatbuffers.Builder, activeSnapSettingsIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, activeSnapSettingsIdOffset, 0);
}

static addDashLineOverride(builder:flatbuffers.Builder, dashLineOverrideOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, dashLineOverrideOffset, 0);
}

static addUnitPrecision(builder:flatbuffers.Builder, unitPrecisionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, unitPrecisionOffset, 0);
}

static endStandardOverrides(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
