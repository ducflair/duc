// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class DucImageFilter {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DucImageFilter {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDucImageFilter(bb:flatbuffers.ByteBuffer, obj?:DucImageFilter):DucImageFilter {
  return (obj || new DucImageFilter()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDucImageFilter(bb:flatbuffers.ByteBuffer, obj?:DucImageFilter):DucImageFilter {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DucImageFilter()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

brightness():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

contrast():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

static startDucImageFilter(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addBrightness(builder:flatbuffers.Builder, brightness:number) {
  builder.addFieldFloat32(0, brightness, 0.0);
}

static addContrast(builder:flatbuffers.Builder, contrast:number) {
  builder.addFieldFloat32(1, contrast, 0.0);
}

static endDucImageFilter(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createDucImageFilter(builder:flatbuffers.Builder, brightness:number, contrast:number):flatbuffers.Offset {
  DucImageFilter.startDucImageFilter(builder);
  DucImageFilter.addBrightness(builder, brightness);
  DucImageFilter.addContrast(builder, contrast);
  return DucImageFilter.endDucImageFilter(builder);
}
}
