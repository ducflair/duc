// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class ImageCrop {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ImageCrop {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsImageCrop(bb:flatbuffers.ByteBuffer, obj?:ImageCrop):ImageCrop {
  return (obj || new ImageCrop()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsImageCrop(bb:flatbuffers.ByteBuffer, obj?:ImageCrop):ImageCrop {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ImageCrop()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

x():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

y():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

width():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

height():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

naturalWidth():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

naturalHeight():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

static startImageCrop(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addX(builder:flatbuffers.Builder, x:number) {
  builder.addFieldFloat64(0, x, 0.0);
}

static addY(builder:flatbuffers.Builder, y:number) {
  builder.addFieldFloat64(1, y, 0.0);
}

static addWidth(builder:flatbuffers.Builder, width:number) {
  builder.addFieldFloat64(2, width, 0.0);
}

static addHeight(builder:flatbuffers.Builder, height:number) {
  builder.addFieldFloat64(3, height, 0.0);
}

static addNaturalWidth(builder:flatbuffers.Builder, naturalWidth:number) {
  builder.addFieldFloat64(4, naturalWidth, 0.0);
}

static addNaturalHeight(builder:flatbuffers.Builder, naturalHeight:number) {
  builder.addFieldFloat64(5, naturalHeight, 0.0);
}

static endImageCrop(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createImageCrop(builder:flatbuffers.Builder, x:number, y:number, width:number, height:number, naturalWidth:number, naturalHeight:number):flatbuffers.Offset {
  ImageCrop.startImageCrop(builder);
  ImageCrop.addX(builder, x);
  ImageCrop.addY(builder, y);
  ImageCrop.addWidth(builder, width);
  ImageCrop.addHeight(builder, height);
  ImageCrop.addNaturalWidth(builder, naturalWidth);
  ImageCrop.addNaturalHeight(builder, naturalHeight);
  return ImageCrop.endImageCrop(builder);
}
}
