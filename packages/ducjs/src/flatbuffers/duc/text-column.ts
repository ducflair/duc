// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class TextColumn {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):TextColumn {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsTextColumn(bb:flatbuffers.ByteBuffer, obj?:TextColumn):TextColumn {
  return (obj || new TextColumn()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsTextColumn(bb:flatbuffers.ByteBuffer, obj?:TextColumn):TextColumn {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new TextColumn()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

width():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

gutter():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

static startTextColumn(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addWidth(builder:flatbuffers.Builder, width:number) {
  builder.addFieldFloat64(0, width, 0.0);
}

static addGutter(builder:flatbuffers.Builder, gutter:number) {
  builder.addFieldFloat64(1, gutter, 0.0);
}

static endTextColumn(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createTextColumn(builder:flatbuffers.Builder, width:number, gutter:number):flatbuffers.Offset {
  TextColumn.startTextColumn(builder);
  TextColumn.addWidth(builder, width);
  TextColumn.addGutter(builder, gutter);
  return TextColumn.endTextColumn(builder);
}
}
