// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { DIMENSION_FIT_RULE } from '../duc/dimension-fit-rule';
import { DIMENSION_TEXT_PLACEMENT } from '../duc/dimension-text-placement';


export class DimensionFitStyle {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DimensionFitStyle {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDimensionFitStyle(bb:flatbuffers.ByteBuffer, obj?:DimensionFitStyle):DimensionFitStyle {
  return (obj || new DimensionFitStyle()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDimensionFitStyle(bb:flatbuffers.ByteBuffer, obj?:DimensionFitStyle):DimensionFitStyle {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DimensionFitStyle()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

rule():DIMENSION_FIT_RULE|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : null;
}

textPlacement():DIMENSION_TEXT_PLACEMENT|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : null;
}

forceTextInside():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startDimensionFitStyle(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addRule(builder:flatbuffers.Builder, rule:DIMENSION_FIT_RULE) {
  builder.addFieldInt8(0, rule, null);
}

static addTextPlacement(builder:flatbuffers.Builder, textPlacement:DIMENSION_TEXT_PLACEMENT) {
  builder.addFieldInt8(1, textPlacement, null);
}

static addForceTextInside(builder:flatbuffers.Builder, forceTextInside:boolean) {
  builder.addFieldInt8(2, +forceTextInside, +false);
}

static endDimensionFitStyle(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createDimensionFitStyle(builder:flatbuffers.Builder, rule:DIMENSION_FIT_RULE|null, textPlacement:DIMENSION_TEXT_PLACEMENT|null, forceTextInside:boolean):flatbuffers.Offset {
  DimensionFitStyle.startDimensionFitStyle(builder);
  if (rule !== null)
    DimensionFitStyle.addRule(builder, rule);
  if (textPlacement !== null)
    DimensionFitStyle.addTextPlacement(builder, textPlacement);
  DimensionFitStyle.addForceTextInside(builder, forceTextInside);
  return DimensionFitStyle.endDimensionFitStyle(builder);
}
}
