// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class DucGlobalState {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DucGlobalState {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDucGlobalState(bb:flatbuffers.ByteBuffer, obj?:DucGlobalState):DucGlobalState {
  return (obj || new DucGlobalState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDucGlobalState(bb:flatbuffers.ByteBuffer, obj?:DucGlobalState):DucGlobalState {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DucGlobalState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

viewBackgroundColor():string|null
viewBackgroundColor(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
viewBackgroundColor(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

mainScope():string|null
mainScope(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
mainScope(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

dashSpacingScale():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

isDashSpacingAffectedByViewportScale():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

scopeExponentThreshold():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : 0;
}

dimensionsAssociativeByDefault():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

useAnnotativeScaling():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

displayPrecisionLinear():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

displayPrecisionAngular():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startDucGlobalState(builder:flatbuffers.Builder) {
  builder.startObject(10);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, nameOffset, 0);
}

static addViewBackgroundColor(builder:flatbuffers.Builder, viewBackgroundColorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, viewBackgroundColorOffset, 0);
}

static addMainScope(builder:flatbuffers.Builder, mainScopeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, mainScopeOffset, 0);
}

static addDashSpacingScale(builder:flatbuffers.Builder, dashSpacingScale:number) {
  builder.addFieldFloat32(3, dashSpacingScale, 0.0);
}

static addIsDashSpacingAffectedByViewportScale(builder:flatbuffers.Builder, isDashSpacingAffectedByViewportScale:boolean) {
  builder.addFieldInt8(4, +isDashSpacingAffectedByViewportScale, +false);
}

static addScopeExponentThreshold(builder:flatbuffers.Builder, scopeExponentThreshold:number) {
  builder.addFieldInt8(5, scopeExponentThreshold, 0);
}

static addDimensionsAssociativeByDefault(builder:flatbuffers.Builder, dimensionsAssociativeByDefault:boolean) {
  builder.addFieldInt8(6, +dimensionsAssociativeByDefault, +false);
}

static addUseAnnotativeScaling(builder:flatbuffers.Builder, useAnnotativeScaling:boolean) {
  builder.addFieldInt8(7, +useAnnotativeScaling, +false);
}

static addDisplayPrecisionLinear(builder:flatbuffers.Builder, displayPrecisionLinear:number) {
  builder.addFieldInt32(8, displayPrecisionLinear, 0);
}

static addDisplayPrecisionAngular(builder:flatbuffers.Builder, displayPrecisionAngular:number) {
  builder.addFieldInt32(9, displayPrecisionAngular, 0);
}

static endDucGlobalState(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createDucGlobalState(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset, viewBackgroundColorOffset:flatbuffers.Offset, mainScopeOffset:flatbuffers.Offset, dashSpacingScale:number, isDashSpacingAffectedByViewportScale:boolean, scopeExponentThreshold:number, dimensionsAssociativeByDefault:boolean, useAnnotativeScaling:boolean, displayPrecisionLinear:number, displayPrecisionAngular:number):flatbuffers.Offset {
  DucGlobalState.startDucGlobalState(builder);
  DucGlobalState.addName(builder, nameOffset);
  DucGlobalState.addViewBackgroundColor(builder, viewBackgroundColorOffset);
  DucGlobalState.addMainScope(builder, mainScopeOffset);
  DucGlobalState.addDashSpacingScale(builder, dashSpacingScale);
  DucGlobalState.addIsDashSpacingAffectedByViewportScale(builder, isDashSpacingAffectedByViewportScale);
  DucGlobalState.addScopeExponentThreshold(builder, scopeExponentThreshold);
  DucGlobalState.addDimensionsAssociativeByDefault(builder, dimensionsAssociativeByDefault);
  DucGlobalState.addUseAnnotativeScaling(builder, useAnnotativeScaling);
  DucGlobalState.addDisplayPrecisionLinear(builder, displayPrecisionLinear);
  DucGlobalState.addDisplayPrecisionAngular(builder, displayPrecisionAngular);
  return DucGlobalState.endDucGlobalState(builder);
}
}
