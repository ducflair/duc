// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { StackFormatProperties } from '../duc/stack-format-properties';


export class StackFormat {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):StackFormat {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsStackFormat(bb:flatbuffers.ByteBuffer, obj?:StackFormat):StackFormat {
  return (obj || new StackFormat()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsStackFormat(bb:flatbuffers.ByteBuffer, obj?:StackFormat):StackFormat {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new StackFormat()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

autoStack():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

stackChars(index: number):string
stackChars(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
stackChars(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

stackCharsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

properties(obj?:StackFormatProperties):StackFormatProperties|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new StackFormatProperties()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startStackFormat(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addAutoStack(builder:flatbuffers.Builder, autoStack:boolean) {
  builder.addFieldInt8(0, +autoStack, +false);
}

static addStackChars(builder:flatbuffers.Builder, stackCharsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, stackCharsOffset, 0);
}

static createStackCharsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startStackCharsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addProperties(builder:flatbuffers.Builder, propertiesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, propertiesOffset, 0);
}

static endStackFormat(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
