// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { BEZIER_MIRRORING } from '../duc/bezier-mirroring';


export class DucPoint {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DucPoint {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDucPoint(bb:flatbuffers.ByteBuffer, obj?:DucPoint):DucPoint {
  return (obj || new DucPoint()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDucPoint(bb:flatbuffers.ByteBuffer, obj?:DucPoint):DucPoint {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DucPoint()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

x():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

y():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

mirroring():BEZIER_MIRRORING|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : null;
}

static startDucPoint(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addX(builder:flatbuffers.Builder, x:number) {
  builder.addFieldFloat64(0, x, 0.0);
}

static addY(builder:flatbuffers.Builder, y:number) {
  builder.addFieldFloat64(1, y, 0.0);
}

static addMirroring(builder:flatbuffers.Builder, mirroring:BEZIER_MIRRORING) {
  builder.addFieldInt8(2, mirroring, null);
}

static endDucPoint(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createDucPoint(builder:flatbuffers.Builder, x:number, y:number, mirroring:BEZIER_MIRRORING|null):flatbuffers.Offset {
  DucPoint.startDucPoint(builder);
  DucPoint.addX(builder, x);
  DucPoint.addY(builder, y);
  if (mirroring !== null)
    DucPoint.addMirroring(builder, mirroring);
  return DucPoint.endDucPoint(builder);
}
}
