// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { DictionaryEntry } from '../duc/dictionary-entry';
import { DucBlock } from '../duc/duc-block';
import { DucExternalFileEntry } from '../duc/duc-external-file-entry';
import { DucGlobalState } from '../duc/duc-global-state';
import { DucGroup } from '../duc/duc-group';
import { DucLayer } from '../duc/duc-layer';
import { DucLocalState } from '../duc/duc-local-state';
import { DucRegion } from '../duc/duc-region';
import { ElementWrapper } from '../duc/element-wrapper';
import { Standard } from '../duc/standard';
import { VersionGraph } from '../duc/version-graph';


export class ExportedDataState {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ExportedDataState {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsExportedDataState(bb:flatbuffers.ByteBuffer, obj?:ExportedDataState):ExportedDataState {
  return (obj || new ExportedDataState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsExportedDataState(bb:flatbuffers.ByteBuffer, obj?:ExportedDataState):ExportedDataState {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ExportedDataState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('DUC_');
}

type():string|null
type(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
type(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

version():string|null
version(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
version(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

thumbnail(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

thumbnailLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

thumbnailArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

dictionary(index: number, obj?:DictionaryEntry):DictionaryEntry|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new DictionaryEntry()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

dictionaryLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

elements(index: number, obj?:ElementWrapper):ElementWrapper|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? (obj || new ElementWrapper()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

elementsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

blocks(index: number, obj?:DucBlock):DucBlock|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? (obj || new DucBlock()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

blocksLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

groups(index: number, obj?:DucGroup):DucGroup|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? (obj || new DucGroup()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

groupsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

regions(index: number, obj?:DucRegion):DucRegion|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? (obj || new DucRegion()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

regionsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

layers(index: number, obj?:DucLayer):DucLayer|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? (obj || new DucLayer()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

layersLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

standards(index: number, obj?:Standard):Standard|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? (obj || new Standard()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

standardsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

ducLocalState(obj?:DucLocalState):DucLocalState|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? (obj || new DucLocalState()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

ducGlobalState(obj?:DucGlobalState):DucGlobalState|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? (obj || new DucGlobalState()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

files(index: number, obj?:DucExternalFileEntry):DucExternalFileEntry|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? (obj || new DucExternalFileEntry()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

filesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

versionGraph(obj?:VersionGraph):VersionGraph|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? (obj || new VersionGraph()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startExportedDataState(builder:flatbuffers.Builder) {
  builder.startObject(16);
}

static addType(builder:flatbuffers.Builder, typeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, typeOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, sourceOffset, 0);
}

static addVersion(builder:flatbuffers.Builder, versionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, versionOffset, 0);
}

static addThumbnail(builder:flatbuffers.Builder, thumbnailOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, thumbnailOffset, 0);
}

static createThumbnailVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startThumbnailVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addDictionary(builder:flatbuffers.Builder, dictionaryOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, dictionaryOffset, 0);
}

static createDictionaryVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startDictionaryVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addElements(builder:flatbuffers.Builder, elementsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, elementsOffset, 0);
}

static createElementsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startElementsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addBlocks(builder:flatbuffers.Builder, blocksOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, blocksOffset, 0);
}

static createBlocksVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startBlocksVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addGroups(builder:flatbuffers.Builder, groupsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, groupsOffset, 0);
}

static createGroupsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startGroupsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addRegions(builder:flatbuffers.Builder, regionsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, regionsOffset, 0);
}

static createRegionsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startRegionsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addLayers(builder:flatbuffers.Builder, layersOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, layersOffset, 0);
}

static createLayersVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startLayersVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addStandards(builder:flatbuffers.Builder, standardsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, standardsOffset, 0);
}

static createStandardsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startStandardsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addDucLocalState(builder:flatbuffers.Builder, ducLocalStateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, ducLocalStateOffset, 0);
}

static addDucGlobalState(builder:flatbuffers.Builder, ducGlobalStateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, ducGlobalStateOffset, 0);
}

static addFiles(builder:flatbuffers.Builder, filesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, filesOffset, 0);
}

static createFilesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startFilesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addVersionGraph(builder:flatbuffers.Builder, versionGraphOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, versionGraphOffset, 0);
}

static endExportedDataState(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishExportedDataStateBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'DUC_');
}

static finishSizePrefixedExportedDataStateBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'DUC_', true);
}

}
