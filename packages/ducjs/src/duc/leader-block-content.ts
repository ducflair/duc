// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { StringValueEntry } from '../duc/string-value-entry';


export class LeaderBlockContent {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):LeaderBlockContent {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsLeaderBlockContent(bb:flatbuffers.ByteBuffer, obj?:LeaderBlockContent):LeaderBlockContent {
  return (obj || new LeaderBlockContent()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsLeaderBlockContent(bb:flatbuffers.ByteBuffer, obj?:LeaderBlockContent):LeaderBlockContent {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new LeaderBlockContent()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

blockId():string|null
blockId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
blockId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

attributeValues(index: number, obj?:StringValueEntry):StringValueEntry|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new StringValueEntry()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

attributeValuesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

elementOverrides(index: number, obj?:StringValueEntry):StringValueEntry|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new StringValueEntry()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

elementOverridesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startLeaderBlockContent(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addBlockId(builder:flatbuffers.Builder, blockIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, blockIdOffset, 0);
}

static addAttributeValues(builder:flatbuffers.Builder, attributeValuesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, attributeValuesOffset, 0);
}

static createAttributeValuesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startAttributeValuesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addElementOverrides(builder:flatbuffers.Builder, elementOverridesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, elementOverridesOffset, 0);
}

static createElementOverridesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startElementOverridesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endLeaderBlockContent(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createLeaderBlockContent(builder:flatbuffers.Builder, blockIdOffset:flatbuffers.Offset, attributeValuesOffset:flatbuffers.Offset, elementOverridesOffset:flatbuffers.Offset):flatbuffers.Offset {
  LeaderBlockContent.startLeaderBlockContent(builder);
  LeaderBlockContent.addBlockId(builder, blockIdOffset);
  LeaderBlockContent.addAttributeValues(builder, attributeValuesOffset);
  LeaderBlockContent.addElementOverrides(builder, elementOverridesOffset);
  return LeaderBlockContent.endLeaderBlockContent(builder);
}
}
