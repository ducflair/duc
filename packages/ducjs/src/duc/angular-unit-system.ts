// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { ANGULAR_UNITS_FORMAT } from '../duc/angular-units-format';
import { _UnitSystemBase } from '../duc/unit-system-base';


export class AngularUnitSystem {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):AngularUnitSystem {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsAngularUnitSystem(bb:flatbuffers.ByteBuffer, obj?:AngularUnitSystem):AngularUnitSystem {
  return (obj || new AngularUnitSystem()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsAngularUnitSystem(bb:flatbuffers.ByteBuffer, obj?:AngularUnitSystem):AngularUnitSystem {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new AngularUnitSystem()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

base(obj?:_UnitSystemBase):_UnitSystemBase|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new _UnitSystemBase()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

format():ANGULAR_UNITS_FORMAT|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : null;
}

static startAngularUnitSystem(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addBase(builder:flatbuffers.Builder, baseOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, baseOffset, 0);
}

static addFormat(builder:flatbuffers.Builder, format:ANGULAR_UNITS_FORMAT) {
  builder.addFieldInt8(1, format, null);
}

static endAngularUnitSystem(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createAngularUnitSystem(builder:flatbuffers.Builder, baseOffset:flatbuffers.Offset, format:ANGULAR_UNITS_FORMAT|null):flatbuffers.Offset {
  AngularUnitSystem.startAngularUnitSystem(builder);
  AngularUnitSystem.addBase(builder, baseOffset);
  if (format !== null)
    AngularUnitSystem.addFormat(builder, format);
  return AngularUnitSystem.endAngularUnitSystem(builder);
}
}
