// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { DucTextDynamicSource } from '../duc/duc-text-dynamic-source';
import { PrimaryUnits } from '../duc/primary-units';


export class DucTextDynamicPart {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DucTextDynamicPart {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDucTextDynamicPart(bb:flatbuffers.ByteBuffer, obj?:DucTextDynamicPart):DucTextDynamicPart {
  return (obj || new DucTextDynamicPart()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDucTextDynamicPart(bb:flatbuffers.ByteBuffer, obj?:DucTextDynamicPart):DucTextDynamicPart {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DucTextDynamicPart()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

tag():string|null
tag(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
tag(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

source(obj?:DucTextDynamicSource):DucTextDynamicSource|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new DucTextDynamicSource()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

formatting(obj?:PrimaryUnits):PrimaryUnits|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new PrimaryUnits()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

cachedValue():string|null
cachedValue(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
cachedValue(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startDucTextDynamicPart(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addTag(builder:flatbuffers.Builder, tagOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, tagOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, sourceOffset, 0);
}

static addFormatting(builder:flatbuffers.Builder, formattingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, formattingOffset, 0);
}

static addCachedValue(builder:flatbuffers.Builder, cachedValueOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, cachedValueOffset, 0);
}

static endDucTextDynamicPart(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
