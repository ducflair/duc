// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class Point {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Point {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPoint(bb:flatbuffers.ByteBuffer, obj?:Point):Point {
  return (obj || new Point()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPoint(bb:flatbuffers.ByteBuffer, obj?:Point):Point {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Point()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

xV2():number|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : null;
}

yV2():number|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : null;
}

mirroring():number|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : null;
}

xV3():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

yV3():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

static startPoint(builder:flatbuffers.Builder) {
  builder.startObject(11);
}

static addXV2(builder:flatbuffers.Builder, xV2:number) {
  builder.addFieldFloat32(0, xV2, null);
}

static addYV2(builder:flatbuffers.Builder, yV2:number) {
  builder.addFieldFloat32(1, yV2, null);
}

static addMirroring(builder:flatbuffers.Builder, mirroring:number) {
  builder.addFieldInt8(3, mirroring, null);
}

static addXV3(builder:flatbuffers.Builder, xV3:number) {
  builder.addFieldFloat64(7, xV3, 0.0);
}

static addYV3(builder:flatbuffers.Builder, yV3:number) {
  builder.addFieldFloat64(8, yV3, 0.0);
}

static endPoint(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
