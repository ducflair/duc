// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import { DucArrowElement } from '../duc/duc-arrow-element';
import { DucBlockInstanceElement } from '../duc/duc-block-instance-element';
import { DucDimensionElement } from '../duc/duc-dimension-element';
import { DucDocElement } from '../duc/duc-doc-element';
import { DucEllipseElement } from '../duc/duc-ellipse-element';
import { DucEmbeddableElement } from '../duc/duc-embeddable-element';
import { DucFeatureControlFrameElement } from '../duc/duc-feature-control-frame-element';
import { DucFrameElement } from '../duc/duc-frame-element';
import { DucFreeDrawElement } from '../duc/duc-free-draw-element';
import { DucImageElement } from '../duc/duc-image-element';
import { DucLeaderElement } from '../duc/duc-leader-element';
import { DucLinearElement } from '../duc/duc-linear-element';
import { DucMermaidElement } from '../duc/duc-mermaid-element';
import { DucParametricElement } from '../duc/duc-parametric-element';
import { DucPlotElement } from '../duc/duc-plot-element';
import { DucPolygonElement } from '../duc/duc-polygon-element';
import { DucRectangleElement } from '../duc/duc-rectangle-element';
import { DucTableElement } from '../duc/duc-table-element';
import { DucTextElement } from '../duc/duc-text-element';
import { DucViewportElement } from '../duc/duc-viewport-element';
import { DucXRayElement } from '../duc/duc-xray-element';


/**
 * A union of all possible scene elements.
 */
export enum Element {
  NONE = 0,
  DucRectangleElement = 1,
  DucPolygonElement = 2,
  DucEllipseElement = 3,
  DucEmbeddableElement = 4,
  DucMermaidElement = 5,
  DucTableElement = 6,
  DucImageElement = 7,
  DucTextElement = 8,
  DucLinearElement = 9,
  DucArrowElement = 10,
  DucFreeDrawElement = 11,
  DucBlockInstanceElement = 12,
  DucFrameElement = 13,
  DucPlotElement = 14,
  DucViewportElement = 15,
  DucXRayElement = 16,
  DucLeaderElement = 17,
  DucDimensionElement = 18,
  DucFeatureControlFrameElement = 19,
  DucDocElement = 20,
  DucParametricElement = 21
}

export function unionToElement(
  type: Element,
  accessor: (obj:DucArrowElement|DucBlockInstanceElement|DucDimensionElement|DucDocElement|DucEllipseElement|DucEmbeddableElement|DucFeatureControlFrameElement|DucFrameElement|DucFreeDrawElement|DucImageElement|DucLeaderElement|DucLinearElement|DucMermaidElement|DucParametricElement|DucPlotElement|DucPolygonElement|DucRectangleElement|DucTableElement|DucTextElement|DucViewportElement|DucXRayElement) => DucArrowElement|DucBlockInstanceElement|DucDimensionElement|DucDocElement|DucEllipseElement|DucEmbeddableElement|DucFeatureControlFrameElement|DucFrameElement|DucFreeDrawElement|DucImageElement|DucLeaderElement|DucLinearElement|DucMermaidElement|DucParametricElement|DucPlotElement|DucPolygonElement|DucRectangleElement|DucTableElement|DucTextElement|DucViewportElement|DucXRayElement|null
): DucArrowElement|DucBlockInstanceElement|DucDimensionElement|DucDocElement|DucEllipseElement|DucEmbeddableElement|DucFeatureControlFrameElement|DucFrameElement|DucFreeDrawElement|DucImageElement|DucLeaderElement|DucLinearElement|DucMermaidElement|DucParametricElement|DucPlotElement|DucPolygonElement|DucRectangleElement|DucTableElement|DucTextElement|DucViewportElement|DucXRayElement|null {
  switch(Element[type]) {
    case 'NONE': return null; 
    case 'DucRectangleElement': return accessor(new DucRectangleElement())! as DucRectangleElement;
    case 'DucPolygonElement': return accessor(new DucPolygonElement())! as DucPolygonElement;
    case 'DucEllipseElement': return accessor(new DucEllipseElement())! as DucEllipseElement;
    case 'DucEmbeddableElement': return accessor(new DucEmbeddableElement())! as DucEmbeddableElement;
    case 'DucMermaidElement': return accessor(new DucMermaidElement())! as DucMermaidElement;
    case 'DucTableElement': return accessor(new DucTableElement())! as DucTableElement;
    case 'DucImageElement': return accessor(new DucImageElement())! as DucImageElement;
    case 'DucTextElement': return accessor(new DucTextElement())! as DucTextElement;
    case 'DucLinearElement': return accessor(new DucLinearElement())! as DucLinearElement;
    case 'DucArrowElement': return accessor(new DucArrowElement())! as DucArrowElement;
    case 'DucFreeDrawElement': return accessor(new DucFreeDrawElement())! as DucFreeDrawElement;
    case 'DucBlockInstanceElement': return accessor(new DucBlockInstanceElement())! as DucBlockInstanceElement;
    case 'DucFrameElement': return accessor(new DucFrameElement())! as DucFrameElement;
    case 'DucPlotElement': return accessor(new DucPlotElement())! as DucPlotElement;
    case 'DucViewportElement': return accessor(new DucViewportElement())! as DucViewportElement;
    case 'DucXRayElement': return accessor(new DucXRayElement())! as DucXRayElement;
    case 'DucLeaderElement': return accessor(new DucLeaderElement())! as DucLeaderElement;
    case 'DucDimensionElement': return accessor(new DucDimensionElement())! as DucDimensionElement;
    case 'DucFeatureControlFrameElement': return accessor(new DucFeatureControlFrameElement())! as DucFeatureControlFrameElement;
    case 'DucDocElement': return accessor(new DucDocElement())! as DucDocElement;
    case 'DucParametricElement': return accessor(new DucParametricElement())! as DucParametricElement;
    default: return null;
  }
}

export function unionListToElement(
  type: Element, 
  accessor: (index: number, obj:DucArrowElement|DucBlockInstanceElement|DucDimensionElement|DucDocElement|DucEllipseElement|DucEmbeddableElement|DucFeatureControlFrameElement|DucFrameElement|DucFreeDrawElement|DucImageElement|DucLeaderElement|DucLinearElement|DucMermaidElement|DucParametricElement|DucPlotElement|DucPolygonElement|DucRectangleElement|DucTableElement|DucTextElement|DucViewportElement|DucXRayElement) => DucArrowElement|DucBlockInstanceElement|DucDimensionElement|DucDocElement|DucEllipseElement|DucEmbeddableElement|DucFeatureControlFrameElement|DucFrameElement|DucFreeDrawElement|DucImageElement|DucLeaderElement|DucLinearElement|DucMermaidElement|DucParametricElement|DucPlotElement|DucPolygonElement|DucRectangleElement|DucTableElement|DucTextElement|DucViewportElement|DucXRayElement|null, 
  index: number
): DucArrowElement|DucBlockInstanceElement|DucDimensionElement|DucDocElement|DucEllipseElement|DucEmbeddableElement|DucFeatureControlFrameElement|DucFrameElement|DucFreeDrawElement|DucImageElement|DucLeaderElement|DucLinearElement|DucMermaidElement|DucParametricElement|DucPlotElement|DucPolygonElement|DucRectangleElement|DucTableElement|DucTextElement|DucViewportElement|DucXRayElement|null {
  switch(Element[type]) {
    case 'NONE': return null; 
    case 'DucRectangleElement': return accessor(index, new DucRectangleElement())! as DucRectangleElement;
    case 'DucPolygonElement': return accessor(index, new DucPolygonElement())! as DucPolygonElement;
    case 'DucEllipseElement': return accessor(index, new DucEllipseElement())! as DucEllipseElement;
    case 'DucEmbeddableElement': return accessor(index, new DucEmbeddableElement())! as DucEmbeddableElement;
    case 'DucMermaidElement': return accessor(index, new DucMermaidElement())! as DucMermaidElement;
    case 'DucTableElement': return accessor(index, new DucTableElement())! as DucTableElement;
    case 'DucImageElement': return accessor(index, new DucImageElement())! as DucImageElement;
    case 'DucTextElement': return accessor(index, new DucTextElement())! as DucTextElement;
    case 'DucLinearElement': return accessor(index, new DucLinearElement())! as DucLinearElement;
    case 'DucArrowElement': return accessor(index, new DucArrowElement())! as DucArrowElement;
    case 'DucFreeDrawElement': return accessor(index, new DucFreeDrawElement())! as DucFreeDrawElement;
    case 'DucBlockInstanceElement': return accessor(index, new DucBlockInstanceElement())! as DucBlockInstanceElement;
    case 'DucFrameElement': return accessor(index, new DucFrameElement())! as DucFrameElement;
    case 'DucPlotElement': return accessor(index, new DucPlotElement())! as DucPlotElement;
    case 'DucViewportElement': return accessor(index, new DucViewportElement())! as DucViewportElement;
    case 'DucXRayElement': return accessor(index, new DucXRayElement())! as DucXRayElement;
    case 'DucLeaderElement': return accessor(index, new DucLeaderElement())! as DucLeaderElement;
    case 'DucDimensionElement': return accessor(index, new DucDimensionElement())! as DucDimensionElement;
    case 'DucFeatureControlFrameElement': return accessor(index, new DucFeatureControlFrameElement())! as DucFeatureControlFrameElement;
    case 'DucDocElement': return accessor(index, new DucDocElement())! as DucDocElement;
    case 'DucParametricElement': return accessor(index, new DucParametricElement())! as DucParametricElement;
    default: return null;
  }
}
