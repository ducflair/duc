// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { ElementStroke } from '../duc/element-stroke';


export class DimensionExtLineStyle {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DimensionExtLineStyle {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDimensionExtLineStyle(bb:flatbuffers.ByteBuffer, obj?:DimensionExtLineStyle):DimensionExtLineStyle {
  return (obj || new DimensionExtLineStyle()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDimensionExtLineStyle(bb:flatbuffers.ByteBuffer, obj?:DimensionExtLineStyle):DimensionExtLineStyle {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DimensionExtLineStyle()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

stroke(obj?:ElementStroke):ElementStroke|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new ElementStroke()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

overshoot():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

offset():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

static startDimensionExtLineStyle(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addStroke(builder:flatbuffers.Builder, strokeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, strokeOffset, 0);
}

static addOvershoot(builder:flatbuffers.Builder, overshoot:number) {
  builder.addFieldFloat64(1, overshoot, 0.0);
}

static addOffset(builder:flatbuffers.Builder, offset:number) {
  builder.addFieldFloat64(2, offset, 0.0);
}

static endDimensionExtLineStyle(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createDimensionExtLineStyle(builder:flatbuffers.Builder, strokeOffset:flatbuffers.Offset, overshoot:number, offset:number):flatbuffers.Offset {
  DimensionExtLineStyle.startDimensionExtLineStyle(builder);
  DimensionExtLineStyle.addStroke(builder, strokeOffset);
  DimensionExtLineStyle.addOvershoot(builder, overshoot);
  DimensionExtLineStyle.addOffset(builder, offset);
  return DimensionExtLineStyle.endDimensionExtLineStyle(builder);
}
}
