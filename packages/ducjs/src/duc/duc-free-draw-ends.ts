// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class DucFreeDrawEnds {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DucFreeDrawEnds {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDucFreeDrawEnds(bb:flatbuffers.ByteBuffer, obj?:DucFreeDrawEnds):DucFreeDrawEnds {
  return (obj || new DucFreeDrawEnds()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDucFreeDrawEnds(bb:flatbuffers.ByteBuffer, obj?:DucFreeDrawEnds):DucFreeDrawEnds {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DucFreeDrawEnds()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

cap():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

taper():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

easing():string|null
easing(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
easing(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startDucFreeDrawEnds(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addCap(builder:flatbuffers.Builder, cap:boolean) {
  builder.addFieldInt8(0, +cap, +false);
}

static addTaper(builder:flatbuffers.Builder, taper:number) {
  builder.addFieldFloat32(1, taper, 0.0);
}

static addEasing(builder:flatbuffers.Builder, easingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, easingOffset, 0);
}

static endDucFreeDrawEnds(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createDucFreeDrawEnds(builder:flatbuffers.Builder, cap:boolean, taper:number, easingOffset:flatbuffers.Offset):flatbuffers.Offset {
  DucFreeDrawEnds.startDucFreeDrawEnds(builder);
  DucFreeDrawEnds.addCap(builder, cap);
  DucFreeDrawEnds.addTaper(builder, taper);
  DucFreeDrawEnds.addEasing(builder, easingOffset);
  return DucFreeDrawEnds.endDucFreeDrawEnds(builder);
}
}
