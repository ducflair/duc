// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { DucFeatureControlFrameStyle } from '../duc/duc-feature-control-frame-style';
import { FCFDatumDefinition } from '../duc/fcfdatum-definition';
import { FCFFrameModifiers } from '../duc/fcfframe-modifiers';
import { FeatureControlFrameSegment } from '../duc/feature-control-frame-segment';
import { _DucElementBase } from '../duc/duc-element-base';


export class DucFeatureControlFrameElement {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DucFeatureControlFrameElement {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDucFeatureControlFrameElement(bb:flatbuffers.ByteBuffer, obj?:DucFeatureControlFrameElement):DucFeatureControlFrameElement {
  return (obj || new DucFeatureControlFrameElement()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDucFeatureControlFrameElement(bb:flatbuffers.ByteBuffer, obj?:DucFeatureControlFrameElement):DucFeatureControlFrameElement {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DucFeatureControlFrameElement()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

base(obj?:_DucElementBase):_DucElementBase|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new _DucElementBase()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

style(obj?:DucFeatureControlFrameStyle):DucFeatureControlFrameStyle|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new DucFeatureControlFrameStyle()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

rows(index: number, obj?:FeatureControlFrameSegment):FeatureControlFrameSegment|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new FeatureControlFrameSegment()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

rowsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

frameModifiers(obj?:FCFFrameModifiers):FCFFrameModifiers|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new FCFFrameModifiers()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

leaderElementId():string|null
leaderElementId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
leaderElementId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

datumDefinition(obj?:FCFDatumDefinition):FCFDatumDefinition|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new FCFDatumDefinition()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startDucFeatureControlFrameElement(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addBase(builder:flatbuffers.Builder, baseOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, baseOffset, 0);
}

static addStyle(builder:flatbuffers.Builder, styleOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, styleOffset, 0);
}

static addRows(builder:flatbuffers.Builder, rowsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, rowsOffset, 0);
}

static createRowsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startRowsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addFrameModifiers(builder:flatbuffers.Builder, frameModifiersOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, frameModifiersOffset, 0);
}

static addLeaderElementId(builder:flatbuffers.Builder, leaderElementIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, leaderElementIdOffset, 0);
}

static addDatumDefinition(builder:flatbuffers.Builder, datumDefinitionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, datumDefinitionOffset, 0);
}

static endDucFeatureControlFrameElement(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
