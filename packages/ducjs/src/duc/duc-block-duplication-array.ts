// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class DucBlockDuplicationArray {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DucBlockDuplicationArray {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDucBlockDuplicationArray(bb:flatbuffers.ByteBuffer, obj?:DucBlockDuplicationArray):DucBlockDuplicationArray {
  return (obj || new DucBlockDuplicationArray()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDucBlockDuplicationArray(bb:flatbuffers.ByteBuffer, obj?:DucBlockDuplicationArray):DucBlockDuplicationArray {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DucBlockDuplicationArray()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

rows():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

cols():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

rowSpacing():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

colSpacing():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

static startDucBlockDuplicationArray(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addRows(builder:flatbuffers.Builder, rows:number) {
  builder.addFieldInt32(0, rows, 0);
}

static addCols(builder:flatbuffers.Builder, cols:number) {
  builder.addFieldInt32(1, cols, 0);
}

static addRowSpacing(builder:flatbuffers.Builder, rowSpacing:number) {
  builder.addFieldFloat64(2, rowSpacing, 0.0);
}

static addColSpacing(builder:flatbuffers.Builder, colSpacing:number) {
  builder.addFieldFloat64(3, colSpacing, 0.0);
}

static endDucBlockDuplicationArray(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createDucBlockDuplicationArray(builder:flatbuffers.Builder, rows:number, cols:number, rowSpacing:number, colSpacing:number):flatbuffers.Offset {
  DucBlockDuplicationArray.startDucBlockDuplicationArray(builder);
  DucBlockDuplicationArray.addRows(builder, rows);
  DucBlockDuplicationArray.addCols(builder, cols);
  DucBlockDuplicationArray.addRowSpacing(builder, rowSpacing);
  DucBlockDuplicationArray.addColSpacing(builder, colSpacing);
  return DucBlockDuplicationArray.endDucBlockDuplicationArray(builder);
}
}
