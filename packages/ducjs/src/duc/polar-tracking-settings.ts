// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class PolarTrackingSettings {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):PolarTrackingSettings {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPolarTrackingSettings(bb:flatbuffers.ByteBuffer, obj?:PolarTrackingSettings):PolarTrackingSettings {
  return (obj || new PolarTrackingSettings()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPolarTrackingSettings(bb:flatbuffers.ByteBuffer, obj?:PolarTrackingSettings):PolarTrackingSettings {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new PolarTrackingSettings()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

enabled():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

angles(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat64(this.bb!.__vector(this.bb_pos + offset) + index * 8) : 0;
}

anglesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

anglesArray():Float64Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? new Float64Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

incrementAngle():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

trackFromLastPoint():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

showPolarCoordinates():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startPolarTrackingSettings(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addEnabled(builder:flatbuffers.Builder, enabled:boolean) {
  builder.addFieldInt8(0, +enabled, +false);
}

static addAngles(builder:flatbuffers.Builder, anglesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, anglesOffset, 0);
}

static createAnglesVector(builder:flatbuffers.Builder, data:number[]|Float64Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createAnglesVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createAnglesVector(builder:flatbuffers.Builder, data:number[]|Float64Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(8, data.length, 8);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addFloat64(data[i]!);
  }
  return builder.endVector();
}

static startAnglesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(8, numElems, 8);
}

static addIncrementAngle(builder:flatbuffers.Builder, incrementAngle:number) {
  builder.addFieldFloat64(2, incrementAngle, 0.0);
}

static addTrackFromLastPoint(builder:flatbuffers.Builder, trackFromLastPoint:boolean) {
  builder.addFieldInt8(3, +trackFromLastPoint, +false);
}

static addShowPolarCoordinates(builder:flatbuffers.Builder, showPolarCoordinates:boolean) {
  builder.addFieldInt8(4, +showPolarCoordinates, +false);
}

static endPolarTrackingSettings(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createPolarTrackingSettings(builder:flatbuffers.Builder, enabled:boolean, anglesOffset:flatbuffers.Offset, incrementAngle:number, trackFromLastPoint:boolean, showPolarCoordinates:boolean):flatbuffers.Offset {
  PolarTrackingSettings.startPolarTrackingSettings(builder);
  PolarTrackingSettings.addEnabled(builder, enabled);
  PolarTrackingSettings.addAngles(builder, anglesOffset);
  PolarTrackingSettings.addIncrementAngle(builder, incrementAngle);
  PolarTrackingSettings.addTrackFromLastPoint(builder, trackFromLastPoint);
  PolarTrackingSettings.addShowPolarCoordinates(builder, showPolarCoordinates);
  return PolarTrackingSettings.endPolarTrackingSettings(builder);
}
}
