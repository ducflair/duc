// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class UnitPrecision {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):UnitPrecision {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsUnitPrecision(bb:flatbuffers.ByteBuffer, obj?:UnitPrecision):UnitPrecision {
  return (obj || new UnitPrecision()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsUnitPrecision(bb:flatbuffers.ByteBuffer, obj?:UnitPrecision):UnitPrecision {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new UnitPrecision()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

linear():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

angular():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

area():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

volume():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startUnitPrecision(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addLinear(builder:flatbuffers.Builder, linear:number) {
  builder.addFieldInt32(0, linear, 0);
}

static addAngular(builder:flatbuffers.Builder, angular:number) {
  builder.addFieldInt32(1, angular, 0);
}

static addArea(builder:flatbuffers.Builder, area:number) {
  builder.addFieldInt32(2, area, 0);
}

static addVolume(builder:flatbuffers.Builder, volume:number) {
  builder.addFieldInt32(3, volume, 0);
}

static endUnitPrecision(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createUnitPrecision(builder:flatbuffers.Builder, linear:number, angular:number, area:number, volume:number):flatbuffers.Offset {
  UnitPrecision.startUnitPrecision(builder);
  UnitPrecision.addLinear(builder, linear);
  UnitPrecision.addAngular(builder, angular);
  UnitPrecision.addArea(builder, area);
  UnitPrecision.addVolume(builder, volume);
  return UnitPrecision.endUnitPrecision(builder);
}
}
