// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { GeometricPoint } from '../duc/geometric-point';


export class DucUcs {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DucUcs {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDucUcs(bb:flatbuffers.ByteBuffer, obj?:DucUcs):DucUcs {
  return (obj || new DucUcs()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDucUcs(bb:flatbuffers.ByteBuffer, obj?:DucUcs):DucUcs {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DucUcs()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

origin(obj?:GeometricPoint):GeometricPoint|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new GeometricPoint()).__init(this.bb_pos + offset, this.bb!) : null;
}

angle():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

static startDucUcs(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldStruct(0, originOffset, 0);
}

static addAngle(builder:flatbuffers.Builder, angle:number) {
  builder.addFieldFloat64(1, angle, 0.0);
}

static endDucUcs(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createDucUcs(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset, angle:number):flatbuffers.Offset {
  DucUcs.startDucUcs(builder);
  DucUcs.addOrigin(builder, originOffset);
  DucUcs.addAngle(builder, angle);
  return DucUcs.endDucUcs(builder);
}
}
