// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Element, unionToElement, unionListToElement } from '../duc/element';


/**
 * A wrapper to hold an element from the union.
 */
export class ElementWrapper {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ElementWrapper {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsElementWrapper(bb:flatbuffers.ByteBuffer, obj?:ElementWrapper):ElementWrapper {
  return (obj || new ElementWrapper()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsElementWrapper(bb:flatbuffers.ByteBuffer, obj?:ElementWrapper):ElementWrapper {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ElementWrapper()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

elementType():Element {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : Element.NONE;
}

element<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startElementWrapper(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addElementType(builder:flatbuffers.Builder, elementType:Element) {
  builder.addFieldInt8(0, elementType, Element.NONE);
}

static addElement(builder:flatbuffers.Builder, elementOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, elementOffset, 0);
}

static endElementWrapper(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createElementWrapper(builder:flatbuffers.Builder, elementType:Element, elementOffset:flatbuffers.Offset):flatbuffers.Offset {
  ElementWrapper.startElementWrapper(builder);
  ElementWrapper.addElementType(builder, elementType);
  ElementWrapper.addElement(builder, elementOffset);
  return ElementWrapper.endElementWrapper(builder);
}
}
