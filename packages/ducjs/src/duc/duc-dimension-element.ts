// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { AXIS } from '../duc/axis';
import { DIMENSION_TYPE } from '../duc/dimension-type';
import { DimensionBaselineData } from '../duc/dimension-baseline-data';
import { DimensionBindings } from '../duc/dimension-bindings';
import { DimensionContinueData } from '../duc/dimension-continue-data';
import { DimensionDefinitionPoints } from '../duc/dimension-definition-points';
import { DimensionToleranceStyle } from '../duc/dimension-tolerance-style';
import { DucDimensionStyle } from '../duc/duc-dimension-style';
import { GeometricPoint } from '../duc/geometric-point';
import { _DucElementBase } from '../duc/duc-element-base';


export class DucDimensionElement {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DucDimensionElement {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDucDimensionElement(bb:flatbuffers.ByteBuffer, obj?:DucDimensionElement):DucDimensionElement {
  return (obj || new DucDimensionElement()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDucDimensionElement(bb:flatbuffers.ByteBuffer, obj?:DucDimensionElement):DucDimensionElement {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DucDimensionElement()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

base(obj?:_DucElementBase):_DucElementBase|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new _DucElementBase()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

style(obj?:DucDimensionStyle):DucDimensionStyle|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new DucDimensionStyle()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

dimensionType():DIMENSION_TYPE|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : null;
}

definitionPoints(obj?:DimensionDefinitionPoints):DimensionDefinitionPoints|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new DimensionDefinitionPoints()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

obliqueAngle():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

ordinateAxis():AXIS|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : null;
}

bindings(obj?:DimensionBindings):DimensionBindings|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? (obj || new DimensionBindings()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

textOverride():string|null
textOverride(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
textOverride(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

textPosition(obj?:GeometricPoint):GeometricPoint|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? (obj || new GeometricPoint()).__init(this.bb_pos + offset, this.bb!) : null;
}

toleranceOverride(obj?:DimensionToleranceStyle):DimensionToleranceStyle|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? (obj || new DimensionToleranceStyle()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

baselineData(obj?:DimensionBaselineData):DimensionBaselineData|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? (obj || new DimensionBaselineData()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

continueData(obj?:DimensionContinueData):DimensionContinueData|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? (obj || new DimensionContinueData()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startDucDimensionElement(builder:flatbuffers.Builder) {
  builder.startObject(12);
}

static addBase(builder:flatbuffers.Builder, baseOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, baseOffset, 0);
}

static addStyle(builder:flatbuffers.Builder, styleOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, styleOffset, 0);
}

static addDimensionType(builder:flatbuffers.Builder, dimensionType:DIMENSION_TYPE) {
  builder.addFieldInt8(2, dimensionType, null);
}

static addDefinitionPoints(builder:flatbuffers.Builder, definitionPointsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, definitionPointsOffset, 0);
}

static addObliqueAngle(builder:flatbuffers.Builder, obliqueAngle:number) {
  builder.addFieldFloat32(4, obliqueAngle, 0.0);
}

static addOrdinateAxis(builder:flatbuffers.Builder, ordinateAxis:AXIS) {
  builder.addFieldInt8(5, ordinateAxis, null);
}

static addBindings(builder:flatbuffers.Builder, bindingsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, bindingsOffset, 0);
}

static addTextOverride(builder:flatbuffers.Builder, textOverrideOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, textOverrideOffset, 0);
}

static addTextPosition(builder:flatbuffers.Builder, textPositionOffset:flatbuffers.Offset) {
  builder.addFieldStruct(8, textPositionOffset, 0);
}

static addToleranceOverride(builder:flatbuffers.Builder, toleranceOverrideOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, toleranceOverrideOffset, 0);
}

static addBaselineData(builder:flatbuffers.Builder, baselineDataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, baselineDataOffset, 0);
}

static addContinueData(builder:flatbuffers.Builder, continueDataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, continueDataOffset, 0);
}

static endDucDimensionElement(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
