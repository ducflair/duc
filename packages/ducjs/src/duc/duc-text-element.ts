// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { DucTextStyle } from '../duc/duc-text-style';
import { _DucElementBase } from '../duc/duc-element-base';


export class DucTextElement {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DucTextElement {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDucTextElement(bb:flatbuffers.ByteBuffer, obj?:DucTextElement):DucTextElement {
  return (obj || new DucTextElement()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDucTextElement(bb:flatbuffers.ByteBuffer, obj?:DucTextElement):DucTextElement {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DucTextElement()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

base(obj?:_DucElementBase):_DucElementBase|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new _DucElementBase()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

style(obj?:DucTextStyle):DucTextStyle|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new DucTextStyle()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

text():string|null
text(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
text(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

autoResize():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

containerId():string|null
containerId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
containerId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

originalText():string|null
originalText(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
originalText(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startDucTextElement(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addBase(builder:flatbuffers.Builder, baseOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, baseOffset, 0);
}

static addStyle(builder:flatbuffers.Builder, styleOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, styleOffset, 0);
}

static addText(builder:flatbuffers.Builder, textOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, textOffset, 0);
}

static addAutoResize(builder:flatbuffers.Builder, autoResize:boolean) {
  builder.addFieldInt8(3, +autoResize, +false);
}

static addContainerId(builder:flatbuffers.Builder, containerIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, containerIdOffset, 0);
}

static addOriginalText(builder:flatbuffers.Builder, originalTextOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, originalTextOffset, 0);
}

static endDucTextElement(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
