// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { CustomHatchPattern } from '../duc/custom-hatch-pattern';
import { DucPoint } from '../duc/duc-point';
import { HATCH_STYLE } from '../duc/hatch-style';


export class DucHatchStyle {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DucHatchStyle {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDucHatchStyle(bb:flatbuffers.ByteBuffer, obj?:DucHatchStyle):DucHatchStyle {
  return (obj || new DucHatchStyle()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDucHatchStyle(bb:flatbuffers.ByteBuffer, obj?:DucHatchStyle):DucHatchStyle {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DucHatchStyle()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

hatchStyle():HATCH_STYLE|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : null;
}

patternName():string|null
patternName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
patternName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

patternScale():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

patternAngle():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

patternOrigin(obj?:DucPoint):DucPoint|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new DucPoint()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

patternDouble():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

customPattern(obj?:CustomHatchPattern):CustomHatchPattern|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? (obj || new CustomHatchPattern()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startDucHatchStyle(builder:flatbuffers.Builder) {
  builder.startObject(7);
}

static addHatchStyle(builder:flatbuffers.Builder, hatchStyle:HATCH_STYLE) {
  builder.addFieldInt8(0, hatchStyle, null);
}

static addPatternName(builder:flatbuffers.Builder, patternNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, patternNameOffset, 0);
}

static addPatternScale(builder:flatbuffers.Builder, patternScale:number) {
  builder.addFieldFloat32(2, patternScale, 0.0);
}

static addPatternAngle(builder:flatbuffers.Builder, patternAngle:number) {
  builder.addFieldFloat64(3, patternAngle, 0.0);
}

static addPatternOrigin(builder:flatbuffers.Builder, patternOriginOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, patternOriginOffset, 0);
}

static addPatternDouble(builder:flatbuffers.Builder, patternDouble:boolean) {
  builder.addFieldInt8(5, +patternDouble, +false);
}

static addCustomPattern(builder:flatbuffers.Builder, customPatternOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, customPatternOffset, 0);
}

static endDucHatchStyle(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
