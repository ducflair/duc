// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { DucPoint } from '../duc/duc-point';


/**
 * Defines a view with scroll, zoom, and center point.
 */
export class DucView {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DucView {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDucView(bb:flatbuffers.ByteBuffer, obj?:DucView):DucView {
  return (obj || new DucView()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDucView(bb:flatbuffers.ByteBuffer, obj?:DucView):DucView {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DucView()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

scrollX():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

scrollY():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

zoom():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

twistAngle():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

centerPoint(obj?:DucPoint):DucPoint|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new DucPoint()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

scope():string|null
scope(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
scope(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startDucView(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addScrollX(builder:flatbuffers.Builder, scrollX:number) {
  builder.addFieldFloat64(0, scrollX, 0.0);
}

static addScrollY(builder:flatbuffers.Builder, scrollY:number) {
  builder.addFieldFloat64(1, scrollY, 0.0);
}

static addZoom(builder:flatbuffers.Builder, zoom:number) {
  builder.addFieldFloat64(2, zoom, 0.0);
}

static addTwistAngle(builder:flatbuffers.Builder, twistAngle:number) {
  builder.addFieldFloat64(3, twistAngle, 0.0);
}

static addCenterPoint(builder:flatbuffers.Builder, centerPointOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, centerPointOffset, 0);
}

static addScope(builder:flatbuffers.Builder, scopeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, scopeOffset, 0);
}

static endDucView(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
