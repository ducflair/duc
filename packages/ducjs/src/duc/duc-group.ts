// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { ElementBackground } from '../duc/element-background';
import { ElementStroke } from '../duc/element-stroke';


export class DucGroup {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DucGroup {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDucGroup(bb:flatbuffers.ByteBuffer, obj?:DucGroup):DucGroup {
  return (obj || new DucGroup()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDucGroup(bb:flatbuffers.ByteBuffer, obj?:DucGroup):DucGroup {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DucGroup()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

isCollapsed():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

label():string|null
label(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
label(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

description():string|null
description(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
description(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

noPlot():boolean|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : null;
}

locked():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

isVisible():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

opacity():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

labelingColor():string|null
labelingColor(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
labelingColor(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

strokeOverride(obj?:ElementStroke):ElementStroke|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? (obj || new ElementStroke()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

backgroundOverride(obj?:ElementBackground):ElementBackground|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? (obj || new ElementBackground()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

clip():boolean|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : null;
}

static startDucGroup(builder:flatbuffers.Builder) {
  builder.startObject(15);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addIsCollapsed(builder:flatbuffers.Builder, isCollapsed:boolean) {
  builder.addFieldInt8(2, +isCollapsed, +false);
}

static addLabel(builder:flatbuffers.Builder, labelOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, labelOffset, 0);
}

static addDescription(builder:flatbuffers.Builder, descriptionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, descriptionOffset, 0);
}

static addNoPlot(builder:flatbuffers.Builder, noPlot:boolean) {
  builder.addFieldInt8(7, +noPlot, null);
}

static addLocked(builder:flatbuffers.Builder, locked:boolean) {
  builder.addFieldInt8(8, +locked, +false);
}

static addIsVisible(builder:flatbuffers.Builder, isVisible:boolean) {
  builder.addFieldInt8(9, +isVisible, +false);
}

static addOpacity(builder:flatbuffers.Builder, opacity:number) {
  builder.addFieldFloat32(10, opacity, 0.0);
}

static addLabelingColor(builder:flatbuffers.Builder, labelingColorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, labelingColorOffset, 0);
}

static addStrokeOverride(builder:flatbuffers.Builder, strokeOverrideOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, strokeOverrideOffset, 0);
}

static addBackgroundOverride(builder:flatbuffers.Builder, backgroundOverrideOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, backgroundOverrideOffset, 0);
}

static addClip(builder:flatbuffers.Builder, clip:boolean) {
  builder.addFieldInt8(14, +clip, null);
}

static endDucGroup(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
