// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class DucStackLikeStyles {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DucStackLikeStyles {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDucStackLikeStyles(bb:flatbuffers.ByteBuffer, obj?:DucStackLikeStyles):DucStackLikeStyles {
  return (obj || new DucStackLikeStyles()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDucStackLikeStyles(bb:flatbuffers.ByteBuffer, obj?:DucStackLikeStyles):DucStackLikeStyles {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DucStackLikeStyles()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

opacity():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

labelingColor():string|null
labelingColor(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
labelingColor(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startDucStackLikeStyles(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addOpacity(builder:flatbuffers.Builder, opacity:number) {
  builder.addFieldFloat64(0, opacity, 0.0);
}

static addLabelingColor(builder:flatbuffers.Builder, labelingColorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, labelingColorOffset, 0);
}

static endDucStackLikeStyles(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createDucStackLikeStyles(builder:flatbuffers.Builder, opacity:number, labelingColorOffset:flatbuffers.Offset):flatbuffers.Offset {
  DucStackLikeStyles.startDucStackLikeStyles(builder);
  DucStackLikeStyles.addOpacity(builder, opacity);
  DucStackLikeStyles.addLabelingColor(builder, labelingColorOffset);
  return DucStackLikeStyles.endDucStackLikeStyles(builder);
}
}
