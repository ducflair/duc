// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { LEADER_CONTENT_TYPE } from '../duc/leader-content-type';
import { LeaderContentData, unionToLeaderContentData, unionListToLeaderContentData } from '../duc/leader-content-data';


export class LeaderContent {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):LeaderContent {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsLeaderContent(bb:flatbuffers.ByteBuffer, obj?:LeaderContent):LeaderContent {
  return (obj || new LeaderContent()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsLeaderContent(bb:flatbuffers.ByteBuffer, obj?:LeaderContent):LeaderContent {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new LeaderContent()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

leaderContentType():LEADER_CONTENT_TYPE|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : null;
}

contentType():LeaderContentData {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : LeaderContentData.NONE;
}

content<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startLeaderContent(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addLeaderContentType(builder:flatbuffers.Builder, leaderContentType:LEADER_CONTENT_TYPE) {
  builder.addFieldInt8(0, leaderContentType, null);
}

static addContentType(builder:flatbuffers.Builder, contentType:LeaderContentData) {
  builder.addFieldInt8(1, contentType, LeaderContentData.NONE);
}

static addContent(builder:flatbuffers.Builder, contentOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, contentOffset, 0);
}

static endLeaderContent(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createLeaderContent(builder:flatbuffers.Builder, leaderContentType:LEADER_CONTENT_TYPE|null, contentType:LeaderContentData, contentOffset:flatbuffers.Offset):flatbuffers.Offset {
  LeaderContent.startLeaderContent(builder);
  if (leaderContentType !== null)
    LeaderContent.addLeaderContentType(builder, leaderContentType);
  LeaderContent.addContentType(builder, contentType);
  LeaderContent.addContent(builder, contentOffset);
  return LeaderContent.endLeaderContent(builder);
}
}
