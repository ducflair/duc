// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class BindingPoint {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):BindingPoint {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsBindingPoint(bb:flatbuffers.ByteBuffer, obj?:BindingPoint):BindingPoint {
  return (obj || new BindingPoint()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsBindingPoint(bb:flatbuffers.ByteBuffer, obj?:BindingPoint):BindingPoint {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new BindingPoint()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

index():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

offset():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

static startBindingPoint(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addIndex(builder:flatbuffers.Builder, index:number) {
  builder.addFieldInt32(0, index, 0);
}

static addOffset(builder:flatbuffers.Builder, offset:number) {
  builder.addFieldFloat32(1, offset, 0.0);
}

static endBindingPoint(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createBindingPoint(builder:flatbuffers.Builder, index:number, offset:number):flatbuffers.Offset {
  BindingPoint.startBindingPoint(builder);
  BindingPoint.addIndex(builder, index);
  BindingPoint.addOffset(builder, offset);
  return BindingPoint.endBindingPoint(builder);
}
}
