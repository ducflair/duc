// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { TEXT_FIELD_SOURCE_PROPERTY } from '../duc/text-field-source-property';


export class DucTextDynamicElementSource {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DucTextDynamicElementSource {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDucTextDynamicElementSource(bb:flatbuffers.ByteBuffer, obj?:DucTextDynamicElementSource):DucTextDynamicElementSource {
  return (obj || new DucTextDynamicElementSource()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDucTextDynamicElementSource(bb:flatbuffers.ByteBuffer, obj?:DucTextDynamicElementSource):DucTextDynamicElementSource {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DucTextDynamicElementSource()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

elementId():string|null
elementId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
elementId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

property():TEXT_FIELD_SOURCE_PROPERTY|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : null;
}

static startDucTextDynamicElementSource(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addElementId(builder:flatbuffers.Builder, elementIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, elementIdOffset, 0);
}

static addProperty(builder:flatbuffers.Builder, property:TEXT_FIELD_SOURCE_PROPERTY) {
  builder.addFieldInt8(1, property, null);
}

static endDucTextDynamicElementSource(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createDucTextDynamicElementSource(builder:flatbuffers.Builder, elementIdOffset:flatbuffers.Offset, property:TEXT_FIELD_SOURCE_PROPERTY|null):flatbuffers.Offset {
  DucTextDynamicElementSource.startDucTextDynamicElementSource(builder);
  DucTextDynamicElementSource.addElementId(builder, elementIdOffset);
  if (property !== null)
    DucTextDynamicElementSource.addProperty(builder, property);
  return DucTextDynamicElementSource.endDucTextDynamicElementSource(builder);
}
}
