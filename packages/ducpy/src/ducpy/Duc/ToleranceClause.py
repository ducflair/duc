# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Duc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ToleranceClause(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ToleranceClause()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsToleranceClause(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def ToleranceClauseBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x55\x43\x5F", size_prefixed=size_prefixed)

    # ToleranceClause
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ToleranceClause
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ToleranceClause
    def ZoneType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return None

    # ToleranceClause
    def FeatureModifiers(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # ToleranceClause
    def FeatureModifiersAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # ToleranceClause
    def FeatureModifiersLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ToleranceClause
    def FeatureModifiersIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # ToleranceClause
    def MaterialCondition(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return None

def ToleranceClauseStart(builder):
    builder.StartObject(4)

def Start(builder):
    ToleranceClauseStart(builder)

def ToleranceClauseAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def AddValue(builder, value):
    ToleranceClauseAddValue(builder, value)

def ToleranceClauseAddZoneType(builder, zoneType):
    builder.PrependUint8Slot(1, zoneType, None)

def AddZoneType(builder, zoneType):
    ToleranceClauseAddZoneType(builder, zoneType)

def ToleranceClauseAddFeatureModifiers(builder, featureModifiers):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(featureModifiers), 0)

def AddFeatureModifiers(builder, featureModifiers):
    ToleranceClauseAddFeatureModifiers(builder, featureModifiers)

def ToleranceClauseStartFeatureModifiersVector(builder, numElems):
    return builder.StartVector(1, numElems, 1)

def StartFeatureModifiersVector(builder, numElems):
    return ToleranceClauseStartFeatureModifiersVector(builder, numElems)

def ToleranceClauseAddMaterialCondition(builder, materialCondition):
    builder.PrependUint8Slot(3, materialCondition, None)

def AddMaterialCondition(builder, materialCondition):
    ToleranceClauseAddMaterialCondition(builder, materialCondition)

def ToleranceClauseEnd(builder):
    return builder.EndObject()

def End(builder):
    return ToleranceClauseEnd(builder)
