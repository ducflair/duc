# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Duc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DucTableElement(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DucTableElement()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDucTableElement(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def DucTableElementBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x55\x43\x5F", size_prefixed=size_prefixed)

    # DucTableElement
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DucTableElement
    def Base(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc._DucElementBase import _DucElementBase
            obj = _DucElementBase()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucTableElement
    def Style(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.DucTableStyle import DucTableStyle
            obj = DucTableStyle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucTableElement
    def ColumnOrder(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # DucTableElement
    def ColumnOrderLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DucTableElement
    def ColumnOrderIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # DucTableElement
    def RowOrder(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # DucTableElement
    def RowOrderLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DucTableElement
    def RowOrderIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # DucTableElement
    def Columns(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Duc.DucTableColumnEntry import DucTableColumnEntry
            obj = DucTableColumnEntry()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucTableElement
    def ColumnsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DucTableElement
    def ColumnsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # DucTableElement
    def Rows(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Duc.DucTableRowEntry import DucTableRowEntry
            obj = DucTableRowEntry()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucTableElement
    def RowsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DucTableElement
    def RowsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # DucTableElement
    def Cells(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Duc.DucTableCellEntry import DucTableCellEntry
            obj = DucTableCellEntry()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucTableElement
    def CellsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DucTableElement
    def CellsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # DucTableElement
    def HeaderRowCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # DucTableElement
    def AutoSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.DucTableAutoSize import DucTableAutoSize
            obj = DucTableAutoSize()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def DucTableElementStart(builder):
    builder.StartObject(9)

def Start(builder):
    DucTableElementStart(builder)

def DucTableElementAddBase(builder, base):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(base), 0)

def AddBase(builder, base):
    DucTableElementAddBase(builder, base)

def DucTableElementAddStyle(builder, style):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(style), 0)

def AddStyle(builder, style):
    DucTableElementAddStyle(builder, style)

def DucTableElementAddColumnOrder(builder, columnOrder):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(columnOrder), 0)

def AddColumnOrder(builder, columnOrder):
    DucTableElementAddColumnOrder(builder, columnOrder)

def DucTableElementStartColumnOrderVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartColumnOrderVector(builder, numElems):
    return DucTableElementStartColumnOrderVector(builder, numElems)

def DucTableElementAddRowOrder(builder, rowOrder):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(rowOrder), 0)

def AddRowOrder(builder, rowOrder):
    DucTableElementAddRowOrder(builder, rowOrder)

def DucTableElementStartRowOrderVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartRowOrderVector(builder, numElems):
    return DucTableElementStartRowOrderVector(builder, numElems)

def DucTableElementAddColumns(builder, columns):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(columns), 0)

def AddColumns(builder, columns):
    DucTableElementAddColumns(builder, columns)

def DucTableElementStartColumnsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartColumnsVector(builder, numElems):
    return DucTableElementStartColumnsVector(builder, numElems)

def DucTableElementAddRows(builder, rows):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(rows), 0)

def AddRows(builder, rows):
    DucTableElementAddRows(builder, rows)

def DucTableElementStartRowsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartRowsVector(builder, numElems):
    return DucTableElementStartRowsVector(builder, numElems)

def DucTableElementAddCells(builder, cells):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(cells), 0)

def AddCells(builder, cells):
    DucTableElementAddCells(builder, cells)

def DucTableElementStartCellsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartCellsVector(builder, numElems):
    return DucTableElementStartCellsVector(builder, numElems)

def DucTableElementAddHeaderRowCount(builder, headerRowCount):
    builder.PrependInt32Slot(7, headerRowCount, 0)

def AddHeaderRowCount(builder, headerRowCount):
    DucTableElementAddHeaderRowCount(builder, headerRowCount)

def DucTableElementAddAutoSize(builder, autoSize):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(autoSize), 0)

def AddAutoSize(builder, autoSize):
    DucTableElementAddAutoSize(builder, autoSize)

def DucTableElementEnd(builder):
    return builder.EndObject()

def End(builder):
    return DucTableElementEnd(builder)
