# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Duc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class LayerValidationRules(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = LayerValidationRules()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsLayerValidationRules(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def LayerValidationRulesBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x55\x43\x5F", size_prefixed=size_prefixed)

    # LayerValidationRules
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # LayerValidationRules
    def ProhibitedLayerNames(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # LayerValidationRules
    def ProhibitedLayerNamesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # LayerValidationRules
    def ProhibitedLayerNamesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def LayerValidationRulesStart(builder):
    builder.StartObject(1)

def Start(builder):
    LayerValidationRulesStart(builder)

def LayerValidationRulesAddProhibitedLayerNames(builder, prohibitedLayerNames):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(prohibitedLayerNames), 0)

def AddProhibitedLayerNames(builder, prohibitedLayerNames):
    LayerValidationRulesAddProhibitedLayerNames(builder, prohibitedLayerNames)

def LayerValidationRulesStartProhibitedLayerNamesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartProhibitedLayerNamesVector(builder, numElems):
    return LayerValidationRulesStartProhibitedLayerNamesVector(builder, numElems)

def LayerValidationRulesEnd(builder):
    return builder.EndObject()

def End(builder):
    return LayerValidationRulesEnd(builder)
