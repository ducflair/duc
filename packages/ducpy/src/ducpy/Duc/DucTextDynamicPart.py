# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Duc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DucTextDynamicPart(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DucTextDynamicPart()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDucTextDynamicPart(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def DucTextDynamicPartBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x55\x43\x5F", size_prefixed=size_prefixed)

    # DucTextDynamicPart
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DucTextDynamicPart
    def Tag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DucTextDynamicPart
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.DucTextDynamicSource import DucTextDynamicSource
            obj = DucTextDynamicSource()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucTextDynamicPart
    def Formatting(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.PrimaryUnits import PrimaryUnits
            obj = PrimaryUnits()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucTextDynamicPart
    def CachedValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def DucTextDynamicPartStart(builder):
    builder.StartObject(4)

def Start(builder):
    DucTextDynamicPartStart(builder)

def DucTextDynamicPartAddTag(builder, tag):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(tag), 0)

def AddTag(builder, tag):
    DucTextDynamicPartAddTag(builder, tag)

def DucTextDynamicPartAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    DucTextDynamicPartAddSource(builder, source)

def DucTextDynamicPartAddFormatting(builder, formatting):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(formatting), 0)

def AddFormatting(builder, formatting):
    DucTextDynamicPartAddFormatting(builder, formatting)

def DucTextDynamicPartAddCachedValue(builder, cachedValue):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(cachedValue), 0)

def AddCachedValue(builder, cachedValue):
    DucTextDynamicPartAddCachedValue(builder, cachedValue)

def DucTextDynamicPartEnd(builder):
    return builder.EndObject()

def End(builder):
    return DucTextDynamicPartEnd(builder)
