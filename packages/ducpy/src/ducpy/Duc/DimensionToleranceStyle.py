# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Duc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DimensionToleranceStyle(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DimensionToleranceStyle()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDimensionToleranceStyle(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def DimensionToleranceStyleBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x55\x43\x5F", size_prefixed=size_prefixed)

    # DimensionToleranceStyle
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DimensionToleranceStyle
    def Enabled(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # DimensionToleranceStyle
    def DisplayMethod(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return None

    # DimensionToleranceStyle
    def UpperValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # DimensionToleranceStyle
    def LowerValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # DimensionToleranceStyle
    def Precision(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # DimensionToleranceStyle
    def TextStyle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.DucTextStyle import DucTextStyle
            obj = DucTextStyle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def DimensionToleranceStyleStart(builder):
    builder.StartObject(6)

def Start(builder):
    DimensionToleranceStyleStart(builder)

def DimensionToleranceStyleAddEnabled(builder, enabled):
    builder.PrependBoolSlot(0, enabled, 0)

def AddEnabled(builder, enabled):
    DimensionToleranceStyleAddEnabled(builder, enabled)

def DimensionToleranceStyleAddDisplayMethod(builder, displayMethod):
    builder.PrependUint8Slot(1, displayMethod, None)

def AddDisplayMethod(builder, displayMethod):
    DimensionToleranceStyleAddDisplayMethod(builder, displayMethod)

def DimensionToleranceStyleAddUpperValue(builder, upperValue):
    builder.PrependFloat64Slot(2, upperValue, 0.0)

def AddUpperValue(builder, upperValue):
    DimensionToleranceStyleAddUpperValue(builder, upperValue)

def DimensionToleranceStyleAddLowerValue(builder, lowerValue):
    builder.PrependFloat64Slot(3, lowerValue, 0.0)

def AddLowerValue(builder, lowerValue):
    DimensionToleranceStyleAddLowerValue(builder, lowerValue)

def DimensionToleranceStyleAddPrecision(builder, precision):
    builder.PrependInt32Slot(4, precision, 0)

def AddPrecision(builder, precision):
    DimensionToleranceStyleAddPrecision(builder, precision)

def DimensionToleranceStyleAddTextStyle(builder, textStyle):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(textStyle), 0)

def AddTextStyle(builder, textStyle):
    DimensionToleranceStyleAddTextStyle(builder, textStyle)

def DimensionToleranceStyleEnd(builder):
    return builder.EndObject()

def End(builder):
    return DimensionToleranceStyleEnd(builder)
