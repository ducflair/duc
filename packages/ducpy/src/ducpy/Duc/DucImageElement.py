# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Duc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DucImageElement(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DucImageElement()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDucImageElement(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def DucImageElementBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x55\x43\x5F", size_prefixed=size_prefixed)

    # DucImageElement
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DucImageElement
    def Base(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc._DucElementBase import _DucElementBase
            obj = _DucElementBase()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucImageElement
    def FileId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DucImageElement
    def Status(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return None

    # DucImageElement
    def Scale(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # DucImageElement
    def ScaleAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float64Flags, o)
        return 0

    # DucImageElement
    def ScaleLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DucImageElement
    def ScaleIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # DucImageElement
    def Crop(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.ImageCrop import ImageCrop
            obj = ImageCrop()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucImageElement
    def Filter(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.DucImageFilter import DucImageFilter
            obj = DucImageFilter()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def DucImageElementStart(builder):
    builder.StartObject(6)

def Start(builder):
    DucImageElementStart(builder)

def DucImageElementAddBase(builder, base):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(base), 0)

def AddBase(builder, base):
    DucImageElementAddBase(builder, base)

def DucImageElementAddFileId(builder, fileId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(fileId), 0)

def AddFileId(builder, fileId):
    DucImageElementAddFileId(builder, fileId)

def DucImageElementAddStatus(builder, status):
    builder.PrependUint8Slot(2, status, None)

def AddStatus(builder, status):
    DucImageElementAddStatus(builder, status)

def DucImageElementAddScale(builder, scale):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(scale), 0)

def AddScale(builder, scale):
    DucImageElementAddScale(builder, scale)

def DucImageElementStartScaleVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)

def StartScaleVector(builder, numElems):
    return DucImageElementStartScaleVector(builder, numElems)

def DucImageElementAddCrop(builder, crop):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(crop), 0)

def AddCrop(builder, crop):
    DucImageElementAddCrop(builder, crop)

def DucImageElementAddFilter(builder, filter):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(filter), 0)

def AddFilter(builder, filter):
    DucImageElementAddFilter(builder, filter)

def DucImageElementEnd(builder):
    return builder.EndObject()

def End(builder):
    return DucImageElementEnd(builder)
