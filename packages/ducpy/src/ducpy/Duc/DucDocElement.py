# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Duc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DucDocElement(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DucDocElement()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDucDocElement(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def DucDocElementBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x55\x43\x5F", size_prefixed=size_prefixed)

    # DucDocElement
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DucDocElement
    def Base(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc._DucElementBase import _DucElementBase
            obj = _DucElementBase()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucDocElement
    def Style(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.DucDocStyle import DucDocStyle
            obj = DucDocStyle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucDocElement
    def Text(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DucDocElement
    def Dynamic(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Duc.DucTextDynamicPart import DucTextDynamicPart
            obj = DucTextDynamicPart()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucDocElement
    def DynamicLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DucDocElement
    def DynamicIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # DucDocElement
    def FlowDirection(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return None

    # DucDocElement
    def Columns(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.ColumnLayout import ColumnLayout
            obj = ColumnLayout()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucDocElement
    def AutoResize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def DucDocElementStart(builder):
    builder.StartObject(7)

def Start(builder):
    DucDocElementStart(builder)

def DucDocElementAddBase(builder, base):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(base), 0)

def AddBase(builder, base):
    DucDocElementAddBase(builder, base)

def DucDocElementAddStyle(builder, style):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(style), 0)

def AddStyle(builder, style):
    DucDocElementAddStyle(builder, style)

def DucDocElementAddText(builder, text):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(text), 0)

def AddText(builder, text):
    DucDocElementAddText(builder, text)

def DucDocElementAddDynamic(builder, dynamic):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(dynamic), 0)

def AddDynamic(builder, dynamic):
    DucDocElementAddDynamic(builder, dynamic)

def DucDocElementStartDynamicVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartDynamicVector(builder, numElems):
    return DucDocElementStartDynamicVector(builder, numElems)

def DucDocElementAddFlowDirection(builder, flowDirection):
    builder.PrependUint8Slot(4, flowDirection, None)

def AddFlowDirection(builder, flowDirection):
    DucDocElementAddFlowDirection(builder, flowDirection)

def DucDocElementAddColumns(builder, columns):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(columns), 0)

def AddColumns(builder, columns):
    DucDocElementAddColumns(builder, columns)

def DucDocElementAddAutoResize(builder, autoResize):
    builder.PrependBoolSlot(6, autoResize, 0)

def AddAutoResize(builder, autoResize):
    DucDocElementAddAutoResize(builder, autoResize)

def DucDocElementEnd(builder):
    return builder.EndObject()

def End(builder):
    return DucDocElementEnd(builder)
