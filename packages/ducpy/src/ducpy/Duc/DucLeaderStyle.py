# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Duc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DucLeaderStyle(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DucLeaderStyle()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDucLeaderStyle(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def DucLeaderStyleBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x55\x43\x5F", size_prefixed=size_prefixed)

    # DucLeaderStyle
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DucLeaderStyle
    def BaseStyle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc._DucElementStylesBase import _DucElementStylesBase
            obj = _DucElementStylesBase()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucLeaderStyle
    def HeadsOverride(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Duc.DucHead import DucHead
            obj = DucHead()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucLeaderStyle
    def HeadsOverrideLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DucLeaderStyle
    def HeadsOverrideIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # DucLeaderStyle
    def Dogleg(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # DucLeaderStyle
    def TextStyle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.DucTextStyle import DucTextStyle
            obj = DucTextStyle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucLeaderStyle
    def TextAttachment(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return None

    # DucLeaderStyle
    def BlockAttachment(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return None

def DucLeaderStyleStart(builder):
    builder.StartObject(6)

def Start(builder):
    DucLeaderStyleStart(builder)

def DucLeaderStyleAddBaseStyle(builder, baseStyle):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(baseStyle), 0)

def AddBaseStyle(builder, baseStyle):
    DucLeaderStyleAddBaseStyle(builder, baseStyle)

def DucLeaderStyleAddHeadsOverride(builder, headsOverride):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(headsOverride), 0)

def AddHeadsOverride(builder, headsOverride):
    DucLeaderStyleAddHeadsOverride(builder, headsOverride)

def DucLeaderStyleStartHeadsOverrideVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartHeadsOverrideVector(builder, numElems):
    return DucLeaderStyleStartHeadsOverrideVector(builder, numElems)

def DucLeaderStyleAddDogleg(builder, dogleg):
    builder.PrependFloat64Slot(2, dogleg, 0.0)

def AddDogleg(builder, dogleg):
    DucLeaderStyleAddDogleg(builder, dogleg)

def DucLeaderStyleAddTextStyle(builder, textStyle):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(textStyle), 0)

def AddTextStyle(builder, textStyle):
    DucLeaderStyleAddTextStyle(builder, textStyle)

def DucLeaderStyleAddTextAttachment(builder, textAttachment):
    builder.PrependUint8Slot(4, textAttachment, None)

def AddTextAttachment(builder, textAttachment):
    DucLeaderStyleAddTextAttachment(builder, textAttachment)

def DucLeaderStyleAddBlockAttachment(builder, blockAttachment):
    builder.PrependUint8Slot(5, blockAttachment, None)

def AddBlockAttachment(builder, blockAttachment):
    DucLeaderStyleAddBlockAttachment(builder, blockAttachment)

def DucLeaderStyleEnd(builder):
    return builder.EndObject()

def End(builder):
    return DucLeaderStyleEnd(builder)
