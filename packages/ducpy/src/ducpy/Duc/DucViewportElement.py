# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Duc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DucViewportElement(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DucViewportElement()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDucViewportElement(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def DucViewportElementBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x55\x43\x5F", size_prefixed=size_prefixed)

    # DucViewportElement
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DucViewportElement
    def LinearBase(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc._DucLinearElementBase import _DucLinearElementBase
            obj = _DucLinearElementBase()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucViewportElement
    def StackBase(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc._DucStackBase import _DucStackBase
            obj = _DucStackBase()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucViewportElement
    def Style(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.DucViewportStyle import DucViewportStyle
            obj = DucViewportStyle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucViewportElement
    def View(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.DucView import DucView
            obj = DucView()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucViewportElement
    def Scale(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # DucViewportElement
    def ShadePlot(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return None

    # DucViewportElement
    def FrozenGroupIds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # DucViewportElement
    def FrozenGroupIdsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DucViewportElement
    def FrozenGroupIdsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # DucViewportElement
    def StandardOverride(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def DucViewportElementStart(builder):
    builder.StartObject(8)

def Start(builder):
    DucViewportElementStart(builder)

def DucViewportElementAddLinearBase(builder, linearBase):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(linearBase), 0)

def AddLinearBase(builder, linearBase):
    DucViewportElementAddLinearBase(builder, linearBase)

def DucViewportElementAddStackBase(builder, stackBase):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(stackBase), 0)

def AddStackBase(builder, stackBase):
    DucViewportElementAddStackBase(builder, stackBase)

def DucViewportElementAddStyle(builder, style):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(style), 0)

def AddStyle(builder, style):
    DucViewportElementAddStyle(builder, style)

def DucViewportElementAddView(builder, view):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(view), 0)

def AddView(builder, view):
    DucViewportElementAddView(builder, view)

def DucViewportElementAddScale(builder, scale):
    builder.PrependFloat32Slot(4, scale, 0.0)

def AddScale(builder, scale):
    DucViewportElementAddScale(builder, scale)

def DucViewportElementAddShadePlot(builder, shadePlot):
    builder.PrependUint8Slot(5, shadePlot, None)

def AddShadePlot(builder, shadePlot):
    DucViewportElementAddShadePlot(builder, shadePlot)

def DucViewportElementAddFrozenGroupIds(builder, frozenGroupIds):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(frozenGroupIds), 0)

def AddFrozenGroupIds(builder, frozenGroupIds):
    DucViewportElementAddFrozenGroupIds(builder, frozenGroupIds)

def DucViewportElementStartFrozenGroupIdsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartFrozenGroupIdsVector(builder, numElems):
    return DucViewportElementStartFrozenGroupIdsVector(builder, numElems)

def DucViewportElementAddStandardOverride(builder, standardOverride):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(standardOverride), 0)

def AddStandardOverride(builder, standardOverride):
    DucViewportElementAddStandardOverride(builder, standardOverride)

def DucViewportElementEnd(builder):
    return builder.EndObject()

def End(builder):
    return DucViewportElementEnd(builder)
