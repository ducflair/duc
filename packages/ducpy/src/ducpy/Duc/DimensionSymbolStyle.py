# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Duc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DimensionSymbolStyle(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DimensionSymbolStyle()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDimensionSymbolStyle(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def DimensionSymbolStyleBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x55\x43\x5F", size_prefixed=size_prefixed)

    # DimensionSymbolStyle
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DimensionSymbolStyle
    def HeadsOverride(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Duc.DucHead import DucHead
            obj = DucHead()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DimensionSymbolStyle
    def HeadsOverrideLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DimensionSymbolStyle
    def HeadsOverrideIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # DimensionSymbolStyle
    def CenterMarkType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return None

    # DimensionSymbolStyle
    def CenterMarkSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def DimensionSymbolStyleStart(builder):
    builder.StartObject(3)

def Start(builder):
    DimensionSymbolStyleStart(builder)

def DimensionSymbolStyleAddHeadsOverride(builder, headsOverride):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(headsOverride), 0)

def AddHeadsOverride(builder, headsOverride):
    DimensionSymbolStyleAddHeadsOverride(builder, headsOverride)

def DimensionSymbolStyleStartHeadsOverrideVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartHeadsOverrideVector(builder, numElems):
    return DimensionSymbolStyleStartHeadsOverrideVector(builder, numElems)

def DimensionSymbolStyleAddCenterMarkType(builder, centerMarkType):
    builder.PrependUint8Slot(1, centerMarkType, None)

def AddCenterMarkType(builder, centerMarkType):
    DimensionSymbolStyleAddCenterMarkType(builder, centerMarkType)

def DimensionSymbolStyleAddCenterMarkSize(builder, centerMarkSize):
    builder.PrependFloat64Slot(2, centerMarkSize, 0.0)

def AddCenterMarkSize(builder, centerMarkSize):
    DimensionSymbolStyleAddCenterMarkSize(builder, centerMarkSize)

def DimensionSymbolStyleEnd(builder):
    return builder.EndObject()

def End(builder):
    return DimensionSymbolStyleEnd(builder)
