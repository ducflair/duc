# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Duc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class BinaryFileData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = BinaryFileData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsBinaryFileData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def BinaryFileDataBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x55\x43\x5F", size_prefixed=size_prefixed)

    # BinaryFileData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # BinaryFileData
    def MimeType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # BinaryFileData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # BinaryFileData
    def DataUrl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # BinaryFileData
    def Created(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # BinaryFileData
    def LastRetrieved(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # BinaryFileData
    def Version(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def BinaryFileDataStart(builder):
    builder.StartObject(6)

def Start(builder):
    BinaryFileDataStart(builder)

def BinaryFileDataAddMimeType(builder, mimeType):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(mimeType), 0)

def AddMimeType(builder, mimeType):
    BinaryFileDataAddMimeType(builder, mimeType)

def BinaryFileDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    BinaryFileDataAddId(builder, id)

def BinaryFileDataAddDataUrl(builder, dataUrl):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(dataUrl), 0)

def AddDataUrl(builder, dataUrl):
    BinaryFileDataAddDataUrl(builder, dataUrl)

def BinaryFileDataAddCreated(builder, created):
    builder.PrependInt64Slot(3, created, 0)

def AddCreated(builder, created):
    BinaryFileDataAddCreated(builder, created)

def BinaryFileDataAddLastRetrieved(builder, lastRetrieved):
    builder.PrependInt64Slot(4, lastRetrieved, 0)

def AddLastRetrieved(builder, lastRetrieved):
    BinaryFileDataAddLastRetrieved(builder, lastRetrieved)

def BinaryFileDataAddVersion(builder, version):
    builder.PrependInt32Slot(5, version, 0)

def AddVersion(builder, version):
    BinaryFileDataAddVersion(builder, version)

def BinaryFileDataEnd(builder):
    return builder.EndObject()

def End(builder):
    return BinaryFileDataEnd(builder)
