# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Duc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DucBlockDuplicationArray(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DucBlockDuplicationArray()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDucBlockDuplicationArray(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def DucBlockDuplicationArrayBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x55\x43\x5F", size_prefixed=size_prefixed)

    # DucBlockDuplicationArray
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DucBlockDuplicationArray
    def Rows(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # DucBlockDuplicationArray
    def Cols(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # DucBlockDuplicationArray
    def RowSpacing(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # DucBlockDuplicationArray
    def ColSpacing(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def DucBlockDuplicationArrayStart(builder):
    builder.StartObject(4)

def Start(builder):
    DucBlockDuplicationArrayStart(builder)

def DucBlockDuplicationArrayAddRows(builder, rows):
    builder.PrependInt32Slot(0, rows, 0)

def AddRows(builder, rows):
    DucBlockDuplicationArrayAddRows(builder, rows)

def DucBlockDuplicationArrayAddCols(builder, cols):
    builder.PrependInt32Slot(1, cols, 0)

def AddCols(builder, cols):
    DucBlockDuplicationArrayAddCols(builder, cols)

def DucBlockDuplicationArrayAddRowSpacing(builder, rowSpacing):
    builder.PrependFloat64Slot(2, rowSpacing, 0.0)

def AddRowSpacing(builder, rowSpacing):
    DucBlockDuplicationArrayAddRowSpacing(builder, rowSpacing)

def DucBlockDuplicationArrayAddColSpacing(builder, colSpacing):
    builder.PrependFloat64Slot(3, colSpacing, 0.0)

def AddColSpacing(builder, colSpacing):
    DucBlockDuplicationArrayAddColSpacing(builder, colSpacing)

def DucBlockDuplicationArrayEnd(builder):
    return builder.EndObject()

def End(builder):
    return DucBlockDuplicationArrayEnd(builder)
