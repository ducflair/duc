# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Duc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DucTableCellStyle(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DucTableCellStyle()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDucTableCellStyle(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def DucTableCellStyleBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x55\x43\x5F", size_prefixed=size_prefixed)

    # DucTableCellStyle
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DucTableCellStyle
    def BaseStyle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc._DucElementStylesBase import _DucElementStylesBase
            obj = _DucElementStylesBase()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucTableCellStyle
    def TextStyle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.DucTextStyle import DucTextStyle
            obj = DucTextStyle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucTableCellStyle
    def Margins(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.Margins import Margins
            obj = Margins()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucTableCellStyle
    def Alignment(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return None

def DucTableCellStyleStart(builder):
    builder.StartObject(4)

def Start(builder):
    DucTableCellStyleStart(builder)

def DucTableCellStyleAddBaseStyle(builder, baseStyle):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(baseStyle), 0)

def AddBaseStyle(builder, baseStyle):
    DucTableCellStyleAddBaseStyle(builder, baseStyle)

def DucTableCellStyleAddTextStyle(builder, textStyle):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(textStyle), 0)

def AddTextStyle(builder, textStyle):
    DucTableCellStyleAddTextStyle(builder, textStyle)

def DucTableCellStyleAddMargins(builder, margins):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(margins), 0)

def AddMargins(builder, margins):
    DucTableCellStyleAddMargins(builder, margins)

def DucTableCellStyleAddAlignment(builder, alignment):
    builder.PrependUint8Slot(3, alignment, None)

def AddAlignment(builder, alignment):
    DucTableCellStyleAddAlignment(builder, alignment)

def DucTableCellStyleEnd(builder):
    return builder.EndObject()

def End(builder):
    return DucTableCellStyleEnd(builder)
