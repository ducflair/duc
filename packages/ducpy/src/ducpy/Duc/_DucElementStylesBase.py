# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Duc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class _DucElementStylesBase(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = _DucElementStylesBase()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAs_DucElementStylesBase(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def _DucElementStylesBaseBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x55\x43\x5F", size_prefixed=size_prefixed)

    # _DucElementStylesBase
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # _DucElementStylesBase
    def Roundness(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # _DucElementStylesBase
    def Blending(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return None

    # _DucElementStylesBase
    def Background(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Duc.ElementBackground import ElementBackground
            obj = ElementBackground()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # _DucElementStylesBase
    def BackgroundLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # _DucElementStylesBase
    def BackgroundIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # _DucElementStylesBase
    def Stroke(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Duc.ElementStroke import ElementStroke
            obj = ElementStroke()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # _DucElementStylesBase
    def StrokeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # _DucElementStylesBase
    def StrokeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # _DucElementStylesBase
    def Opacity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def _DucElementStylesBaseStart(builder):
    builder.StartObject(5)

def Start(builder):
    _DucElementStylesBaseStart(builder)

def _DucElementStylesBaseAddRoundness(builder, roundness):
    builder.PrependFloat64Slot(0, roundness, 0.0)

def AddRoundness(builder, roundness):
    _DucElementStylesBaseAddRoundness(builder, roundness)

def _DucElementStylesBaseAddBlending(builder, blending):
    builder.PrependUint8Slot(1, blending, None)

def AddBlending(builder, blending):
    _DucElementStylesBaseAddBlending(builder, blending)

def _DucElementStylesBaseAddBackground(builder, background):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(background), 0)

def AddBackground(builder, background):
    _DucElementStylesBaseAddBackground(builder, background)

def _DucElementStylesBaseStartBackgroundVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartBackgroundVector(builder, numElems):
    return _DucElementStylesBaseStartBackgroundVector(builder, numElems)

def _DucElementStylesBaseAddStroke(builder, stroke):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(stroke), 0)

def AddStroke(builder, stroke):
    _DucElementStylesBaseAddStroke(builder, stroke)

def _DucElementStylesBaseStartStrokeVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartStrokeVector(builder, numElems):
    return _DucElementStylesBaseStartStrokeVector(builder, numElems)

def _DucElementStylesBaseAddOpacity(builder, opacity):
    builder.PrependFloat64Slot(4, opacity, 0.0)

def AddOpacity(builder, opacity):
    _DucElementStylesBaseAddOpacity(builder, opacity)

def _DucElementStylesBaseEnd(builder):
    return builder.EndObject()

def End(builder):
    return _DucElementStylesBaseEnd(builder)
