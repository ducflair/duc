# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Duc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class LineSpacing(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = LineSpacing()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsLineSpacing(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def LineSpacingBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x55\x43\x5F", size_prefixed=size_prefixed)

    # LineSpacing
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # LineSpacing
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # LineSpacing
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return None

def LineSpacingStart(builder):
    builder.StartObject(2)

def Start(builder):
    LineSpacingStart(builder)

def LineSpacingAddValue(builder, value):
    builder.PrependFloat64Slot(0, value, 0.0)

def AddValue(builder, value):
    LineSpacingAddValue(builder, value)

def LineSpacingAddType(builder, type):
    builder.PrependUint8Slot(1, type, None)

def AddType(builder, type):
    LineSpacingAddType(builder, type)

def LineSpacingEnd(builder):
    return builder.EndObject()

def End(builder):
    return LineSpacingEnd(builder)
