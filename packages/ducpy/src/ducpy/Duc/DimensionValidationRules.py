# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Duc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DimensionValidationRules(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DimensionValidationRules()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDimensionValidationRules(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def DimensionValidationRulesBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x55\x43\x5F", size_prefixed=size_prefixed)

    # DimensionValidationRules
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DimensionValidationRules
    def MinTextHeight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # DimensionValidationRules
    def MaxTextHeight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # DimensionValidationRules
    def AllowedPrecisions(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # DimensionValidationRules
    def AllowedPrecisionsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # DimensionValidationRules
    def AllowedPrecisionsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DimensionValidationRules
    def AllowedPrecisionsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def DimensionValidationRulesStart(builder):
    builder.StartObject(3)

def Start(builder):
    DimensionValidationRulesStart(builder)

def DimensionValidationRulesAddMinTextHeight(builder, minTextHeight):
    builder.PrependFloat64Slot(0, minTextHeight, 0.0)

def AddMinTextHeight(builder, minTextHeight):
    DimensionValidationRulesAddMinTextHeight(builder, minTextHeight)

def DimensionValidationRulesAddMaxTextHeight(builder, maxTextHeight):
    builder.PrependFloat64Slot(1, maxTextHeight, 0.0)

def AddMaxTextHeight(builder, maxTextHeight):
    DimensionValidationRulesAddMaxTextHeight(builder, maxTextHeight)

def DimensionValidationRulesAddAllowedPrecisions(builder, allowedPrecisions):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(allowedPrecisions), 0)

def AddAllowedPrecisions(builder, allowedPrecisions):
    DimensionValidationRulesAddAllowedPrecisions(builder, allowedPrecisions)

def DimensionValidationRulesStartAllowedPrecisionsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartAllowedPrecisionsVector(builder, numElems):
    return DimensionValidationRulesStartAllowedPrecisionsVector(builder, numElems)

def DimensionValidationRulesEnd(builder):
    return builder.EndObject()

def End(builder):
    return DimensionValidationRulesEnd(builder)
