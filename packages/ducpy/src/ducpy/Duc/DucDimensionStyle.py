# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Duc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DucDimensionStyle(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DucDimensionStyle()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDucDimensionStyle(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def DucDimensionStyleBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x55\x43\x5F", size_prefixed=size_prefixed)

    # DucDimensionStyle
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DucDimensionStyle
    def DimLine(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.DimensionLineStyle import DimensionLineStyle
            obj = DimensionLineStyle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucDimensionStyle
    def ExtLine(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.DimensionExtLineStyle import DimensionExtLineStyle
            obj = DimensionExtLineStyle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucDimensionStyle
    def TextStyle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.DucTextStyle import DucTextStyle
            obj = DucTextStyle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucDimensionStyle
    def Symbols(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.DimensionSymbolStyle import DimensionSymbolStyle
            obj = DimensionSymbolStyle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucDimensionStyle
    def Tolerance(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.DimensionToleranceStyle import DimensionToleranceStyle
            obj = DimensionToleranceStyle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucDimensionStyle
    def Fit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.DimensionFitStyle import DimensionFitStyle
            obj = DimensionFitStyle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def DucDimensionStyleStart(builder):
    builder.StartObject(6)

def Start(builder):
    DucDimensionStyleStart(builder)

def DucDimensionStyleAddDimLine(builder, dimLine):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(dimLine), 0)

def AddDimLine(builder, dimLine):
    DucDimensionStyleAddDimLine(builder, dimLine)

def DucDimensionStyleAddExtLine(builder, extLine):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(extLine), 0)

def AddExtLine(builder, extLine):
    DucDimensionStyleAddExtLine(builder, extLine)

def DucDimensionStyleAddTextStyle(builder, textStyle):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(textStyle), 0)

def AddTextStyle(builder, textStyle):
    DucDimensionStyleAddTextStyle(builder, textStyle)

def DucDimensionStyleAddSymbols(builder, symbols):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(symbols), 0)

def AddSymbols(builder, symbols):
    DucDimensionStyleAddSymbols(builder, symbols)

def DucDimensionStyleAddTolerance(builder, tolerance):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(tolerance), 0)

def AddTolerance(builder, tolerance):
    DucDimensionStyleAddTolerance(builder, tolerance)

def DucDimensionStyleAddFit(builder, fit):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(fit), 0)

def AddFit(builder, fit):
    DucDimensionStyleAddFit(builder, fit)

def DucDimensionStyleEnd(builder):
    return builder.EndObject()

def End(builder):
    return DucDimensionStyleEnd(builder)
