# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Duc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class GridSettings(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = GridSettings()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsGridSettings(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def GridSettingsBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x55\x43\x5F", size_prefixed=size_prefixed)

    # GridSettings
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # GridSettings
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return None

    # GridSettings
    def Readonly(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # GridSettings
    def DisplayType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return None

    # GridSettings
    def IsAdaptive(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # GridSettings
    def XSpacing(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # GridSettings
    def YSpacing(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # GridSettings
    def Subdivisions(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # GridSettings
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = o + self._tab.Pos
            from Duc.GeometricPoint import GeometricPoint
            obj = GeometricPoint()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # GridSettings
    def Rotation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # GridSettings
    def FollowUcs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # GridSettings
    def MajorStyle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.GridStyle import GridStyle
            obj = GridStyle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # GridSettings
    def MinorStyle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.GridStyle import GridStyle
            obj = GridStyle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # GridSettings
    def ShowMinor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # GridSettings
    def MinZoom(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # GridSettings
    def MaxZoom(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # GridSettings
    def AutoHide(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # GridSettings
    def PolarSettings(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.PolarGridSettings import PolarGridSettings
            obj = PolarGridSettings()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # GridSettings
    def IsometricSettings(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.IsometricGridSettings import IsometricGridSettings
            obj = IsometricGridSettings()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # GridSettings
    def EnableSnapping(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def GridSettingsStart(builder):
    builder.StartObject(19)

def Start(builder):
    GridSettingsStart(builder)

def GridSettingsAddType(builder, type):
    builder.PrependUint8Slot(0, type, None)

def AddType(builder, type):
    GridSettingsAddType(builder, type)

def GridSettingsAddReadonly(builder, readonly):
    builder.PrependBoolSlot(1, readonly, 0)

def AddReadonly(builder, readonly):
    GridSettingsAddReadonly(builder, readonly)

def GridSettingsAddDisplayType(builder, displayType):
    builder.PrependUint8Slot(2, displayType, None)

def AddDisplayType(builder, displayType):
    GridSettingsAddDisplayType(builder, displayType)

def GridSettingsAddIsAdaptive(builder, isAdaptive):
    builder.PrependBoolSlot(3, isAdaptive, 0)

def AddIsAdaptive(builder, isAdaptive):
    GridSettingsAddIsAdaptive(builder, isAdaptive)

def GridSettingsAddXSpacing(builder, xSpacing):
    builder.PrependFloat64Slot(4, xSpacing, 0.0)

def AddXSpacing(builder, xSpacing):
    GridSettingsAddXSpacing(builder, xSpacing)

def GridSettingsAddYSpacing(builder, ySpacing):
    builder.PrependFloat64Slot(5, ySpacing, 0.0)

def AddYSpacing(builder, ySpacing):
    GridSettingsAddYSpacing(builder, ySpacing)

def GridSettingsAddSubdivisions(builder, subdivisions):
    builder.PrependInt32Slot(6, subdivisions, 0)

def AddSubdivisions(builder, subdivisions):
    GridSettingsAddSubdivisions(builder, subdivisions)

def GridSettingsAddOrigin(builder, origin):
    builder.PrependStructSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    GridSettingsAddOrigin(builder, origin)

def GridSettingsAddRotation(builder, rotation):
    builder.PrependFloat64Slot(8, rotation, 0.0)

def AddRotation(builder, rotation):
    GridSettingsAddRotation(builder, rotation)

def GridSettingsAddFollowUcs(builder, followUcs):
    builder.PrependBoolSlot(9, followUcs, 0)

def AddFollowUcs(builder, followUcs):
    GridSettingsAddFollowUcs(builder, followUcs)

def GridSettingsAddMajorStyle(builder, majorStyle):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(majorStyle), 0)

def AddMajorStyle(builder, majorStyle):
    GridSettingsAddMajorStyle(builder, majorStyle)

def GridSettingsAddMinorStyle(builder, minorStyle):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(minorStyle), 0)

def AddMinorStyle(builder, minorStyle):
    GridSettingsAddMinorStyle(builder, minorStyle)

def GridSettingsAddShowMinor(builder, showMinor):
    builder.PrependBoolSlot(12, showMinor, 0)

def AddShowMinor(builder, showMinor):
    GridSettingsAddShowMinor(builder, showMinor)

def GridSettingsAddMinZoom(builder, minZoom):
    builder.PrependFloat64Slot(13, minZoom, 0.0)

def AddMinZoom(builder, minZoom):
    GridSettingsAddMinZoom(builder, minZoom)

def GridSettingsAddMaxZoom(builder, maxZoom):
    builder.PrependFloat64Slot(14, maxZoom, 0.0)

def AddMaxZoom(builder, maxZoom):
    GridSettingsAddMaxZoom(builder, maxZoom)

def GridSettingsAddAutoHide(builder, autoHide):
    builder.PrependBoolSlot(15, autoHide, 0)

def AddAutoHide(builder, autoHide):
    GridSettingsAddAutoHide(builder, autoHide)

def GridSettingsAddPolarSettings(builder, polarSettings):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(polarSettings), 0)

def AddPolarSettings(builder, polarSettings):
    GridSettingsAddPolarSettings(builder, polarSettings)

def GridSettingsAddIsometricSettings(builder, isometricSettings):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(isometricSettings), 0)

def AddIsometricSettings(builder, isometricSettings):
    GridSettingsAddIsometricSettings(builder, isometricSettings)

def GridSettingsAddEnableSnapping(builder, enableSnapping):
    builder.PrependBoolSlot(18, enableSnapping, 0)

def AddEnableSnapping(builder, enableSnapping):
    GridSettingsAddEnableSnapping(builder, enableSnapping)

def GridSettingsEnd(builder):
    return builder.EndObject()

def End(builder):
    return GridSettingsEnd(builder)
