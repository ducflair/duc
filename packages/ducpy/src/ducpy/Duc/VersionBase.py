# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Duc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class VersionBase(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = VersionBase()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsVersionBase(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def VersionBaseBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x55\x43\x5F", size_prefixed=size_prefixed)

    # VersionBase
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # VersionBase
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # VersionBase
    def ParentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # VersionBase
    def Timestamp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # VersionBase
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # VersionBase
    def IsManualSave(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # VersionBase
    def UserId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def VersionBaseStart(builder):
    builder.StartObject(6)

def Start(builder):
    VersionBaseStart(builder)

def VersionBaseAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    VersionBaseAddId(builder, id)

def VersionBaseAddParentId(builder, parentId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(parentId), 0)

def AddParentId(builder, parentId):
    VersionBaseAddParentId(builder, parentId)

def VersionBaseAddTimestamp(builder, timestamp):
    builder.PrependInt64Slot(2, timestamp, 0)

def AddTimestamp(builder, timestamp):
    VersionBaseAddTimestamp(builder, timestamp)

def VersionBaseAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def AddDescription(builder, description):
    VersionBaseAddDescription(builder, description)

def VersionBaseAddIsManualSave(builder, isManualSave):
    builder.PrependBoolSlot(4, isManualSave, 0)

def AddIsManualSave(builder, isManualSave):
    VersionBaseAddIsManualSave(builder, isManualSave)

def VersionBaseAddUserId(builder, userId):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(userId), 0)

def AddUserId(builder, userId):
    VersionBaseAddUserId(builder, userId)

def VersionBaseEnd(builder):
    return builder.EndObject()

def End(builder):
    return VersionBaseEnd(builder)
