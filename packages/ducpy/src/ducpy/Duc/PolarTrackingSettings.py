# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Duc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class PolarTrackingSettings(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = PolarTrackingSettings()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsPolarTrackingSettings(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def PolarTrackingSettingsBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x55\x43\x5F", size_prefixed=size_prefixed)

    # PolarTrackingSettings
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # PolarTrackingSettings
    def Enabled(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # PolarTrackingSettings
    def Angles(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # PolarTrackingSettings
    def AnglesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float64Flags, o)
        return 0

    # PolarTrackingSettings
    def AnglesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PolarTrackingSettings
    def AnglesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # PolarTrackingSettings
    def IncrementAngle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # PolarTrackingSettings
    def TrackFromLastPoint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # PolarTrackingSettings
    def ShowPolarCoordinates(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def PolarTrackingSettingsStart(builder):
    builder.StartObject(5)

def Start(builder):
    PolarTrackingSettingsStart(builder)

def PolarTrackingSettingsAddEnabled(builder, enabled):
    builder.PrependBoolSlot(0, enabled, 0)

def AddEnabled(builder, enabled):
    PolarTrackingSettingsAddEnabled(builder, enabled)

def PolarTrackingSettingsAddAngles(builder, angles):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(angles), 0)

def AddAngles(builder, angles):
    PolarTrackingSettingsAddAngles(builder, angles)

def PolarTrackingSettingsStartAnglesVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)

def StartAnglesVector(builder, numElems):
    return PolarTrackingSettingsStartAnglesVector(builder, numElems)

def PolarTrackingSettingsAddIncrementAngle(builder, incrementAngle):
    builder.PrependFloat64Slot(2, incrementAngle, 0.0)

def AddIncrementAngle(builder, incrementAngle):
    PolarTrackingSettingsAddIncrementAngle(builder, incrementAngle)

def PolarTrackingSettingsAddTrackFromLastPoint(builder, trackFromLastPoint):
    builder.PrependBoolSlot(3, trackFromLastPoint, 0)

def AddTrackFromLastPoint(builder, trackFromLastPoint):
    PolarTrackingSettingsAddTrackFromLastPoint(builder, trackFromLastPoint)

def PolarTrackingSettingsAddShowPolarCoordinates(builder, showPolarCoordinates):
    builder.PrependBoolSlot(4, showPolarCoordinates, 0)

def AddShowPolarCoordinates(builder, showPolarCoordinates):
    PolarTrackingSettingsAddShowPolarCoordinates(builder, showPolarCoordinates)

def PolarTrackingSettingsEnd(builder):
    return builder.EndObject()

def End(builder):
    return PolarTrackingSettingsEnd(builder)
