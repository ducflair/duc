# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Duc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DucLeaderElement(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DucLeaderElement()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDucLeaderElement(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def DucLeaderElementBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x55\x43\x5F", size_prefixed=size_prefixed)

    # DucLeaderElement
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DucLeaderElement
    def LinearBase(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc._DucLinearElementBase import _DucLinearElementBase
            obj = _DucLinearElementBase()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucLeaderElement
    def Style(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.DucLeaderStyle import DucLeaderStyle
            obj = DucLeaderStyle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucLeaderElement
    def Content(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.LeaderContent import LeaderContent
            obj = LeaderContent()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucLeaderElement
    def ContentAnchor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = o + self._tab.Pos
            from Duc.GeometricPoint import GeometricPoint
            obj = GeometricPoint()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def DucLeaderElementStart(builder):
    builder.StartObject(4)

def Start(builder):
    DucLeaderElementStart(builder)

def DucLeaderElementAddLinearBase(builder, linearBase):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(linearBase), 0)

def AddLinearBase(builder, linearBase):
    DucLeaderElementAddLinearBase(builder, linearBase)

def DucLeaderElementAddStyle(builder, style):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(style), 0)

def AddStyle(builder, style):
    DucLeaderElementAddStyle(builder, style)

def DucLeaderElementAddContent(builder, content):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(content), 0)

def AddContent(builder, content):
    DucLeaderElementAddContent(builder, content)

def DucLeaderElementAddContentAnchor(builder, contentAnchor):
    builder.PrependStructSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(contentAnchor), 0)

def AddContentAnchor(builder, contentAnchor):
    DucLeaderElementAddContentAnchor(builder, contentAnchor)

def DucLeaderElementEnd(builder):
    return builder.EndObject()

def End(builder):
    return DucLeaderElementEnd(builder)
