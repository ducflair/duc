# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Duc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DucTableCell(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DucTableCell()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDucTableCell(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def DucTableCellBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x55\x43\x5F", size_prefixed=size_prefixed)

    # DucTableCell
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DucTableCell
    def RowId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DucTableCell
    def ColumnId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DucTableCell
    def Data(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DucTableCell
    def Span(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.DucTableCellSpan import DucTableCellSpan
            obj = DucTableCellSpan()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucTableCell
    def Locked(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # DucTableCell
    def StyleOverrides(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.DucTableCellStyle import DucTableCellStyle
            obj = DucTableCellStyle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def DucTableCellStart(builder):
    builder.StartObject(6)

def Start(builder):
    DucTableCellStart(builder)

def DucTableCellAddRowId(builder, rowId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(rowId), 0)

def AddRowId(builder, rowId):
    DucTableCellAddRowId(builder, rowId)

def DucTableCellAddColumnId(builder, columnId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(columnId), 0)

def AddColumnId(builder, columnId):
    DucTableCellAddColumnId(builder, columnId)

def DucTableCellAddData(builder, data):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(data), 0)

def AddData(builder, data):
    DucTableCellAddData(builder, data)

def DucTableCellAddSpan(builder, span):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(span), 0)

def AddSpan(builder, span):
    DucTableCellAddSpan(builder, span)

def DucTableCellAddLocked(builder, locked):
    builder.PrependBoolSlot(4, locked, 0)

def AddLocked(builder, locked):
    DucTableCellAddLocked(builder, locked)

def DucTableCellAddStyleOverrides(builder, styleOverrides):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(styleOverrides), 0)

def AddStyleOverrides(builder, styleOverrides):
    DucTableCellAddStyleOverrides(builder, styleOverrides)

def DucTableCellEnd(builder):
    return builder.EndObject()

def End(builder):
    return DucTableCellEnd(builder)
