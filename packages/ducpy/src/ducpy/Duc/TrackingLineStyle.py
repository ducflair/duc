# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Duc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class TrackingLineStyle(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TrackingLineStyle()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTrackingLineStyle(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def TrackingLineStyleBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x55\x43\x5F", size_prefixed=size_prefixed)

    # TrackingLineStyle
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TrackingLineStyle
    def Color(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TrackingLineStyle
    def Opacity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # TrackingLineStyle
    def DashPattern(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # TrackingLineStyle
    def DashPatternAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float64Flags, o)
        return 0

    # TrackingLineStyle
    def DashPatternLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TrackingLineStyle
    def DashPatternIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def TrackingLineStyleStart(builder):
    builder.StartObject(3)

def Start(builder):
    TrackingLineStyleStart(builder)

def TrackingLineStyleAddColor(builder, color):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(color), 0)

def AddColor(builder, color):
    TrackingLineStyleAddColor(builder, color)

def TrackingLineStyleAddOpacity(builder, opacity):
    builder.PrependFloat64Slot(1, opacity, 0.0)

def AddOpacity(builder, opacity):
    TrackingLineStyleAddOpacity(builder, opacity)

def TrackingLineStyleAddDashPattern(builder, dashPattern):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(dashPattern), 0)

def AddDashPattern(builder, dashPattern):
    TrackingLineStyleAddDashPattern(builder, dashPattern)

def TrackingLineStyleStartDashPatternVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)

def StartDashPatternVector(builder, numElems):
    return TrackingLineStyleStartDashPatternVector(builder, numElems)

def TrackingLineStyleEnd(builder):
    return builder.EndObject()

def End(builder):
    return TrackingLineStyleEnd(builder)
