# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Duc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DucHatchStyle(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DucHatchStyle()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDucHatchStyle(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def DucHatchStyleBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x55\x43\x5F", size_prefixed=size_prefixed)

    # DucHatchStyle
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DucHatchStyle
    def HatchStyle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return None

    # DucHatchStyle
    def PatternName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DucHatchStyle
    def PatternScale(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # DucHatchStyle
    def PatternAngle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # DucHatchStyle
    def PatternOrigin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.DucPoint import DucPoint
            obj = DucPoint()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucHatchStyle
    def PatternDouble(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # DucHatchStyle
    def CustomPattern(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.CustomHatchPattern import CustomHatchPattern
            obj = CustomHatchPattern()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def DucHatchStyleStart(builder):
    builder.StartObject(7)

def Start(builder):
    DucHatchStyleStart(builder)

def DucHatchStyleAddHatchStyle(builder, hatchStyle):
    builder.PrependUint8Slot(0, hatchStyle, None)

def AddHatchStyle(builder, hatchStyle):
    DucHatchStyleAddHatchStyle(builder, hatchStyle)

def DucHatchStyleAddPatternName(builder, patternName):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(patternName), 0)

def AddPatternName(builder, patternName):
    DucHatchStyleAddPatternName(builder, patternName)

def DucHatchStyleAddPatternScale(builder, patternScale):
    builder.PrependFloat32Slot(2, patternScale, 0.0)

def AddPatternScale(builder, patternScale):
    DucHatchStyleAddPatternScale(builder, patternScale)

def DucHatchStyleAddPatternAngle(builder, patternAngle):
    builder.PrependFloat64Slot(3, patternAngle, 0.0)

def AddPatternAngle(builder, patternAngle):
    DucHatchStyleAddPatternAngle(builder, patternAngle)

def DucHatchStyleAddPatternOrigin(builder, patternOrigin):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(patternOrigin), 0)

def AddPatternOrigin(builder, patternOrigin):
    DucHatchStyleAddPatternOrigin(builder, patternOrigin)

def DucHatchStyleAddPatternDouble(builder, patternDouble):
    builder.PrependBoolSlot(5, patternDouble, 0)

def AddPatternDouble(builder, patternDouble):
    DucHatchStyleAddPatternDouble(builder, patternDouble)

def DucHatchStyleAddCustomPattern(builder, customPattern):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(customPattern), 0)

def AddCustomPattern(builder, customPattern):
    DucHatchStyleAddCustomPattern(builder, customPattern)

def DucHatchStyleEnd(builder):
    return builder.EndObject()

def End(builder):
    return DucHatchStyleEnd(builder)
