# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Duc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DucXRayElement(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DucXRayElement()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDucXRayElement(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def DucXRayElementBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x55\x43\x5F", size_prefixed=size_prefixed)

    # DucXRayElement
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DucXRayElement
    def Base(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc._DucElementBase import _DucElementBase
            obj = _DucElementBase()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucXRayElement
    def Style(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.DucXRayStyle import DucXRayStyle
            obj = DucXRayStyle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucXRayElement
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.DucPoint import DucPoint
            obj = DucPoint()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucXRayElement
    def Direction(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.DucPoint import DucPoint
            obj = DucPoint()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucXRayElement
    def StartFromOrigin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def DucXRayElementStart(builder):
    builder.StartObject(5)

def Start(builder):
    DucXRayElementStart(builder)

def DucXRayElementAddBase(builder, base):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(base), 0)

def AddBase(builder, base):
    DucXRayElementAddBase(builder, base)

def DucXRayElementAddStyle(builder, style):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(style), 0)

def AddStyle(builder, style):
    DucXRayElementAddStyle(builder, style)

def DucXRayElementAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    DucXRayElementAddOrigin(builder, origin)

def DucXRayElementAddDirection(builder, direction):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(direction), 0)

def AddDirection(builder, direction):
    DucXRayElementAddDirection(builder, direction)

def DucXRayElementAddStartFromOrigin(builder, startFromOrigin):
    builder.PrependBoolSlot(4, startFromOrigin, 0)

def AddStartFromOrigin(builder, startFromOrigin):
    DucXRayElementAddStartFromOrigin(builder, startFromOrigin)

def DucXRayElementEnd(builder):
    return builder.EndObject()

def End(builder):
    return DucXRayElementEnd(builder)
