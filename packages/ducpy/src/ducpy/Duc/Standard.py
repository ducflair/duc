# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Duc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Standard(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Standard()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsStandard(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def StandardBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x55\x43\x5F", size_prefixed=size_prefixed)

    # Standard
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Standard
    def Identifier(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.Identifier import Identifier
            obj = Identifier()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Standard
    def Version(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Standard
    def Readonly(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Standard
    def Overrides(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.StandardOverrides import StandardOverrides
            obj = StandardOverrides()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Standard
    def Styles(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.StandardStyles import StandardStyles
            obj = StandardStyles()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Standard
    def ViewSettings(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.StandardViewSettings import StandardViewSettings
            obj = StandardViewSettings()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Standard
    def Units(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.StandardUnits import StandardUnits
            obj = StandardUnits()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Standard
    def Validation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.StandardValidation import StandardValidation
            obj = StandardValidation()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def StandardStart(builder):
    builder.StartObject(8)

def Start(builder):
    StandardStart(builder)

def StandardAddIdentifier(builder, identifier):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(identifier), 0)

def AddIdentifier(builder, identifier):
    StandardAddIdentifier(builder, identifier)

def StandardAddVersion(builder, version):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(version), 0)

def AddVersion(builder, version):
    StandardAddVersion(builder, version)

def StandardAddReadonly(builder, readonly):
    builder.PrependBoolSlot(2, readonly, 0)

def AddReadonly(builder, readonly):
    StandardAddReadonly(builder, readonly)

def StandardAddOverrides(builder, overrides):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(overrides), 0)

def AddOverrides(builder, overrides):
    StandardAddOverrides(builder, overrides)

def StandardAddStyles(builder, styles):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(styles), 0)

def AddStyles(builder, styles):
    StandardAddStyles(builder, styles)

def StandardAddViewSettings(builder, viewSettings):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(viewSettings), 0)

def AddViewSettings(builder, viewSettings):
    StandardAddViewSettings(builder, viewSettings)

def StandardAddUnits(builder, units):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(units), 0)

def AddUnits(builder, units):
    StandardAddUnits(builder, units)

def StandardAddValidation(builder, validation):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(validation), 0)

def AddValidation(builder, validation):
    StandardAddValidation(builder, validation)

def StandardEnd(builder):
    return builder.EndObject()

def End(builder):
    return StandardEnd(builder)
