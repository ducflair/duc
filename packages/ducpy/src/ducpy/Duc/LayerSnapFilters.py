# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Duc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class LayerSnapFilters(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = LayerSnapFilters()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsLayerSnapFilters(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def LayerSnapFiltersBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x55\x43\x5F", size_prefixed=size_prefixed)

    # LayerSnapFilters
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # LayerSnapFilters
    def IncludeLayers(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # LayerSnapFilters
    def IncludeLayersLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # LayerSnapFilters
    def IncludeLayersIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # LayerSnapFilters
    def ExcludeLayers(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # LayerSnapFilters
    def ExcludeLayersLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # LayerSnapFilters
    def ExcludeLayersIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def LayerSnapFiltersStart(builder):
    builder.StartObject(2)

def Start(builder):
    LayerSnapFiltersStart(builder)

def LayerSnapFiltersAddIncludeLayers(builder, includeLayers):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(includeLayers), 0)

def AddIncludeLayers(builder, includeLayers):
    LayerSnapFiltersAddIncludeLayers(builder, includeLayers)

def LayerSnapFiltersStartIncludeLayersVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartIncludeLayersVector(builder, numElems):
    return LayerSnapFiltersStartIncludeLayersVector(builder, numElems)

def LayerSnapFiltersAddExcludeLayers(builder, excludeLayers):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(excludeLayers), 0)

def AddExcludeLayers(builder, excludeLayers):
    LayerSnapFiltersAddExcludeLayers(builder, excludeLayers)

def LayerSnapFiltersStartExcludeLayersVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartExcludeLayersVector(builder, numElems):
    return LayerSnapFiltersStartExcludeLayersVector(builder, numElems)

def LayerSnapFiltersEnd(builder):
    return builder.EndObject()

def End(builder):
    return LayerSnapFiltersEnd(builder)
