# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Duc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class VersionGraph(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = VersionGraph()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsVersionGraph(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def VersionGraphBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x55\x43\x5F", size_prefixed=size_prefixed)

    # VersionGraph
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # VersionGraph
    def UserCheckpointVersionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # VersionGraph
    def LatestVersionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # VersionGraph
    def Checkpoints(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Duc.Checkpoint import Checkpoint
            obj = Checkpoint()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # VersionGraph
    def CheckpointsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # VersionGraph
    def CheckpointsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # VersionGraph
    def Deltas(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Duc.Delta import Delta
            obj = Delta()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # VersionGraph
    def DeltasLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # VersionGraph
    def DeltasIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # VersionGraph
    def Metadata(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.VersionGraphMetadata import VersionGraphMetadata
            obj = VersionGraphMetadata()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def VersionGraphStart(builder):
    builder.StartObject(5)

def Start(builder):
    VersionGraphStart(builder)

def VersionGraphAddUserCheckpointVersionId(builder, userCheckpointVersionId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(userCheckpointVersionId), 0)

def AddUserCheckpointVersionId(builder, userCheckpointVersionId):
    VersionGraphAddUserCheckpointVersionId(builder, userCheckpointVersionId)

def VersionGraphAddLatestVersionId(builder, latestVersionId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(latestVersionId), 0)

def AddLatestVersionId(builder, latestVersionId):
    VersionGraphAddLatestVersionId(builder, latestVersionId)

def VersionGraphAddCheckpoints(builder, checkpoints):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(checkpoints), 0)

def AddCheckpoints(builder, checkpoints):
    VersionGraphAddCheckpoints(builder, checkpoints)

def VersionGraphStartCheckpointsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartCheckpointsVector(builder, numElems):
    return VersionGraphStartCheckpointsVector(builder, numElems)

def VersionGraphAddDeltas(builder, deltas):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(deltas), 0)

def AddDeltas(builder, deltas):
    VersionGraphAddDeltas(builder, deltas)

def VersionGraphStartDeltasVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartDeltasVector(builder, numElems):
    return VersionGraphStartDeltasVector(builder, numElems)

def VersionGraphAddMetadata(builder, metadata):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(metadata), 0)

def AddMetadata(builder, metadata):
    VersionGraphAddMetadata(builder, metadata)

def VersionGraphEnd(builder):
    return builder.EndObject()

def End(builder):
    return VersionGraphEnd(builder)
