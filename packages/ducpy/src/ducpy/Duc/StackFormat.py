# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Duc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class StackFormat(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = StackFormat()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsStackFormat(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def StackFormatBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x55\x43\x5F", size_prefixed=size_prefixed)

    # StackFormat
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # StackFormat
    def AutoStack(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # StackFormat
    def StackChars(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # StackFormat
    def StackCharsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StackFormat
    def StackCharsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # StackFormat
    def Properties(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.StackFormatProperties import StackFormatProperties
            obj = StackFormatProperties()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def StackFormatStart(builder):
    builder.StartObject(3)

def Start(builder):
    StackFormatStart(builder)

def StackFormatAddAutoStack(builder, autoStack):
    builder.PrependBoolSlot(0, autoStack, 0)

def AddAutoStack(builder, autoStack):
    StackFormatAddAutoStack(builder, autoStack)

def StackFormatAddStackChars(builder, stackChars):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(stackChars), 0)

def AddStackChars(builder, stackChars):
    StackFormatAddStackChars(builder, stackChars)

def StackFormatStartStackCharsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartStackCharsVector(builder, numElems):
    return StackFormatStartStackCharsVector(builder, numElems)

def StackFormatAddProperties(builder, properties):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(properties), 0)

def AddProperties(builder, properties):
    StackFormatAddProperties(builder, properties)

def StackFormatEnd(builder):
    return builder.EndObject()

def End(builder):
    return StackFormatEnd(builder)
