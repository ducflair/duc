# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Duc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class SnapSettings(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SnapSettings()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSnapSettings(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def SnapSettingsBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x55\x43\x5F", size_prefixed=size_prefixed)

    # SnapSettings
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SnapSettings
    def Readonly(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # SnapSettings
    def TwistAngle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # SnapSettings
    def SnapTolerance(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SnapSettings
    def ObjectSnapAperture(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SnapSettings
    def IsOrthoModeOn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # SnapSettings
    def PolarTracking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.PolarTrackingSettings import PolarTrackingSettings
            obj = PolarTrackingSettings()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SnapSettings
    def IsObjectSnapOn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # SnapSettings
    def ActiveObjectSnapModes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # SnapSettings
    def ActiveObjectSnapModesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # SnapSettings
    def ActiveObjectSnapModesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SnapSettings
    def ActiveObjectSnapModesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # SnapSettings
    def SnapPriority(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # SnapSettings
    def SnapPriorityAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # SnapSettings
    def SnapPriorityLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SnapSettings
    def SnapPriorityIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # SnapSettings
    def ShowTrackingLines(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # SnapSettings
    def TrackingLineStyle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.TrackingLineStyle import TrackingLineStyle
            obj = TrackingLineStyle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SnapSettings
    def DynamicSnap(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.DynamicSnapSettings import DynamicSnapSettings
            obj = DynamicSnapSettings()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SnapSettings
    def TemporaryOverrides(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Duc.SnapOverride import SnapOverride
            obj = SnapOverride()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SnapSettings
    def TemporaryOverridesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SnapSettings
    def TemporaryOverridesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        return o == 0

    # SnapSettings
    def IncrementalDistance(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # SnapSettings
    def MagneticStrength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # SnapSettings
    def LayerSnapFilters(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.LayerSnapFilters import LayerSnapFilters
            obj = LayerSnapFilters()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SnapSettings
    def ElementTypeFilters(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # SnapSettings
    def ElementTypeFiltersLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SnapSettings
    def ElementTypeFiltersIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        return o == 0

    # SnapSettings
    def SnapMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return None

    # SnapSettings
    def SnapMarkers(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.SnapMarkerSettings import SnapMarkerSettings
            obj = SnapMarkerSettings()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SnapSettings
    def ConstructionSnapEnabled(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # SnapSettings
    def SnapToGridIntersections(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def SnapSettingsStart(builder):
    builder.StartObject(21)

def Start(builder):
    SnapSettingsStart(builder)

def SnapSettingsAddReadonly(builder, readonly):
    builder.PrependBoolSlot(0, readonly, 0)

def AddReadonly(builder, readonly):
    SnapSettingsAddReadonly(builder, readonly)

def SnapSettingsAddTwistAngle(builder, twistAngle):
    builder.PrependFloat64Slot(1, twistAngle, 0.0)

def AddTwistAngle(builder, twistAngle):
    SnapSettingsAddTwistAngle(builder, twistAngle)

def SnapSettingsAddSnapTolerance(builder, snapTolerance):
    builder.PrependInt32Slot(2, snapTolerance, 0)

def AddSnapTolerance(builder, snapTolerance):
    SnapSettingsAddSnapTolerance(builder, snapTolerance)

def SnapSettingsAddObjectSnapAperture(builder, objectSnapAperture):
    builder.PrependInt32Slot(3, objectSnapAperture, 0)

def AddObjectSnapAperture(builder, objectSnapAperture):
    SnapSettingsAddObjectSnapAperture(builder, objectSnapAperture)

def SnapSettingsAddIsOrthoModeOn(builder, isOrthoModeOn):
    builder.PrependBoolSlot(4, isOrthoModeOn, 0)

def AddIsOrthoModeOn(builder, isOrthoModeOn):
    SnapSettingsAddIsOrthoModeOn(builder, isOrthoModeOn)

def SnapSettingsAddPolarTracking(builder, polarTracking):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(polarTracking), 0)

def AddPolarTracking(builder, polarTracking):
    SnapSettingsAddPolarTracking(builder, polarTracking)

def SnapSettingsAddIsObjectSnapOn(builder, isObjectSnapOn):
    builder.PrependBoolSlot(6, isObjectSnapOn, 0)

def AddIsObjectSnapOn(builder, isObjectSnapOn):
    SnapSettingsAddIsObjectSnapOn(builder, isObjectSnapOn)

def SnapSettingsAddActiveObjectSnapModes(builder, activeObjectSnapModes):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(activeObjectSnapModes), 0)

def AddActiveObjectSnapModes(builder, activeObjectSnapModes):
    SnapSettingsAddActiveObjectSnapModes(builder, activeObjectSnapModes)

def SnapSettingsStartActiveObjectSnapModesVector(builder, numElems):
    return builder.StartVector(1, numElems, 1)

def StartActiveObjectSnapModesVector(builder, numElems):
    return SnapSettingsStartActiveObjectSnapModesVector(builder, numElems)

def SnapSettingsAddSnapPriority(builder, snapPriority):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(snapPriority), 0)

def AddSnapPriority(builder, snapPriority):
    SnapSettingsAddSnapPriority(builder, snapPriority)

def SnapSettingsStartSnapPriorityVector(builder, numElems):
    return builder.StartVector(1, numElems, 1)

def StartSnapPriorityVector(builder, numElems):
    return SnapSettingsStartSnapPriorityVector(builder, numElems)

def SnapSettingsAddShowTrackingLines(builder, showTrackingLines):
    builder.PrependBoolSlot(9, showTrackingLines, 0)

def AddShowTrackingLines(builder, showTrackingLines):
    SnapSettingsAddShowTrackingLines(builder, showTrackingLines)

def SnapSettingsAddTrackingLineStyle(builder, trackingLineStyle):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(trackingLineStyle), 0)

def AddTrackingLineStyle(builder, trackingLineStyle):
    SnapSettingsAddTrackingLineStyle(builder, trackingLineStyle)

def SnapSettingsAddDynamicSnap(builder, dynamicSnap):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(dynamicSnap), 0)

def AddDynamicSnap(builder, dynamicSnap):
    SnapSettingsAddDynamicSnap(builder, dynamicSnap)

def SnapSettingsAddTemporaryOverrides(builder, temporaryOverrides):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(temporaryOverrides), 0)

def AddTemporaryOverrides(builder, temporaryOverrides):
    SnapSettingsAddTemporaryOverrides(builder, temporaryOverrides)

def SnapSettingsStartTemporaryOverridesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartTemporaryOverridesVector(builder, numElems):
    return SnapSettingsStartTemporaryOverridesVector(builder, numElems)

def SnapSettingsAddIncrementalDistance(builder, incrementalDistance):
    builder.PrependFloat64Slot(13, incrementalDistance, 0.0)

def AddIncrementalDistance(builder, incrementalDistance):
    SnapSettingsAddIncrementalDistance(builder, incrementalDistance)

def SnapSettingsAddMagneticStrength(builder, magneticStrength):
    builder.PrependFloat64Slot(14, magneticStrength, 0.0)

def AddMagneticStrength(builder, magneticStrength):
    SnapSettingsAddMagneticStrength(builder, magneticStrength)

def SnapSettingsAddLayerSnapFilters(builder, layerSnapFilters):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(layerSnapFilters), 0)

def AddLayerSnapFilters(builder, layerSnapFilters):
    SnapSettingsAddLayerSnapFilters(builder, layerSnapFilters)

def SnapSettingsAddElementTypeFilters(builder, elementTypeFilters):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(elementTypeFilters), 0)

def AddElementTypeFilters(builder, elementTypeFilters):
    SnapSettingsAddElementTypeFilters(builder, elementTypeFilters)

def SnapSettingsStartElementTypeFiltersVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartElementTypeFiltersVector(builder, numElems):
    return SnapSettingsStartElementTypeFiltersVector(builder, numElems)

def SnapSettingsAddSnapMode(builder, snapMode):
    builder.PrependUint8Slot(17, snapMode, None)

def AddSnapMode(builder, snapMode):
    SnapSettingsAddSnapMode(builder, snapMode)

def SnapSettingsAddSnapMarkers(builder, snapMarkers):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(snapMarkers), 0)

def AddSnapMarkers(builder, snapMarkers):
    SnapSettingsAddSnapMarkers(builder, snapMarkers)

def SnapSettingsAddConstructionSnapEnabled(builder, constructionSnapEnabled):
    builder.PrependBoolSlot(19, constructionSnapEnabled, 0)

def AddConstructionSnapEnabled(builder, constructionSnapEnabled):
    SnapSettingsAddConstructionSnapEnabled(builder, constructionSnapEnabled)

def SnapSettingsAddSnapToGridIntersections(builder, snapToGridIntersections):
    builder.PrependBoolSlot(20, snapToGridIntersections, 0)

def AddSnapToGridIntersections(builder, snapToGridIntersections):
    SnapSettingsAddSnapToGridIntersections(builder, snapToGridIntersections)

def SnapSettingsEnd(builder):
    return builder.EndObject()

def End(builder):
    return SnapSettingsEnd(builder)
