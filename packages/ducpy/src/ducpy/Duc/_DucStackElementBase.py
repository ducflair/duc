# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Duc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class _DucStackElementBase(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = _DucStackElementBase()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAs_DucStackElementBase(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def _DucStackElementBaseBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x55\x43\x5F", size_prefixed=size_prefixed)

    # _DucStackElementBase
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # _DucStackElementBase
    def Base(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc._DucElementBase import _DucElementBase
            obj = _DucElementBase()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # _DucStackElementBase
    def StackBase(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc._DucStackBase import _DucStackBase
            obj = _DucStackBase()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # _DucStackElementBase
    def Clip(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # _DucStackElementBase
    def LabelVisible(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # _DucStackElementBase
    def StandardOverride(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def _DucStackElementBaseStart(builder):
    builder.StartObject(5)

def Start(builder):
    _DucStackElementBaseStart(builder)

def _DucStackElementBaseAddBase(builder, base):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(base), 0)

def AddBase(builder, base):
    _DucStackElementBaseAddBase(builder, base)

def _DucStackElementBaseAddStackBase(builder, stackBase):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(stackBase), 0)

def AddStackBase(builder, stackBase):
    _DucStackElementBaseAddStackBase(builder, stackBase)

def _DucStackElementBaseAddClip(builder, clip):
    builder.PrependBoolSlot(2, clip, 0)

def AddClip(builder, clip):
    _DucStackElementBaseAddClip(builder, clip)

def _DucStackElementBaseAddLabelVisible(builder, labelVisible):
    builder.PrependBoolSlot(3, labelVisible, 0)

def AddLabelVisible(builder, labelVisible):
    _DucStackElementBaseAddLabelVisible(builder, labelVisible)

def _DucStackElementBaseAddStandardOverride(builder, standardOverride):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(standardOverride), 0)

def AddStandardOverride(builder, standardOverride):
    _DucStackElementBaseAddStandardOverride(builder, standardOverride)

def _DucStackElementBaseEnd(builder):
    return builder.EndObject()

def End(builder):
    return _DucStackElementBaseEnd(builder)
