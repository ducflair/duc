# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Duc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DucView(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DucView()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDucView(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def DucViewBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x55\x43\x5F", size_prefixed=size_prefixed)

    # DucView
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DucView
    def ScrollX(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # DucView
    def ScrollY(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # DucView
    def Zoom(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # DucView
    def TwistAngle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # DucView
    def CenterPoint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.DucPoint import DucPoint
            obj = DucPoint()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucView
    def Scope(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def DucViewStart(builder):
    builder.StartObject(6)

def Start(builder):
    DucViewStart(builder)

def DucViewAddScrollX(builder, scrollX):
    builder.PrependFloat64Slot(0, scrollX, 0.0)

def AddScrollX(builder, scrollX):
    DucViewAddScrollX(builder, scrollX)

def DucViewAddScrollY(builder, scrollY):
    builder.PrependFloat64Slot(1, scrollY, 0.0)

def AddScrollY(builder, scrollY):
    DucViewAddScrollY(builder, scrollY)

def DucViewAddZoom(builder, zoom):
    builder.PrependFloat64Slot(2, zoom, 0.0)

def AddZoom(builder, zoom):
    DucViewAddZoom(builder, zoom)

def DucViewAddTwistAngle(builder, twistAngle):
    builder.PrependFloat64Slot(3, twistAngle, 0.0)

def AddTwistAngle(builder, twistAngle):
    DucViewAddTwistAngle(builder, twistAngle)

def DucViewAddCenterPoint(builder, centerPoint):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(centerPoint), 0)

def AddCenterPoint(builder, centerPoint):
    DucViewAddCenterPoint(builder, centerPoint)

def DucViewAddScope(builder, scope):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(scope), 0)

def AddScope(builder, scope):
    DucViewAddScope(builder, scope)

def DucViewEnd(builder):
    return builder.EndObject()

def End(builder):
    return DucViewEnd(builder)
