# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Duc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ParagraphFormatting(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ParagraphFormatting()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsParagraphFormatting(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def ParagraphFormattingBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x55\x43\x5F", size_prefixed=size_prefixed)

    # ParagraphFormatting
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ParagraphFormatting
    def FirstLineIndent(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # ParagraphFormatting
    def HangingIndent(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # ParagraphFormatting
    def LeftIndent(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # ParagraphFormatting
    def RightIndent(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # ParagraphFormatting
    def SpaceBefore(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # ParagraphFormatting
    def SpaceAfter(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # ParagraphFormatting
    def TabStops(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # ParagraphFormatting
    def TabStopsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float64Flags, o)
        return 0

    # ParagraphFormatting
    def TabStopsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ParagraphFormatting
    def TabStopsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

def ParagraphFormattingStart(builder):
    builder.StartObject(7)

def Start(builder):
    ParagraphFormattingStart(builder)

def ParagraphFormattingAddFirstLineIndent(builder, firstLineIndent):
    builder.PrependFloat64Slot(0, firstLineIndent, 0.0)

def AddFirstLineIndent(builder, firstLineIndent):
    ParagraphFormattingAddFirstLineIndent(builder, firstLineIndent)

def ParagraphFormattingAddHangingIndent(builder, hangingIndent):
    builder.PrependFloat64Slot(1, hangingIndent, 0.0)

def AddHangingIndent(builder, hangingIndent):
    ParagraphFormattingAddHangingIndent(builder, hangingIndent)

def ParagraphFormattingAddLeftIndent(builder, leftIndent):
    builder.PrependFloat64Slot(2, leftIndent, 0.0)

def AddLeftIndent(builder, leftIndent):
    ParagraphFormattingAddLeftIndent(builder, leftIndent)

def ParagraphFormattingAddRightIndent(builder, rightIndent):
    builder.PrependFloat64Slot(3, rightIndent, 0.0)

def AddRightIndent(builder, rightIndent):
    ParagraphFormattingAddRightIndent(builder, rightIndent)

def ParagraphFormattingAddSpaceBefore(builder, spaceBefore):
    builder.PrependFloat64Slot(4, spaceBefore, 0.0)

def AddSpaceBefore(builder, spaceBefore):
    ParagraphFormattingAddSpaceBefore(builder, spaceBefore)

def ParagraphFormattingAddSpaceAfter(builder, spaceAfter):
    builder.PrependFloat64Slot(5, spaceAfter, 0.0)

def AddSpaceAfter(builder, spaceAfter):
    ParagraphFormattingAddSpaceAfter(builder, spaceAfter)

def ParagraphFormattingAddTabStops(builder, tabStops):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(tabStops), 0)

def AddTabStops(builder, tabStops):
    ParagraphFormattingAddTabStops(builder, tabStops)

def ParagraphFormattingStartTabStopsVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)

def StartTabStopsVector(builder, numElems):
    return ParagraphFormattingStartTabStopsVector(builder, numElems)

def ParagraphFormattingEnd(builder):
    return builder.EndObject()

def End(builder):
    return ParagraphFormattingEnd(builder)
