# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Duc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class _DucStackBase(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = _DucStackBase()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAs_DucStackBase(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def _DucStackBaseBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x55\x43\x5F", size_prefixed=size_prefixed)

    # _DucStackBase
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # _DucStackBase
    def Label(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # _DucStackBase
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # _DucStackBase
    def IsCollapsed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # _DucStackBase
    def IsPlot(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # _DucStackBase
    def IsVisible(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # _DucStackBase
    def Locked(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # _DucStackBase
    def Styles(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.DucStackLikeStyles import DucStackLikeStyles
            obj = DucStackLikeStyles()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def _DucStackBaseStart(builder):
    builder.StartObject(7)

def Start(builder):
    _DucStackBaseStart(builder)

def _DucStackBaseAddLabel(builder, label):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(label), 0)

def AddLabel(builder, label):
    _DucStackBaseAddLabel(builder, label)

def _DucStackBaseAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def AddDescription(builder, description):
    _DucStackBaseAddDescription(builder, description)

def _DucStackBaseAddIsCollapsed(builder, isCollapsed):
    builder.PrependBoolSlot(2, isCollapsed, 0)

def AddIsCollapsed(builder, isCollapsed):
    _DucStackBaseAddIsCollapsed(builder, isCollapsed)

def _DucStackBaseAddIsPlot(builder, isPlot):
    builder.PrependBoolSlot(3, isPlot, 0)

def AddIsPlot(builder, isPlot):
    _DucStackBaseAddIsPlot(builder, isPlot)

def _DucStackBaseAddIsVisible(builder, isVisible):
    builder.PrependBoolSlot(4, isVisible, 0)

def AddIsVisible(builder, isVisible):
    _DucStackBaseAddIsVisible(builder, isVisible)

def _DucStackBaseAddLocked(builder, locked):
    builder.PrependBoolSlot(5, locked, 0)

def AddLocked(builder, locked):
    _DucStackBaseAddLocked(builder, locked)

def _DucStackBaseAddStyles(builder, styles):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(styles), 0)

def AddStyles(builder, styles):
    _DucStackBaseAddStyles(builder, styles)

def _DucStackBaseEnd(builder):
    return builder.EndObject()

def End(builder):
    return _DucStackBaseEnd(builder)
