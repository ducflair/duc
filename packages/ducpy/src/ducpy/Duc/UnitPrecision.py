# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Duc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class UnitPrecision(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = UnitPrecision()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsUnitPrecision(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def UnitPrecisionBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x55\x43\x5F", size_prefixed=size_prefixed)

    # UnitPrecision
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # UnitPrecision
    def Linear(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UnitPrecision
    def Angular(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UnitPrecision
    def Area(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UnitPrecision
    def Volume(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def UnitPrecisionStart(builder):
    builder.StartObject(4)

def Start(builder):
    UnitPrecisionStart(builder)

def UnitPrecisionAddLinear(builder, linear):
    builder.PrependInt32Slot(0, linear, 0)

def AddLinear(builder, linear):
    UnitPrecisionAddLinear(builder, linear)

def UnitPrecisionAddAngular(builder, angular):
    builder.PrependInt32Slot(1, angular, 0)

def AddAngular(builder, angular):
    UnitPrecisionAddAngular(builder, angular)

def UnitPrecisionAddArea(builder, area):
    builder.PrependInt32Slot(2, area, 0)

def AddArea(builder, area):
    UnitPrecisionAddArea(builder, area)

def UnitPrecisionAddVolume(builder, volume):
    builder.PrependInt32Slot(3, volume, 0)

def AddVolume(builder, volume):
    UnitPrecisionAddVolume(builder, volume)

def UnitPrecisionEnd(builder):
    return builder.EndObject()

def End(builder):
    return UnitPrecisionEnd(builder)
