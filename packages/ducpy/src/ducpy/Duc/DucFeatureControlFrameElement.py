# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Duc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DucFeatureControlFrameElement(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DucFeatureControlFrameElement()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDucFeatureControlFrameElement(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def DucFeatureControlFrameElementBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x55\x43\x5F", size_prefixed=size_prefixed)

    # DucFeatureControlFrameElement
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DucFeatureControlFrameElement
    def Base(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc._DucElementBase import _DucElementBase
            obj = _DucElementBase()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucFeatureControlFrameElement
    def Style(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.DucFeatureControlFrameStyle import DucFeatureControlFrameStyle
            obj = DucFeatureControlFrameStyle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucFeatureControlFrameElement
    def Rows(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Duc.FCFSegmentRow import FCFSegmentRow
            obj = FCFSegmentRow()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucFeatureControlFrameElement
    def RowsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DucFeatureControlFrameElement
    def RowsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # DucFeatureControlFrameElement
    def FrameModifiers(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.FCFFrameModifiers import FCFFrameModifiers
            obj = FCFFrameModifiers()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucFeatureControlFrameElement
    def LeaderElementId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DucFeatureControlFrameElement
    def DatumDefinition(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.FCFDatumDefinition import FCFDatumDefinition
            obj = FCFDatumDefinition()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def DucFeatureControlFrameElementStart(builder):
    builder.StartObject(6)

def Start(builder):
    DucFeatureControlFrameElementStart(builder)

def DucFeatureControlFrameElementAddBase(builder, base):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(base), 0)

def AddBase(builder, base):
    DucFeatureControlFrameElementAddBase(builder, base)

def DucFeatureControlFrameElementAddStyle(builder, style):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(style), 0)

def AddStyle(builder, style):
    DucFeatureControlFrameElementAddStyle(builder, style)

def DucFeatureControlFrameElementAddRows(builder, rows):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(rows), 0)

def AddRows(builder, rows):
    DucFeatureControlFrameElementAddRows(builder, rows)

def DucFeatureControlFrameElementStartRowsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartRowsVector(builder, numElems):
    return DucFeatureControlFrameElementStartRowsVector(builder, numElems)

def DucFeatureControlFrameElementAddFrameModifiers(builder, frameModifiers):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(frameModifiers), 0)

def AddFrameModifiers(builder, frameModifiers):
    DucFeatureControlFrameElementAddFrameModifiers(builder, frameModifiers)

def DucFeatureControlFrameElementAddLeaderElementId(builder, leaderElementId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(leaderElementId), 0)

def AddLeaderElementId(builder, leaderElementId):
    DucFeatureControlFrameElementAddLeaderElementId(builder, leaderElementId)

def DucFeatureControlFrameElementAddDatumDefinition(builder, datumDefinition):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(datumDefinition), 0)

def AddDatumDefinition(builder, datumDefinition):
    DucFeatureControlFrameElementAddDatumDefinition(builder, datumDefinition)

def DucFeatureControlFrameElementEnd(builder):
    return builder.EndObject()

def End(builder):
    return DucFeatureControlFrameElementEnd(builder)
