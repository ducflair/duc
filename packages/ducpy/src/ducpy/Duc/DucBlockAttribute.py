# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Duc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DucBlockAttribute(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DucBlockAttribute()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDucBlockAttribute(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def DucBlockAttributeBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x55\x43\x5F", size_prefixed=size_prefixed)

    # DucBlockAttribute
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DucBlockAttribute
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DucBlockAttribute
    def Details(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.DucBlockAttributeDetails import DucBlockAttributeDetails
            obj = DucBlockAttributeDetails()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def DucBlockAttributeStart(builder):
    builder.StartObject(2)

def Start(builder):
    DucBlockAttributeStart(builder)

def DucBlockAttributeAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    DucBlockAttributeAddName(builder, name)

def DucBlockAttributeAddDetails(builder, details):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(details), 0)

def AddDetails(builder, details):
    DucBlockAttributeAddDetails(builder, details)

def DucBlockAttributeEnd(builder):
    return builder.EndObject()

def End(builder):
    return DucBlockAttributeEnd(builder)
