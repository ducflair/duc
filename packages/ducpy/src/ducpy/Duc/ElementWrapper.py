# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Duc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ElementWrapper(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ElementWrapper()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsElementWrapper(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def ElementWrapperBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x55\x43\x5F", size_prefixed=size_prefixed)

    # ElementWrapper
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ElementWrapper
    def ElementType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # ElementWrapper
    def Element(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

def ElementWrapperStart(builder):
    builder.StartObject(2)

def Start(builder):
    ElementWrapperStart(builder)

def ElementWrapperAddElementType(builder, elementType):
    builder.PrependUint8Slot(0, elementType, 0)

def AddElementType(builder, elementType):
    ElementWrapperAddElementType(builder, elementType)

def ElementWrapperAddElement(builder, element):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(element), 0)

def AddElement(builder, element):
    ElementWrapperAddElement(builder, element)

def ElementWrapperEnd(builder):
    return builder.EndObject()

def End(builder):
    return ElementWrapperEnd(builder)
