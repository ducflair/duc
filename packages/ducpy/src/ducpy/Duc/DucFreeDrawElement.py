# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Duc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DucFreeDrawElement(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DucFreeDrawElement()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDucFreeDrawElement(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def DucFreeDrawElementBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x55\x43\x5F", size_prefixed=size_prefixed)

    # DucFreeDrawElement
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DucFreeDrawElement
    def Base(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc._DucElementBase import _DucElementBase
            obj = _DucElementBase()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucFreeDrawElement
    def Points(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Duc.DucPoint import DucPoint
            obj = DucPoint()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucFreeDrawElement
    def PointsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DucFreeDrawElement
    def PointsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # DucFreeDrawElement
    def Size(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # DucFreeDrawElement
    def Thinning(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # DucFreeDrawElement
    def Smoothing(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # DucFreeDrawElement
    def Streamline(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # DucFreeDrawElement
    def Easing(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DucFreeDrawElement
    def Start(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.DucFreeDrawEnds import DucFreeDrawEnds
            obj = DucFreeDrawEnds()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucFreeDrawElement
    def End(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.DucFreeDrawEnds import DucFreeDrawEnds
            obj = DucFreeDrawEnds()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucFreeDrawElement
    def Pressures(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # DucFreeDrawElement
    def PressuresAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # DucFreeDrawElement
    def PressuresLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DucFreeDrawElement
    def PressuresIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

    # DucFreeDrawElement
    def SimulatePressure(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # DucFreeDrawElement
    def LastCommittedPoint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.DucPoint import DucPoint
            obj = DucPoint()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucFreeDrawElement
    def SvgPath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def DucFreeDrawElementStart(builder):
    builder.StartObject(13)

def Start(builder):
    DucFreeDrawElementStart(builder)

def DucFreeDrawElementAddBase(builder, base):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(base), 0)

def AddBase(builder, base):
    DucFreeDrawElementAddBase(builder, base)

def DucFreeDrawElementAddPoints(builder, points):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(points), 0)

def AddPoints(builder, points):
    DucFreeDrawElementAddPoints(builder, points)

def DucFreeDrawElementStartPointsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartPointsVector(builder, numElems):
    return DucFreeDrawElementStartPointsVector(builder, numElems)

def DucFreeDrawElementAddSize(builder, size):
    builder.PrependFloat64Slot(2, size, 0.0)

def AddSize(builder, size):
    DucFreeDrawElementAddSize(builder, size)

def DucFreeDrawElementAddThinning(builder, thinning):
    builder.PrependFloat32Slot(3, thinning, 0.0)

def AddThinning(builder, thinning):
    DucFreeDrawElementAddThinning(builder, thinning)

def DucFreeDrawElementAddSmoothing(builder, smoothing):
    builder.PrependFloat32Slot(4, smoothing, 0.0)

def AddSmoothing(builder, smoothing):
    DucFreeDrawElementAddSmoothing(builder, smoothing)

def DucFreeDrawElementAddStreamline(builder, streamline):
    builder.PrependFloat32Slot(5, streamline, 0.0)

def AddStreamline(builder, streamline):
    DucFreeDrawElementAddStreamline(builder, streamline)

def DucFreeDrawElementAddEasing(builder, easing):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(easing), 0)

def AddEasing(builder, easing):
    DucFreeDrawElementAddEasing(builder, easing)

def DucFreeDrawElementAddStart(builder, start):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(start), 0)

def AddStart(builder, start):
    DucFreeDrawElementAddStart(builder, start)

def DucFreeDrawElementAddEnd(builder, end):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(end), 0)

def AddEnd(builder, end):
    DucFreeDrawElementAddEnd(builder, end)

def DucFreeDrawElementAddPressures(builder, pressures):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(pressures), 0)

def AddPressures(builder, pressures):
    DucFreeDrawElementAddPressures(builder, pressures)

def DucFreeDrawElementStartPressuresVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartPressuresVector(builder, numElems):
    return DucFreeDrawElementStartPressuresVector(builder, numElems)

def DucFreeDrawElementAddSimulatePressure(builder, simulatePressure):
    builder.PrependBoolSlot(10, simulatePressure, 0)

def AddSimulatePressure(builder, simulatePressure):
    DucFreeDrawElementAddSimulatePressure(builder, simulatePressure)

def DucFreeDrawElementAddLastCommittedPoint(builder, lastCommittedPoint):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(lastCommittedPoint), 0)

def AddLastCommittedPoint(builder, lastCommittedPoint):
    DucFreeDrawElementAddLastCommittedPoint(builder, lastCommittedPoint)

def DucFreeDrawElementAddSvgPath(builder, svgPath):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(svgPath), 0)

def AddSvgPath(builder, svgPath):
    DucFreeDrawElementAddSvgPath(builder, svgPath)

def DucFreeDrawElementEnd(builder):
    return builder.EndObject()

def End(builder):
    return DucFreeDrawElementEnd(builder)
