# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Duc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class LeaderBlockContent(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = LeaderBlockContent()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsLeaderBlockContent(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def LeaderBlockContentBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x55\x43\x5F", size_prefixed=size_prefixed)

    # LeaderBlockContent
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # LeaderBlockContent
    def BlockId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # LeaderBlockContent
    def AttributeValues(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Duc.StringValueEntry import StringValueEntry
            obj = StringValueEntry()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # LeaderBlockContent
    def AttributeValuesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # LeaderBlockContent
    def AttributeValuesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # LeaderBlockContent
    def ElementOverrides(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Duc.StringValueEntry import StringValueEntry
            obj = StringValueEntry()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # LeaderBlockContent
    def ElementOverridesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # LeaderBlockContent
    def ElementOverridesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def LeaderBlockContentStart(builder):
    builder.StartObject(3)

def Start(builder):
    LeaderBlockContentStart(builder)

def LeaderBlockContentAddBlockId(builder, blockId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(blockId), 0)

def AddBlockId(builder, blockId):
    LeaderBlockContentAddBlockId(builder, blockId)

def LeaderBlockContentAddAttributeValues(builder, attributeValues):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(attributeValues), 0)

def AddAttributeValues(builder, attributeValues):
    LeaderBlockContentAddAttributeValues(builder, attributeValues)

def LeaderBlockContentStartAttributeValuesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartAttributeValuesVector(builder, numElems):
    return LeaderBlockContentStartAttributeValuesVector(builder, numElems)

def LeaderBlockContentAddElementOverrides(builder, elementOverrides):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(elementOverrides), 0)

def AddElementOverrides(builder, elementOverrides):
    LeaderBlockContentAddElementOverrides(builder, elementOverrides)

def LeaderBlockContentStartElementOverridesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartElementOverridesVector(builder, numElems):
    return LeaderBlockContentStartElementOverridesVector(builder, numElems)

def LeaderBlockContentEnd(builder):
    return builder.EndObject()

def End(builder):
    return LeaderBlockContentEnd(builder)
