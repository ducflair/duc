# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Duc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DucEllipseElement(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DucEllipseElement()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDucEllipseElement(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def DucEllipseElementBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x55\x43\x5F", size_prefixed=size_prefixed)

    # DucEllipseElement
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DucEllipseElement
    def Base(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc._DucElementBase import _DucElementBase
            obj = _DucElementBase()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucEllipseElement
    def Ratio(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # DucEllipseElement
    def StartAngle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # DucEllipseElement
    def EndAngle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # DucEllipseElement
    def ShowAuxCrosshair(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def DucEllipseElementStart(builder):
    builder.StartObject(5)

def Start(builder):
    DucEllipseElementStart(builder)

def DucEllipseElementAddBase(builder, base):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(base), 0)

def AddBase(builder, base):
    DucEllipseElementAddBase(builder, base)

def DucEllipseElementAddRatio(builder, ratio):
    builder.PrependFloat32Slot(1, ratio, 0.0)

def AddRatio(builder, ratio):
    DucEllipseElementAddRatio(builder, ratio)

def DucEllipseElementAddStartAngle(builder, startAngle):
    builder.PrependFloat64Slot(2, startAngle, 0.0)

def AddStartAngle(builder, startAngle):
    DucEllipseElementAddStartAngle(builder, startAngle)

def DucEllipseElementAddEndAngle(builder, endAngle):
    builder.PrependFloat64Slot(3, endAngle, 0.0)

def AddEndAngle(builder, endAngle):
    DucEllipseElementAddEndAngle(builder, endAngle)

def DucEllipseElementAddShowAuxCrosshair(builder, showAuxCrosshair):
    builder.PrependBoolSlot(4, showAuxCrosshair, 0)

def AddShowAuxCrosshair(builder, showAuxCrosshair):
    DucEllipseElementAddShowAuxCrosshair(builder, showAuxCrosshair)

def DucEllipseElementEnd(builder):
    return builder.EndObject()

def End(builder):
    return DucEllipseElementEnd(builder)
