# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Duc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DimensionDefinitionPoints(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DimensionDefinitionPoints()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDimensionDefinitionPoints(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def DimensionDefinitionPointsBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x55\x43\x5F", size_prefixed=size_prefixed)

    # DimensionDefinitionPoints
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DimensionDefinitionPoints
    def Origin1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = o + self._tab.Pos
            from Duc.GeometricPoint import GeometricPoint
            obj = GeometricPoint()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DimensionDefinitionPoints
    def Origin2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = o + self._tab.Pos
            from Duc.GeometricPoint import GeometricPoint
            obj = GeometricPoint()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DimensionDefinitionPoints
    def Location(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = o + self._tab.Pos
            from Duc.GeometricPoint import GeometricPoint
            obj = GeometricPoint()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DimensionDefinitionPoints
    def Center(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = o + self._tab.Pos
            from Duc.GeometricPoint import GeometricPoint
            obj = GeometricPoint()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DimensionDefinitionPoints
    def Jog(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = o + self._tab.Pos
            from Duc.GeometricPoint import GeometricPoint
            obj = GeometricPoint()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def DimensionDefinitionPointsStart(builder):
    builder.StartObject(5)

def Start(builder):
    DimensionDefinitionPointsStart(builder)

def DimensionDefinitionPointsAddOrigin1(builder, origin1):
    builder.PrependStructSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(origin1), 0)

def AddOrigin1(builder, origin1):
    DimensionDefinitionPointsAddOrigin1(builder, origin1)

def DimensionDefinitionPointsAddOrigin2(builder, origin2):
    builder.PrependStructSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(origin2), 0)

def AddOrigin2(builder, origin2):
    DimensionDefinitionPointsAddOrigin2(builder, origin2)

def DimensionDefinitionPointsAddLocation(builder, location):
    builder.PrependStructSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(location), 0)

def AddLocation(builder, location):
    DimensionDefinitionPointsAddLocation(builder, location)

def DimensionDefinitionPointsAddCenter(builder, center):
    builder.PrependStructSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(center), 0)

def AddCenter(builder, center):
    DimensionDefinitionPointsAddCenter(builder, center)

def DimensionDefinitionPointsAddJog(builder, jog):
    builder.PrependStructSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(jog), 0)

def AddJog(builder, jog):
    DimensionDefinitionPointsAddJog(builder, jog)

def DimensionDefinitionPointsEnd(builder):
    return builder.EndObject()

def End(builder):
    return DimensionDefinitionPointsEnd(builder)
