# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Duc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class StandardStyles(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = StandardStyles()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsStandardStyles(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def StandardStylesBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x55\x43\x5F", size_prefixed=size_prefixed)

    # StandardStyles
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # StandardStyles
    def CommonStyles(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Duc.IdentifiedCommonStyle import IdentifiedCommonStyle
            obj = IdentifiedCommonStyle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StandardStyles
    def CommonStylesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StandardStyles
    def CommonStylesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # StandardStyles
    def StackLikeStyles(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Duc.IdentifiedStackLikeStyle import IdentifiedStackLikeStyle
            obj = IdentifiedStackLikeStyle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StandardStyles
    def StackLikeStylesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StandardStyles
    def StackLikeStylesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # StandardStyles
    def TextStyles(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Duc.IdentifiedTextStyle import IdentifiedTextStyle
            obj = IdentifiedTextStyle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StandardStyles
    def TextStylesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StandardStyles
    def TextStylesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # StandardStyles
    def DimensionStyles(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Duc.IdentifiedDimensionStyle import IdentifiedDimensionStyle
            obj = IdentifiedDimensionStyle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StandardStyles
    def DimensionStylesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StandardStyles
    def DimensionStylesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # StandardStyles
    def LeaderStyles(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Duc.IdentifiedLeaderStyle import IdentifiedLeaderStyle
            obj = IdentifiedLeaderStyle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StandardStyles
    def LeaderStylesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StandardStyles
    def LeaderStylesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # StandardStyles
    def FeatureControlFrameStyles(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Duc.IdentifiedFCFStyle import IdentifiedFCFStyle
            obj = IdentifiedFCFStyle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StandardStyles
    def FeatureControlFrameStylesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StandardStyles
    def FeatureControlFrameStylesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # StandardStyles
    def TableStyles(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Duc.IdentifiedTableStyle import IdentifiedTableStyle
            obj = IdentifiedTableStyle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StandardStyles
    def TableStylesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StandardStyles
    def TableStylesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # StandardStyles
    def DocStyles(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Duc.IdentifiedDocStyle import IdentifiedDocStyle
            obj = IdentifiedDocStyle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StandardStyles
    def DocStylesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StandardStyles
    def DocStylesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # StandardStyles
    def ViewportStyles(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Duc.IdentifiedViewportStyle import IdentifiedViewportStyle
            obj = IdentifiedViewportStyle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StandardStyles
    def ViewportStylesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StandardStyles
    def ViewportStylesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # StandardStyles
    def HatchStyles(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Duc.IdentifiedHatchStyle import IdentifiedHatchStyle
            obj = IdentifiedHatchStyle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StandardStyles
    def HatchStylesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StandardStyles
    def HatchStylesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

    # StandardStyles
    def XrayStyles(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Duc.IdentifiedXRayStyle import IdentifiedXRayStyle
            obj = IdentifiedXRayStyle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StandardStyles
    def XrayStylesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StandardStyles
    def XrayStylesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        return o == 0

def StandardStylesStart(builder):
    builder.StartObject(11)

def Start(builder):
    StandardStylesStart(builder)

def StandardStylesAddCommonStyles(builder, commonStyles):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(commonStyles), 0)

def AddCommonStyles(builder, commonStyles):
    StandardStylesAddCommonStyles(builder, commonStyles)

def StandardStylesStartCommonStylesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartCommonStylesVector(builder, numElems):
    return StandardStylesStartCommonStylesVector(builder, numElems)

def StandardStylesAddStackLikeStyles(builder, stackLikeStyles):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(stackLikeStyles), 0)

def AddStackLikeStyles(builder, stackLikeStyles):
    StandardStylesAddStackLikeStyles(builder, stackLikeStyles)

def StandardStylesStartStackLikeStylesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartStackLikeStylesVector(builder, numElems):
    return StandardStylesStartStackLikeStylesVector(builder, numElems)

def StandardStylesAddTextStyles(builder, textStyles):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(textStyles), 0)

def AddTextStyles(builder, textStyles):
    StandardStylesAddTextStyles(builder, textStyles)

def StandardStylesStartTextStylesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartTextStylesVector(builder, numElems):
    return StandardStylesStartTextStylesVector(builder, numElems)

def StandardStylesAddDimensionStyles(builder, dimensionStyles):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(dimensionStyles), 0)

def AddDimensionStyles(builder, dimensionStyles):
    StandardStylesAddDimensionStyles(builder, dimensionStyles)

def StandardStylesStartDimensionStylesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartDimensionStylesVector(builder, numElems):
    return StandardStylesStartDimensionStylesVector(builder, numElems)

def StandardStylesAddLeaderStyles(builder, leaderStyles):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(leaderStyles), 0)

def AddLeaderStyles(builder, leaderStyles):
    StandardStylesAddLeaderStyles(builder, leaderStyles)

def StandardStylesStartLeaderStylesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartLeaderStylesVector(builder, numElems):
    return StandardStylesStartLeaderStylesVector(builder, numElems)

def StandardStylesAddFeatureControlFrameStyles(builder, featureControlFrameStyles):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(featureControlFrameStyles), 0)

def AddFeatureControlFrameStyles(builder, featureControlFrameStyles):
    StandardStylesAddFeatureControlFrameStyles(builder, featureControlFrameStyles)

def StandardStylesStartFeatureControlFrameStylesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartFeatureControlFrameStylesVector(builder, numElems):
    return StandardStylesStartFeatureControlFrameStylesVector(builder, numElems)

def StandardStylesAddTableStyles(builder, tableStyles):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(tableStyles), 0)

def AddTableStyles(builder, tableStyles):
    StandardStylesAddTableStyles(builder, tableStyles)

def StandardStylesStartTableStylesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartTableStylesVector(builder, numElems):
    return StandardStylesStartTableStylesVector(builder, numElems)

def StandardStylesAddDocStyles(builder, docStyles):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(docStyles), 0)

def AddDocStyles(builder, docStyles):
    StandardStylesAddDocStyles(builder, docStyles)

def StandardStylesStartDocStylesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartDocStylesVector(builder, numElems):
    return StandardStylesStartDocStylesVector(builder, numElems)

def StandardStylesAddViewportStyles(builder, viewportStyles):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(viewportStyles), 0)

def AddViewportStyles(builder, viewportStyles):
    StandardStylesAddViewportStyles(builder, viewportStyles)

def StandardStylesStartViewportStylesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartViewportStylesVector(builder, numElems):
    return StandardStylesStartViewportStylesVector(builder, numElems)

def StandardStylesAddHatchStyles(builder, hatchStyles):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(hatchStyles), 0)

def AddHatchStyles(builder, hatchStyles):
    StandardStylesAddHatchStyles(builder, hatchStyles)

def StandardStylesStartHatchStylesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartHatchStylesVector(builder, numElems):
    return StandardStylesStartHatchStylesVector(builder, numElems)

def StandardStylesAddXrayStyles(builder, xrayStyles):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(xrayStyles), 0)

def AddXrayStyles(builder, xrayStyles):
    StandardStylesAddXrayStyles(builder, xrayStyles)

def StandardStylesStartXrayStylesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartXrayStylesVector(builder, numElems):
    return StandardStylesStartXrayStylesVector(builder, numElems)

def StandardStylesEnd(builder):
    return builder.EndObject()

def End(builder):
    return StandardStylesEnd(builder)
