# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Duc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DucLine(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DucLine()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDucLine(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def DucLineBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x55\x43\x5F", size_prefixed=size_prefixed)

    # DucLine
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DucLine
    def Start(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.DucLineReference import DucLineReference
            obj = DucLineReference()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucLine
    def End(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.DucLineReference import DucLineReference
            obj = DucLineReference()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def DucLineStart(builder):
    builder.StartObject(2)

def Start(builder):
    DucLineStart(builder)

def DucLineAddStart(builder, start):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(start), 0)

def AddStart(builder, start):
    DucLineAddStart(builder, start)

def DucLineAddEnd(builder, end):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(end), 0)

def AddEnd(builder, end):
    DucLineAddEnd(builder, end)

def DucLineEnd(builder):
    return builder.EndObject()

def End(builder):
    return DucLineEnd(builder)
