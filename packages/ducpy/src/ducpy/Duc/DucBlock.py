# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Duc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DucBlock(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DucBlock()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDucBlock(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def DucBlockBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x55\x43\x5F", size_prefixed=size_prefixed)

    # DucBlock
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DucBlock
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DucBlock
    def Label(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DucBlock
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DucBlock
    def Version(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # DucBlock
    def Elements(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Duc.ElementWrapper import ElementWrapper
            obj = ElementWrapper()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucBlock
    def ElementsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DucBlock
    def ElementsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # DucBlock
    def AttributeDefinitions(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Duc.DucBlockAttributeDefinitionEntry import DucBlockAttributeDefinitionEntry
            obj = DucBlockAttributeDefinitionEntry()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucBlock
    def AttributeDefinitionsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DucBlock
    def AttributeDefinitionsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

def DucBlockStart(builder):
    builder.StartObject(6)

def Start(builder):
    DucBlockStart(builder)

def DucBlockAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    DucBlockAddId(builder, id)

def DucBlockAddLabel(builder, label):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(label), 0)

def AddLabel(builder, label):
    DucBlockAddLabel(builder, label)

def DucBlockAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def AddDescription(builder, description):
    DucBlockAddDescription(builder, description)

def DucBlockAddVersion(builder, version):
    builder.PrependInt32Slot(3, version, 0)

def AddVersion(builder, version):
    DucBlockAddVersion(builder, version)

def DucBlockAddElements(builder, elements):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(elements), 0)

def AddElements(builder, elements):
    DucBlockAddElements(builder, elements)

def DucBlockStartElementsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartElementsVector(builder, numElems):
    return DucBlockStartElementsVector(builder, numElems)

def DucBlockAddAttributeDefinitions(builder, attributeDefinitions):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(attributeDefinitions), 0)

def AddAttributeDefinitions(builder, attributeDefinitions):
    DucBlockAddAttributeDefinitions(builder, attributeDefinitions)

def DucBlockStartAttributeDefinitionsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartAttributeDefinitionsVector(builder, numElems):
    return DucBlockStartAttributeDefinitionsVector(builder, numElems)

def DucBlockEnd(builder):
    return builder.EndObject()

def End(builder):
    return DucBlockEnd(builder)
