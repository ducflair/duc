# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Duc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class FCFFrameModifiers(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FCFFrameModifiers()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFCFFrameModifiers(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def FCFFrameModifiersBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x55\x43\x5F", size_prefixed=size_prefixed)

    # FCFFrameModifiers
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FCFFrameModifiers
    def AllAround(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # FCFFrameModifiers
    def AllOver(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # FCFFrameModifiers
    def ContinuousFeature(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # FCFFrameModifiers
    def Between(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.FCFBetweenModifier import FCFBetweenModifier
            obj = FCFBetweenModifier()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FCFFrameModifiers
    def ProjectedToleranceZone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.FCFProjectedZoneModifier import FCFProjectedZoneModifier
            obj = FCFProjectedZoneModifier()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def FCFFrameModifiersStart(builder):
    builder.StartObject(5)

def Start(builder):
    FCFFrameModifiersStart(builder)

def FCFFrameModifiersAddAllAround(builder, allAround):
    builder.PrependBoolSlot(0, allAround, 0)

def AddAllAround(builder, allAround):
    FCFFrameModifiersAddAllAround(builder, allAround)

def FCFFrameModifiersAddAllOver(builder, allOver):
    builder.PrependBoolSlot(1, allOver, 0)

def AddAllOver(builder, allOver):
    FCFFrameModifiersAddAllOver(builder, allOver)

def FCFFrameModifiersAddContinuousFeature(builder, continuousFeature):
    builder.PrependBoolSlot(2, continuousFeature, 0)

def AddContinuousFeature(builder, continuousFeature):
    FCFFrameModifiersAddContinuousFeature(builder, continuousFeature)

def FCFFrameModifiersAddBetween(builder, between):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(between), 0)

def AddBetween(builder, between):
    FCFFrameModifiersAddBetween(builder, between)

def FCFFrameModifiersAddProjectedToleranceZone(builder, projectedToleranceZone):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(projectedToleranceZone), 0)

def AddProjectedToleranceZone(builder, projectedToleranceZone):
    FCFFrameModifiersAddProjectedToleranceZone(builder, projectedToleranceZone)

def FCFFrameModifiersEnd(builder):
    return builder.EndObject()

def End(builder):
    return FCFFrameModifiersEnd(builder)
