# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Duc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DucTextStyle(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DucTextStyle()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDucTextStyle(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def DucTextStyleBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x55\x43\x5F", size_prefixed=size_prefixed)

    # DucTextStyle
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DucTextStyle
    def BaseStyle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc._DucElementStylesBase import _DucElementStylesBase
            obj = _DucElementStylesBase()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucTextStyle
    def IsLtr(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # DucTextStyle
    def FontFamily(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DucTextStyle
    def BigFontFamily(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DucTextStyle
    def TextAlign(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return None

    # DucTextStyle
    def VerticalAlign(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return None

    # DucTextStyle
    def LineHeight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # DucTextStyle
    def LineSpacing(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.LineSpacing import LineSpacing
            obj = LineSpacing()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucTextStyle
    def ObliqueAngle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # DucTextStyle
    def FontSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # DucTextStyle
    def PaperTextHeight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # DucTextStyle
    def WidthFactor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # DucTextStyle
    def IsUpsideDown(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # DucTextStyle
    def IsBackwards(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def DucTextStyleStart(builder):
    builder.StartObject(14)

def Start(builder):
    DucTextStyleStart(builder)

def DucTextStyleAddBaseStyle(builder, baseStyle):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(baseStyle), 0)

def AddBaseStyle(builder, baseStyle):
    DucTextStyleAddBaseStyle(builder, baseStyle)

def DucTextStyleAddIsLtr(builder, isLtr):
    builder.PrependBoolSlot(1, isLtr, 0)

def AddIsLtr(builder, isLtr):
    DucTextStyleAddIsLtr(builder, isLtr)

def DucTextStyleAddFontFamily(builder, fontFamily):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(fontFamily), 0)

def AddFontFamily(builder, fontFamily):
    DucTextStyleAddFontFamily(builder, fontFamily)

def DucTextStyleAddBigFontFamily(builder, bigFontFamily):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(bigFontFamily), 0)

def AddBigFontFamily(builder, bigFontFamily):
    DucTextStyleAddBigFontFamily(builder, bigFontFamily)

def DucTextStyleAddTextAlign(builder, textAlign):
    builder.PrependUint8Slot(4, textAlign, None)

def AddTextAlign(builder, textAlign):
    DucTextStyleAddTextAlign(builder, textAlign)

def DucTextStyleAddVerticalAlign(builder, verticalAlign):
    builder.PrependUint8Slot(5, verticalAlign, None)

def AddVerticalAlign(builder, verticalAlign):
    DucTextStyleAddVerticalAlign(builder, verticalAlign)

def DucTextStyleAddLineHeight(builder, lineHeight):
    builder.PrependFloat32Slot(6, lineHeight, 0.0)

def AddLineHeight(builder, lineHeight):
    DucTextStyleAddLineHeight(builder, lineHeight)

def DucTextStyleAddLineSpacing(builder, lineSpacing):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(lineSpacing), 0)

def AddLineSpacing(builder, lineSpacing):
    DucTextStyleAddLineSpacing(builder, lineSpacing)

def DucTextStyleAddObliqueAngle(builder, obliqueAngle):
    builder.PrependFloat64Slot(8, obliqueAngle, 0.0)

def AddObliqueAngle(builder, obliqueAngle):
    DucTextStyleAddObliqueAngle(builder, obliqueAngle)

def DucTextStyleAddFontSize(builder, fontSize):
    builder.PrependFloat64Slot(9, fontSize, 0.0)

def AddFontSize(builder, fontSize):
    DucTextStyleAddFontSize(builder, fontSize)

def DucTextStyleAddPaperTextHeight(builder, paperTextHeight):
    builder.PrependFloat64Slot(10, paperTextHeight, 0.0)

def AddPaperTextHeight(builder, paperTextHeight):
    DucTextStyleAddPaperTextHeight(builder, paperTextHeight)

def DucTextStyleAddWidthFactor(builder, widthFactor):
    builder.PrependFloat32Slot(11, widthFactor, 0.0)

def AddWidthFactor(builder, widthFactor):
    DucTextStyleAddWidthFactor(builder, widthFactor)

def DucTextStyleAddIsUpsideDown(builder, isUpsideDown):
    builder.PrependBoolSlot(12, isUpsideDown, 0)

def AddIsUpsideDown(builder, isUpsideDown):
    DucTextStyleAddIsUpsideDown(builder, isUpsideDown)

def DucTextStyleAddIsBackwards(builder, isBackwards):
    builder.PrependBoolSlot(13, isBackwards, 0)

def AddIsBackwards(builder, isBackwards):
    DucTextStyleAddIsBackwards(builder, isBackwards)

def DucTextStyleEnd(builder):
    return builder.EndObject()

def End(builder):
    return DucTextStyleEnd(builder)
