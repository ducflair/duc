# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Duc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class _DucLinearElementBase(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = _DucLinearElementBase()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAs_DucLinearElementBase(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def _DucLinearElementBaseBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x55\x43\x5F", size_prefixed=size_prefixed)

    # _DucLinearElementBase
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # _DucLinearElementBase
    def Base(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc._DucElementBase import _DucElementBase
            obj = _DucElementBase()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # _DucLinearElementBase
    def Points(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Duc.DucPoint import DucPoint
            obj = DucPoint()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # _DucLinearElementBase
    def PointsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # _DucLinearElementBase
    def PointsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # _DucLinearElementBase
    def Lines(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Duc.DucLine import DucLine
            obj = DucLine()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # _DucLinearElementBase
    def LinesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # _DucLinearElementBase
    def LinesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # _DucLinearElementBase
    def PathOverrides(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Duc.DucPath import DucPath
            obj = DucPath()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # _DucLinearElementBase
    def PathOverridesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # _DucLinearElementBase
    def PathOverridesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # _DucLinearElementBase
    def LastCommittedPoint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.DucPoint import DucPoint
            obj = DucPoint()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # _DucLinearElementBase
    def StartBinding(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.DucPointBinding import DucPointBinding
            obj = DucPointBinding()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # _DucLinearElementBase
    def EndBinding(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.DucPointBinding import DucPointBinding
            obj = DucPointBinding()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def _DucLinearElementBaseStart(builder):
    builder.StartObject(7)

def Start(builder):
    _DucLinearElementBaseStart(builder)

def _DucLinearElementBaseAddBase(builder, base):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(base), 0)

def AddBase(builder, base):
    _DucLinearElementBaseAddBase(builder, base)

def _DucLinearElementBaseAddPoints(builder, points):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(points), 0)

def AddPoints(builder, points):
    _DucLinearElementBaseAddPoints(builder, points)

def _DucLinearElementBaseStartPointsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartPointsVector(builder, numElems):
    return _DucLinearElementBaseStartPointsVector(builder, numElems)

def _DucLinearElementBaseAddLines(builder, lines):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(lines), 0)

def AddLines(builder, lines):
    _DucLinearElementBaseAddLines(builder, lines)

def _DucLinearElementBaseStartLinesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartLinesVector(builder, numElems):
    return _DucLinearElementBaseStartLinesVector(builder, numElems)

def _DucLinearElementBaseAddPathOverrides(builder, pathOverrides):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(pathOverrides), 0)

def AddPathOverrides(builder, pathOverrides):
    _DucLinearElementBaseAddPathOverrides(builder, pathOverrides)

def _DucLinearElementBaseStartPathOverridesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartPathOverridesVector(builder, numElems):
    return _DucLinearElementBaseStartPathOverridesVector(builder, numElems)

def _DucLinearElementBaseAddLastCommittedPoint(builder, lastCommittedPoint):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(lastCommittedPoint), 0)

def AddLastCommittedPoint(builder, lastCommittedPoint):
    _DucLinearElementBaseAddLastCommittedPoint(builder, lastCommittedPoint)

def _DucLinearElementBaseAddStartBinding(builder, startBinding):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(startBinding), 0)

def AddStartBinding(builder, startBinding):
    _DucLinearElementBaseAddStartBinding(builder, startBinding)

def _DucLinearElementBaseAddEndBinding(builder, endBinding):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(endBinding), 0)

def AddEndBinding(builder, endBinding):
    _DucLinearElementBaseAddEndBinding(builder, endBinding)

def _DucLinearElementBaseEnd(builder):
    return builder.EndObject()

def End(builder):
    return _DucLinearElementBaseEnd(builder)
