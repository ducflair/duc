# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Duc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DucLocalState(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DucLocalState()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDucLocalState(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def DucLocalStateBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x55\x43\x5F", size_prefixed=size_prefixed)

    # DucLocalState
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DucLocalState
    def Scope(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DucLocalState
    def ActiveStandardId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DucLocalState
    def ScrollX(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # DucLocalState
    def ScrollY(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # DucLocalState
    def Zoom(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # DucLocalState
    def ActiveGridSettings(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # DucLocalState
    def ActiveGridSettingsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DucLocalState
    def ActiveGridSettingsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # DucLocalState
    def ActiveSnapSettings(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DucLocalState
    def IsBindingEnabled(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # DucLocalState
    def CurrentItemStroke(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.ElementStroke import ElementStroke
            obj = ElementStroke()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucLocalState
    def CurrentItemBackground(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.ElementBackground import ElementBackground
            obj = ElementBackground()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucLocalState
    def CurrentItemOpacity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # DucLocalState
    def CurrentItemFontFamily(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DucLocalState
    def CurrentItemFontSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # DucLocalState
    def CurrentItemTextAlign(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return None

    # DucLocalState
    def CurrentItemStartLineHead(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.DucHead import DucHead
            obj = DucHead()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucLocalState
    def CurrentItemEndLineHead(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.DucHead import DucHead
            obj = DucHead()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucLocalState
    def CurrentItemRoundness(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # DucLocalState
    def PenMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # DucLocalState
    def ViewModeEnabled(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # DucLocalState
    def ObjectsSnapModeEnabled(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # DucLocalState
    def GridModeEnabled(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # DucLocalState
    def OutlineModeEnabled(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # DucLocalState
    def ManualSaveMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def DucLocalStateStart(builder):
    builder.StartObject(23)

def Start(builder):
    DucLocalStateStart(builder)

def DucLocalStateAddScope(builder, scope):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(scope), 0)

def AddScope(builder, scope):
    DucLocalStateAddScope(builder, scope)

def DucLocalStateAddActiveStandardId(builder, activeStandardId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(activeStandardId), 0)

def AddActiveStandardId(builder, activeStandardId):
    DucLocalStateAddActiveStandardId(builder, activeStandardId)

def DucLocalStateAddScrollX(builder, scrollX):
    builder.PrependFloat64Slot(2, scrollX, 0.0)

def AddScrollX(builder, scrollX):
    DucLocalStateAddScrollX(builder, scrollX)

def DucLocalStateAddScrollY(builder, scrollY):
    builder.PrependFloat64Slot(3, scrollY, 0.0)

def AddScrollY(builder, scrollY):
    DucLocalStateAddScrollY(builder, scrollY)

def DucLocalStateAddZoom(builder, zoom):
    builder.PrependFloat64Slot(4, zoom, 0.0)

def AddZoom(builder, zoom):
    DucLocalStateAddZoom(builder, zoom)

def DucLocalStateAddActiveGridSettings(builder, activeGridSettings):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(activeGridSettings), 0)

def AddActiveGridSettings(builder, activeGridSettings):
    DucLocalStateAddActiveGridSettings(builder, activeGridSettings)

def DucLocalStateStartActiveGridSettingsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartActiveGridSettingsVector(builder, numElems):
    return DucLocalStateStartActiveGridSettingsVector(builder, numElems)

def DucLocalStateAddActiveSnapSettings(builder, activeSnapSettings):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(activeSnapSettings), 0)

def AddActiveSnapSettings(builder, activeSnapSettings):
    DucLocalStateAddActiveSnapSettings(builder, activeSnapSettings)

def DucLocalStateAddIsBindingEnabled(builder, isBindingEnabled):
    builder.PrependBoolSlot(7, isBindingEnabled, 0)

def AddIsBindingEnabled(builder, isBindingEnabled):
    DucLocalStateAddIsBindingEnabled(builder, isBindingEnabled)

def DucLocalStateAddCurrentItemStroke(builder, currentItemStroke):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(currentItemStroke), 0)

def AddCurrentItemStroke(builder, currentItemStroke):
    DucLocalStateAddCurrentItemStroke(builder, currentItemStroke)

def DucLocalStateAddCurrentItemBackground(builder, currentItemBackground):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(currentItemBackground), 0)

def AddCurrentItemBackground(builder, currentItemBackground):
    DucLocalStateAddCurrentItemBackground(builder, currentItemBackground)

def DucLocalStateAddCurrentItemOpacity(builder, currentItemOpacity):
    builder.PrependFloat32Slot(10, currentItemOpacity, 0.0)

def AddCurrentItemOpacity(builder, currentItemOpacity):
    DucLocalStateAddCurrentItemOpacity(builder, currentItemOpacity)

def DucLocalStateAddCurrentItemFontFamily(builder, currentItemFontFamily):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(currentItemFontFamily), 0)

def AddCurrentItemFontFamily(builder, currentItemFontFamily):
    DucLocalStateAddCurrentItemFontFamily(builder, currentItemFontFamily)

def DucLocalStateAddCurrentItemFontSize(builder, currentItemFontSize):
    builder.PrependFloat64Slot(12, currentItemFontSize, 0.0)

def AddCurrentItemFontSize(builder, currentItemFontSize):
    DucLocalStateAddCurrentItemFontSize(builder, currentItemFontSize)

def DucLocalStateAddCurrentItemTextAlign(builder, currentItemTextAlign):
    builder.PrependUint8Slot(13, currentItemTextAlign, None)

def AddCurrentItemTextAlign(builder, currentItemTextAlign):
    DucLocalStateAddCurrentItemTextAlign(builder, currentItemTextAlign)

def DucLocalStateAddCurrentItemStartLineHead(builder, currentItemStartLineHead):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(currentItemStartLineHead), 0)

def AddCurrentItemStartLineHead(builder, currentItemStartLineHead):
    DucLocalStateAddCurrentItemStartLineHead(builder, currentItemStartLineHead)

def DucLocalStateAddCurrentItemEndLineHead(builder, currentItemEndLineHead):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(currentItemEndLineHead), 0)

def AddCurrentItemEndLineHead(builder, currentItemEndLineHead):
    DucLocalStateAddCurrentItemEndLineHead(builder, currentItemEndLineHead)

def DucLocalStateAddCurrentItemRoundness(builder, currentItemRoundness):
    builder.PrependFloat64Slot(16, currentItemRoundness, 0.0)

def AddCurrentItemRoundness(builder, currentItemRoundness):
    DucLocalStateAddCurrentItemRoundness(builder, currentItemRoundness)

def DucLocalStateAddPenMode(builder, penMode):
    builder.PrependBoolSlot(17, penMode, 0)

def AddPenMode(builder, penMode):
    DucLocalStateAddPenMode(builder, penMode)

def DucLocalStateAddViewModeEnabled(builder, viewModeEnabled):
    builder.PrependBoolSlot(18, viewModeEnabled, 0)

def AddViewModeEnabled(builder, viewModeEnabled):
    DucLocalStateAddViewModeEnabled(builder, viewModeEnabled)

def DucLocalStateAddObjectsSnapModeEnabled(builder, objectsSnapModeEnabled):
    builder.PrependBoolSlot(19, objectsSnapModeEnabled, 0)

def AddObjectsSnapModeEnabled(builder, objectsSnapModeEnabled):
    DucLocalStateAddObjectsSnapModeEnabled(builder, objectsSnapModeEnabled)

def DucLocalStateAddGridModeEnabled(builder, gridModeEnabled):
    builder.PrependBoolSlot(20, gridModeEnabled, 0)

def AddGridModeEnabled(builder, gridModeEnabled):
    DucLocalStateAddGridModeEnabled(builder, gridModeEnabled)

def DucLocalStateAddOutlineModeEnabled(builder, outlineModeEnabled):
    builder.PrependBoolSlot(21, outlineModeEnabled, 0)

def AddOutlineModeEnabled(builder, outlineModeEnabled):
    DucLocalStateAddOutlineModeEnabled(builder, outlineModeEnabled)

def DucLocalStateAddManualSaveMode(builder, manualSaveMode):
    builder.PrependBoolSlot(22, manualSaveMode, 0)

def AddManualSaveMode(builder, manualSaveMode):
    DucLocalStateAddManualSaveMode(builder, manualSaveMode)

def DucLocalStateEnd(builder):
    return builder.EndObject()

def End(builder):
    return DucLocalStateEnd(builder)
