# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Duc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DucGlobalState(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DucGlobalState()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDucGlobalState(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def DucGlobalStateBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x55\x43\x5F", size_prefixed=size_prefixed)

    # DucGlobalState
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DucGlobalState
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DucGlobalState
    def ViewBackgroundColor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DucGlobalState
    def MainScope(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DucGlobalState
    def DashSpacingScale(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # DucGlobalState
    def IsDashSpacingAffectedByViewportScale(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # DucGlobalState
    def ScopeExponentThreshold(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # DucGlobalState
    def DimensionsAssociativeByDefault(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # DucGlobalState
    def UseAnnotativeScaling(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # DucGlobalState
    def DisplayPrecisionLinear(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # DucGlobalState
    def DisplayPrecisionAngular(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # DucGlobalState
    def PruningLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return None

def DucGlobalStateStart(builder):
    builder.StartObject(11)

def Start(builder):
    DucGlobalStateStart(builder)

def DucGlobalStateAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    DucGlobalStateAddName(builder, name)

def DucGlobalStateAddViewBackgroundColor(builder, viewBackgroundColor):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(viewBackgroundColor), 0)

def AddViewBackgroundColor(builder, viewBackgroundColor):
    DucGlobalStateAddViewBackgroundColor(builder, viewBackgroundColor)

def DucGlobalStateAddMainScope(builder, mainScope):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(mainScope), 0)

def AddMainScope(builder, mainScope):
    DucGlobalStateAddMainScope(builder, mainScope)

def DucGlobalStateAddDashSpacingScale(builder, dashSpacingScale):
    builder.PrependFloat32Slot(3, dashSpacingScale, 0.0)

def AddDashSpacingScale(builder, dashSpacingScale):
    DucGlobalStateAddDashSpacingScale(builder, dashSpacingScale)

def DucGlobalStateAddIsDashSpacingAffectedByViewportScale(builder, isDashSpacingAffectedByViewportScale):
    builder.PrependBoolSlot(4, isDashSpacingAffectedByViewportScale, 0)

def AddIsDashSpacingAffectedByViewportScale(builder, isDashSpacingAffectedByViewportScale):
    DucGlobalStateAddIsDashSpacingAffectedByViewportScale(builder, isDashSpacingAffectedByViewportScale)

def DucGlobalStateAddScopeExponentThreshold(builder, scopeExponentThreshold):
    builder.PrependInt8Slot(5, scopeExponentThreshold, 0)

def AddScopeExponentThreshold(builder, scopeExponentThreshold):
    DucGlobalStateAddScopeExponentThreshold(builder, scopeExponentThreshold)

def DucGlobalStateAddDimensionsAssociativeByDefault(builder, dimensionsAssociativeByDefault):
    builder.PrependBoolSlot(6, dimensionsAssociativeByDefault, 0)

def AddDimensionsAssociativeByDefault(builder, dimensionsAssociativeByDefault):
    DucGlobalStateAddDimensionsAssociativeByDefault(builder, dimensionsAssociativeByDefault)

def DucGlobalStateAddUseAnnotativeScaling(builder, useAnnotativeScaling):
    builder.PrependBoolSlot(7, useAnnotativeScaling, 0)

def AddUseAnnotativeScaling(builder, useAnnotativeScaling):
    DucGlobalStateAddUseAnnotativeScaling(builder, useAnnotativeScaling)

def DucGlobalStateAddDisplayPrecisionLinear(builder, displayPrecisionLinear):
    builder.PrependInt32Slot(8, displayPrecisionLinear, 0)

def AddDisplayPrecisionLinear(builder, displayPrecisionLinear):
    DucGlobalStateAddDisplayPrecisionLinear(builder, displayPrecisionLinear)

def DucGlobalStateAddDisplayPrecisionAngular(builder, displayPrecisionAngular):
    builder.PrependInt32Slot(9, displayPrecisionAngular, 0)

def AddDisplayPrecisionAngular(builder, displayPrecisionAngular):
    DucGlobalStateAddDisplayPrecisionAngular(builder, displayPrecisionAngular)

def DucGlobalStateAddPruningLevel(builder, pruningLevel):
    builder.PrependUint8Slot(10, pruningLevel, None)

def AddPruningLevel(builder, pruningLevel):
    DucGlobalStateAddPruningLevel(builder, pruningLevel)

def DucGlobalStateEnd(builder):
    return builder.EndObject()

def End(builder):
    return DucGlobalStateEnd(builder)
