# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Duc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class SnapMarkerSettings(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SnapMarkerSettings()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSnapMarkerSettings(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def SnapMarkerSettingsBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x55\x43\x5F", size_prefixed=size_prefixed)

    # SnapMarkerSettings
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SnapMarkerSettings
    def Enabled(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # SnapMarkerSettings
    def Size(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SnapMarkerSettings
    def Duration(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SnapMarkerSettings
    def Styles(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Duc.SnapMarkerStyleEntry import SnapMarkerStyleEntry
            obj = SnapMarkerStyleEntry()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SnapMarkerSettings
    def StylesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SnapMarkerSettings
    def StylesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def SnapMarkerSettingsStart(builder):
    builder.StartObject(4)

def Start(builder):
    SnapMarkerSettingsStart(builder)

def SnapMarkerSettingsAddEnabled(builder, enabled):
    builder.PrependBoolSlot(0, enabled, 0)

def AddEnabled(builder, enabled):
    SnapMarkerSettingsAddEnabled(builder, enabled)

def SnapMarkerSettingsAddSize(builder, size):
    builder.PrependInt32Slot(1, size, 0)

def AddSize(builder, size):
    SnapMarkerSettingsAddSize(builder, size)

def SnapMarkerSettingsAddDuration(builder, duration):
    builder.PrependInt32Slot(2, duration, 0)

def AddDuration(builder, duration):
    SnapMarkerSettingsAddDuration(builder, duration)

def SnapMarkerSettingsAddStyles(builder, styles):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(styles), 0)

def AddStyles(builder, styles):
    SnapMarkerSettingsAddStyles(builder, styles)

def SnapMarkerSettingsStartStylesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartStylesVector(builder, numElems):
    return SnapMarkerSettingsStartStylesVector(builder, numElems)

def SnapMarkerSettingsEnd(builder):
    return builder.EndObject()

def End(builder):
    return SnapMarkerSettingsEnd(builder)
