# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Duc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DucBlockInstanceElement(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DucBlockInstanceElement()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDucBlockInstanceElement(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def DucBlockInstanceElementBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x55\x43\x5F", size_prefixed=size_prefixed)

    # DucBlockInstanceElement
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DucBlockInstanceElement
    def Base(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc._DucElementBase import _DucElementBase
            obj = _DucElementBase()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucBlockInstanceElement
    def BlockId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DucBlockInstanceElement
    def ElementOverrides(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Duc.StringValueEntry import StringValueEntry
            obj = StringValueEntry()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucBlockInstanceElement
    def ElementOverridesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DucBlockInstanceElement
    def ElementOverridesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # DucBlockInstanceElement
    def AttributeValues(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Duc.StringValueEntry import StringValueEntry
            obj = StringValueEntry()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucBlockInstanceElement
    def AttributeValuesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DucBlockInstanceElement
    def AttributeValuesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # DucBlockInstanceElement
    def DuplicationArray(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.DucBlockDuplicationArray import DucBlockDuplicationArray
            obj = DucBlockDuplicationArray()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def DucBlockInstanceElementStart(builder):
    builder.StartObject(5)

def Start(builder):
    DucBlockInstanceElementStart(builder)

def DucBlockInstanceElementAddBase(builder, base):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(base), 0)

def AddBase(builder, base):
    DucBlockInstanceElementAddBase(builder, base)

def DucBlockInstanceElementAddBlockId(builder, blockId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(blockId), 0)

def AddBlockId(builder, blockId):
    DucBlockInstanceElementAddBlockId(builder, blockId)

def DucBlockInstanceElementAddElementOverrides(builder, elementOverrides):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(elementOverrides), 0)

def AddElementOverrides(builder, elementOverrides):
    DucBlockInstanceElementAddElementOverrides(builder, elementOverrides)

def DucBlockInstanceElementStartElementOverridesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartElementOverridesVector(builder, numElems):
    return DucBlockInstanceElementStartElementOverridesVector(builder, numElems)

def DucBlockInstanceElementAddAttributeValues(builder, attributeValues):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(attributeValues), 0)

def AddAttributeValues(builder, attributeValues):
    DucBlockInstanceElementAddAttributeValues(builder, attributeValues)

def DucBlockInstanceElementStartAttributeValuesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartAttributeValuesVector(builder, numElems):
    return DucBlockInstanceElementStartAttributeValuesVector(builder, numElems)

def DucBlockInstanceElementAddDuplicationArray(builder, duplicationArray):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(duplicationArray), 0)

def AddDuplicationArray(builder, duplicationArray):
    DucBlockInstanceElementAddDuplicationArray(builder, duplicationArray)

def DucBlockInstanceElementEnd(builder):
    return builder.EndObject()

def End(builder):
    return DucBlockInstanceElementEnd(builder)
