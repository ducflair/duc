# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Duc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class HatchPatternLine(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = HatchPatternLine()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsHatchPatternLine(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def HatchPatternLineBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x55\x43\x5F", size_prefixed=size_prefixed)

    # HatchPatternLine
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # HatchPatternLine
    def Angle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # HatchPatternLine
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.DucPoint import DucPoint
            obj = DucPoint()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # HatchPatternLine
    def Offset(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # HatchPatternLine
    def OffsetAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float64Flags, o)
        return 0

    # HatchPatternLine
    def OffsetLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # HatchPatternLine
    def OffsetIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # HatchPatternLine
    def DashPattern(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # HatchPatternLine
    def DashPatternAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float64Flags, o)
        return 0

    # HatchPatternLine
    def DashPatternLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # HatchPatternLine
    def DashPatternIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def HatchPatternLineStart(builder):
    builder.StartObject(4)

def Start(builder):
    HatchPatternLineStart(builder)

def HatchPatternLineAddAngle(builder, angle):
    builder.PrependFloat64Slot(0, angle, 0.0)

def AddAngle(builder, angle):
    HatchPatternLineAddAngle(builder, angle)

def HatchPatternLineAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    HatchPatternLineAddOrigin(builder, origin)

def HatchPatternLineAddOffset(builder, offset):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(offset), 0)

def AddOffset(builder, offset):
    HatchPatternLineAddOffset(builder, offset)

def HatchPatternLineStartOffsetVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)

def StartOffsetVector(builder, numElems):
    return HatchPatternLineStartOffsetVector(builder, numElems)

def HatchPatternLineAddDashPattern(builder, dashPattern):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(dashPattern), 0)

def AddDashPattern(builder, dashPattern):
    HatchPatternLineAddDashPattern(builder, dashPattern)

def HatchPatternLineStartDashPatternVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)

def StartDashPatternVector(builder, numElems):
    return HatchPatternLineStartDashPatternVector(builder, numElems)

def HatchPatternLineEnd(builder):
    return builder.EndObject()

def End(builder):
    return HatchPatternLineEnd(builder)
