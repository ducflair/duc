# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Duc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DucPointBinding(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DucPointBinding()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDucPointBinding(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def DucPointBindingBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x55\x43\x5F", size_prefixed=size_prefixed)

    # DucPointBinding
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DucPointBinding
    def ElementId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DucPointBinding
    def Focus(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # DucPointBinding
    def Gap(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # DucPointBinding
    def FixedPoint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = o + self._tab.Pos
            from Duc.GeometricPoint import GeometricPoint
            obj = GeometricPoint()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucPointBinding
    def Point(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.PointBindingPoint import PointBindingPoint
            obj = PointBindingPoint()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucPointBinding
    def Head(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.DucHead import DucHead
            obj = DucHead()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def DucPointBindingStart(builder):
    builder.StartObject(6)

def Start(builder):
    DucPointBindingStart(builder)

def DucPointBindingAddElementId(builder, elementId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(elementId), 0)

def AddElementId(builder, elementId):
    DucPointBindingAddElementId(builder, elementId)

def DucPointBindingAddFocus(builder, focus):
    builder.PrependFloat32Slot(1, focus, 0.0)

def AddFocus(builder, focus):
    DucPointBindingAddFocus(builder, focus)

def DucPointBindingAddGap(builder, gap):
    builder.PrependFloat64Slot(2, gap, 0.0)

def AddGap(builder, gap):
    DucPointBindingAddGap(builder, gap)

def DucPointBindingAddFixedPoint(builder, fixedPoint):
    builder.PrependStructSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(fixedPoint), 0)

def AddFixedPoint(builder, fixedPoint):
    DucPointBindingAddFixedPoint(builder, fixedPoint)

def DucPointBindingAddPoint(builder, point):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(point), 0)

def AddPoint(builder, point):
    DucPointBindingAddPoint(builder, point)

def DucPointBindingAddHead(builder, head):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(head), 0)

def AddHead(builder, head):
    DucPointBindingAddHead(builder, head)

def DucPointBindingEnd(builder):
    return builder.EndObject()

def End(builder):
    return DucPointBindingEnd(builder)
