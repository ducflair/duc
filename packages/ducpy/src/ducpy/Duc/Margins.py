# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Duc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Margins(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Margins()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMargins(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def MarginsBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x55\x43\x5F", size_prefixed=size_prefixed)

    # Margins
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Margins
    def Top(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Margins
    def Right(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Margins
    def Bottom(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Margins
    def Left(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def MarginsStart(builder):
    builder.StartObject(4)

def Start(builder):
    MarginsStart(builder)

def MarginsAddTop(builder, top):
    builder.PrependFloat64Slot(0, top, 0.0)

def AddTop(builder, top):
    MarginsAddTop(builder, top)

def MarginsAddRight(builder, right):
    builder.PrependFloat64Slot(1, right, 0.0)

def AddRight(builder, right):
    MarginsAddRight(builder, right)

def MarginsAddBottom(builder, bottom):
    builder.PrependFloat64Slot(2, bottom, 0.0)

def AddBottom(builder, bottom):
    MarginsAddBottom(builder, bottom)

def MarginsAddLeft(builder, left):
    builder.PrependFloat64Slot(3, left, 0.0)

def AddLeft(builder, left):
    MarginsAddLeft(builder, left)

def MarginsEnd(builder):
    return builder.EndObject()

def End(builder):
    return MarginsEnd(builder)
