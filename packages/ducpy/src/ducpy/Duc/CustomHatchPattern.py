# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Duc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class CustomHatchPattern(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CustomHatchPattern()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCustomHatchPattern(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def CustomHatchPatternBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x55\x43\x5F", size_prefixed=size_prefixed)

    # CustomHatchPattern
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CustomHatchPattern
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CustomHatchPattern
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CustomHatchPattern
    def Lines(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Duc.HatchPatternLine import HatchPatternLine
            obj = HatchPatternLine()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # CustomHatchPattern
    def LinesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CustomHatchPattern
    def LinesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def CustomHatchPatternStart(builder):
    builder.StartObject(3)

def Start(builder):
    CustomHatchPatternStart(builder)

def CustomHatchPatternAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    CustomHatchPatternAddName(builder, name)

def CustomHatchPatternAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def AddDescription(builder, description):
    CustomHatchPatternAddDescription(builder, description)

def CustomHatchPatternAddLines(builder, lines):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(lines), 0)

def AddLines(builder, lines):
    CustomHatchPatternAddLines(builder, lines)

def CustomHatchPatternStartLinesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartLinesVector(builder, numElems):
    return CustomHatchPatternStartLinesVector(builder, numElems)

def CustomHatchPatternEnd(builder):
    return builder.EndObject()

def End(builder):
    return CustomHatchPatternEnd(builder)
