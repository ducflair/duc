# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Duc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DucDimensionElement(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DucDimensionElement()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDucDimensionElement(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def DucDimensionElementBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x55\x43\x5F", size_prefixed=size_prefixed)

    # DucDimensionElement
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DucDimensionElement
    def Base(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc._DucElementBase import _DucElementBase
            obj = _DucElementBase()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucDimensionElement
    def Style(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.DucDimensionStyle import DucDimensionStyle
            obj = DucDimensionStyle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucDimensionElement
    def DimensionType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return None

    # DucDimensionElement
    def DefinitionPoints(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.DimensionDefinitionPoints import DimensionDefinitionPoints
            obj = DimensionDefinitionPoints()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucDimensionElement
    def ObliqueAngle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # DucDimensionElement
    def OrdinateAxis(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return None

    # DucDimensionElement
    def Bindings(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.DimensionBindings import DimensionBindings
            obj = DimensionBindings()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucDimensionElement
    def TextOverride(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DucDimensionElement
    def TextPosition(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = o + self._tab.Pos
            from Duc.GeometricPoint import GeometricPoint
            obj = GeometricPoint()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucDimensionElement
    def ToleranceOverride(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.DimensionToleranceStyle import DimensionToleranceStyle
            obj = DimensionToleranceStyle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucDimensionElement
    def BaselineData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.DimensionBaselineData import DimensionBaselineData
            obj = DimensionBaselineData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucDimensionElement
    def ContinueData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.DimensionContinueData import DimensionContinueData
            obj = DimensionContinueData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def DucDimensionElementStart(builder):
    builder.StartObject(12)

def Start(builder):
    DucDimensionElementStart(builder)

def DucDimensionElementAddBase(builder, base):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(base), 0)

def AddBase(builder, base):
    DucDimensionElementAddBase(builder, base)

def DucDimensionElementAddStyle(builder, style):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(style), 0)

def AddStyle(builder, style):
    DucDimensionElementAddStyle(builder, style)

def DucDimensionElementAddDimensionType(builder, dimensionType):
    builder.PrependUint8Slot(2, dimensionType, None)

def AddDimensionType(builder, dimensionType):
    DucDimensionElementAddDimensionType(builder, dimensionType)

def DucDimensionElementAddDefinitionPoints(builder, definitionPoints):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(definitionPoints), 0)

def AddDefinitionPoints(builder, definitionPoints):
    DucDimensionElementAddDefinitionPoints(builder, definitionPoints)

def DucDimensionElementAddObliqueAngle(builder, obliqueAngle):
    builder.PrependFloat32Slot(4, obliqueAngle, 0.0)

def AddObliqueAngle(builder, obliqueAngle):
    DucDimensionElementAddObliqueAngle(builder, obliqueAngle)

def DucDimensionElementAddOrdinateAxis(builder, ordinateAxis):
    builder.PrependUint8Slot(5, ordinateAxis, None)

def AddOrdinateAxis(builder, ordinateAxis):
    DucDimensionElementAddOrdinateAxis(builder, ordinateAxis)

def DucDimensionElementAddBindings(builder, bindings):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(bindings), 0)

def AddBindings(builder, bindings):
    DucDimensionElementAddBindings(builder, bindings)

def DucDimensionElementAddTextOverride(builder, textOverride):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(textOverride), 0)

def AddTextOverride(builder, textOverride):
    DucDimensionElementAddTextOverride(builder, textOverride)

def DucDimensionElementAddTextPosition(builder, textPosition):
    builder.PrependStructSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(textPosition), 0)

def AddTextPosition(builder, textPosition):
    DucDimensionElementAddTextPosition(builder, textPosition)

def DucDimensionElementAddToleranceOverride(builder, toleranceOverride):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(toleranceOverride), 0)

def AddToleranceOverride(builder, toleranceOverride):
    DucDimensionElementAddToleranceOverride(builder, toleranceOverride)

def DucDimensionElementAddBaselineData(builder, baselineData):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(baselineData), 0)

def AddBaselineData(builder, baselineData):
    DucDimensionElementAddBaselineData(builder, baselineData)

def DucDimensionElementAddContinueData(builder, continueData):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(continueData), 0)

def AddContinueData(builder, continueData):
    DucDimensionElementAddContinueData(builder, continueData)

def DucDimensionElementEnd(builder):
    return builder.EndObject()

def End(builder):
    return DucDimensionElementEnd(builder)
