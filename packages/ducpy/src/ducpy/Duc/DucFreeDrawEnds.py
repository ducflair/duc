# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Duc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DucFreeDrawEnds(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DucFreeDrawEnds()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDucFreeDrawEnds(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def DucFreeDrawEndsBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x55\x43\x5F", size_prefixed=size_prefixed)

    # DucFreeDrawEnds
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DucFreeDrawEnds
    def Cap(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # DucFreeDrawEnds
    def Taper(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # DucFreeDrawEnds
    def Easing(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def DucFreeDrawEndsStart(builder):
    builder.StartObject(3)

def Start(builder):
    DucFreeDrawEndsStart(builder)

def DucFreeDrawEndsAddCap(builder, cap):
    builder.PrependBoolSlot(0, cap, 0)

def AddCap(builder, cap):
    DucFreeDrawEndsAddCap(builder, cap)

def DucFreeDrawEndsAddTaper(builder, taper):
    builder.PrependFloat32Slot(1, taper, 0.0)

def AddTaper(builder, taper):
    DucFreeDrawEndsAddTaper(builder, taper)

def DucFreeDrawEndsAddEasing(builder, easing):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(easing), 0)

def AddEasing(builder, easing):
    DucFreeDrawEndsAddEasing(builder, easing)

def DucFreeDrawEndsEnd(builder):
    return builder.EndObject()

def End(builder):
    return DucFreeDrawEndsEnd(builder)
