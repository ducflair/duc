# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Duc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DucElement(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DucElement()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDucElement(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def DucElementBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x55\x43\x5F", size_prefixed=size_prefixed)

    # DucElement
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DucElement
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DucElement
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DucElement
    def XV2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return None

    # DucElement
    def YV2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return None

    # DucElement
    def Scope(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DucElement
    def Label(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DucElement
    def IsVisible(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # DucElement
    def BackgroundColorV3(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DucElement
    def StrokeColorV3(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DucElement
    def Opacity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # DucElement
    def WidthV2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return None

    # DucElement
    def HeightV2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return None

    # DucElement
    def AngleV2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return None

    # DucElement
    def IsDeleted(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # DucElement
    def GroupIds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # DucElement
    def GroupIdsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DucElement
    def GroupIdsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        return o == 0

    # DucElement
    def FrameId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DucElement
    def BoundElements(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Duc.BoundElement import BoundElement
            obj = BoundElement()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucElement
    def BoundElementsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DucElement
    def BoundElementsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        return o == 0

    # DucElement
    def Link(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DucElement
    def Locked(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # DucElement
    def TextFontSizeV2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return None

    # DucElement
    def TextFontFamily(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DucElement
    def TextText(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DucElement
    def TextContainerId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DucElement
    def TextLineHeightV2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return None

    # DucElement
    def TextAutoResize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return None

    # DucElement
    def LinearElementPoints(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Duc.Point import Point
            obj = Point()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucElement
    def LinearElementPointsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DucElement
    def LinearElementPointsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        return o == 0

    # DucElement
    def LinearElementLastCommittedPoint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.Point import Point
            obj = Point()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucElement
    def LinearElementStartBinding(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.PointBinding import PointBinding
            obj = PointBinding()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucElement
    def LinearElementEndBinding(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.PointBinding import PointBinding
            obj = PointBinding()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucElement
    def ArrowElbowed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(94))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return None

    # DucElement
    def FreeDrawSimulatePressure(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(98))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return None

    # DucElement
    def FileId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(100))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DucElement
    def ImageStatus(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(102))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return None

    # DucElement
    def StackLikeIsCollapsed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(106))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return None

    # DucElement
    def StrokeStyleV3(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(112))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # DucElement
    def FillStyleV3(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(114))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # DucElement
    def TextTextAlign(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(116))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return None

    # DucElement
    def TextVerticalAlign(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(118))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # DucElement
    def X(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(120))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # DucElement
    def Y(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(122))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # DucElement
    def ImageScale(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(124))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.SimplePoint import SimplePoint
            obj = SimplePoint()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucElement
    def FreeDrawPressures(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(126))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # DucElement
    def FreeDrawPressuresAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(126))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float64Flags, o)
        return 0

    # DucElement
    def FreeDrawPressuresLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(126))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DucElement
    def FreeDrawPressuresIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(126))
        return o == 0

    # DucElement
    def StrokeWidthV3(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(128))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # DucElement
    def Angle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(130))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # DucElement
    def Roundness(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(132))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # DucElement
    def Width(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(134))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # DucElement
    def Height(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(136))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # DucElement
    def TextFontSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(138))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return None

    # DucElement
    def TextLineHeight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(140))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return None

    # DucElement
    def Blending(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(142))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return None

    # DucElement
    def Background(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(144))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Duc.ElementBackground import ElementBackground
            obj = ElementBackground()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucElement
    def BackgroundLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(144))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DucElement
    def BackgroundIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(144))
        return o == 0

    # DucElement
    def Stroke(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(146))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Duc.ElementStroke import ElementStroke
            obj = ElementStroke()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucElement
    def StrokeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(146))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DucElement
    def StrokeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(146))
        return o == 0

    # DucElement
    def ImageCrop(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(148))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.ImageCrop import ImageCrop
            obj = ImageCrop()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucElement
    def StackLikeClip(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(150))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return None

    # DucElement
    def Subset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(152))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return None

    # DucElement
    def ZIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(154))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # DucElement
    def PolygonSides(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(156))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return None

    # DucElement
    def TableColumnOrder(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(158))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # DucElement
    def TableColumnOrderLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(158))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DucElement
    def TableColumnOrderIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(158))
        return o == 0

    # DucElement
    def TableRowOrder(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(160))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # DucElement
    def TableRowOrderLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(160))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DucElement
    def TableRowOrderIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(160))
        return o == 0

    # DucElement
    def TableColumns(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(162))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Duc.DucTableColumn import DucTableColumn
            obj = DucTableColumn()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucElement
    def TableColumnsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(162))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DucElement
    def TableColumnsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(162))
        return o == 0

    # DucElement
    def TableRows(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(164))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Duc.DucTableRow import DucTableRow
            obj = DucTableRow()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucElement
    def TableRowsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(164))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DucElement
    def TableRowsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(164))
        return o == 0

    # DucElement
    def TableCells(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(166))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Duc.DucTableCell import DucTableCell
            obj = DucTableCell()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucElement
    def TableCellsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(166))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DucElement
    def TableCellsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(166))
        return o == 0

    # DucElement
    def TableStyle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(168))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.DucTableStyle import DucTableStyle
            obj = DucTableStyle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucElement
    def DocContent(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(170))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DucElement
    def LinearElementLines(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(172))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Duc.DucLine import DucLine
            obj = DucLine()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucElement
    def LinearElementLinesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(172))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DucElement
    def LinearElementLinesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(172))
        return o == 0

    # DucElement
    def EllipseRatio(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(174))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return None

    # DucElement
    def EllipseStartAngle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(176))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return None

    # DucElement
    def EllipseEndAngle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(178))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return None

    # DucElement
    def EllipseShowAuxCrosshair(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(180))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return None

    # DucElement
    def FreeDrawThinning(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(182))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return None

    # DucElement
    def FreeDrawSmoothing(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(184))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return None

    # DucElement
    def FreeDrawStreamline(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(186))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return None

    # DucElement
    def FreeDrawEasing(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(188))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DucElement
    def FreeDrawStartCap(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(190))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return None

    # DucElement
    def FreeDrawStartTaper(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(192))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return None

    # DucElement
    def FreeDrawStartEasing(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(194))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DucElement
    def FreeDrawEndCap(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(196))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return None

    # DucElement
    def FreeDrawEndTaper(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(198))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return None

    # DucElement
    def FreeDrawEndEasing(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(200))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DucElement
    def FreeDrawSvgPath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(202))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DucElement
    def FreeDrawSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(204))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return None

    # DucElement
    def LinearElementPathOverrides(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(206))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Duc.DucPath import DucPath
            obj = DucPath()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucElement
    def LinearElementPathOverridesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(206))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DucElement
    def LinearElementPathOverridesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(206))
        return o == 0

    # DucElement
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(208))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DucElement
    def NoPlot(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(210))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return None

    # DucElement
    def StackLikeLabelingColor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(212))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DucElement
    def StackLikeStrokeOverride(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(214))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.ElementStroke import ElementStroke
            obj = ElementStroke()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucElement
    def StackLikeBackgroundOverride(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(216))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.ElementBackground import ElementBackground
            obj = ElementBackground()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucElement
    def BlockInstanceBlockId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(218))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DucElement
    def BlockInstanceElementOverrides(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(220))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Duc.DucBlockInstanceElementOverride import DucBlockInstanceElementOverride
            obj = DucBlockInstanceElementOverride()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucElement
    def BlockInstanceElementOverridesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(220))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DucElement
    def BlockInstanceElementOverridesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(220))
        return o == 0

def DucElementStart(builder):
    builder.StartObject(109)

def Start(builder):
    DucElementStart(builder)

def DucElementAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    DucElementAddId(builder, id)

def DucElementAddType(builder, type):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(type), 0)

def AddType(builder, type):
    DucElementAddType(builder, type)

def DucElementAddXV2(builder, xV2):
    builder.PrependFloat32Slot(2, xV2, None)

def AddXV2(builder, xV2):
    DucElementAddXV2(builder, xV2)

def DucElementAddYV2(builder, yV2):
    builder.PrependFloat32Slot(3, yV2, None)

def AddYV2(builder, yV2):
    DucElementAddYV2(builder, yV2)

def DucElementAddScope(builder, scope):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(scope), 0)

def AddScope(builder, scope):
    DucElementAddScope(builder, scope)

def DucElementAddLabel(builder, label):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(label), 0)

def AddLabel(builder, label):
    DucElementAddLabel(builder, label)

def DucElementAddIsVisible(builder, isVisible):
    builder.PrependBoolSlot(8, isVisible, 0)

def AddIsVisible(builder, isVisible):
    DucElementAddIsVisible(builder, isVisible)

def DucElementAddBackgroundColorV3(builder, backgroundColorV3):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(backgroundColorV3), 0)

def AddBackgroundColorV3(builder, backgroundColorV3):
    DucElementAddBackgroundColorV3(builder, backgroundColorV3)

def DucElementAddStrokeColorV3(builder, strokeColorV3):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(strokeColorV3), 0)

def AddStrokeColorV3(builder, strokeColorV3):
    DucElementAddStrokeColorV3(builder, strokeColorV3)

def DucElementAddOpacity(builder, opacity):
    builder.PrependFloat32Slot(17, opacity, 0.0)

def AddOpacity(builder, opacity):
    DucElementAddOpacity(builder, opacity)

def DucElementAddWidthV2(builder, widthV2):
    builder.PrependFloat32Slot(18, widthV2, None)

def AddWidthV2(builder, widthV2):
    DucElementAddWidthV2(builder, widthV2)

def DucElementAddHeightV2(builder, heightV2):
    builder.PrependFloat32Slot(19, heightV2, None)

def AddHeightV2(builder, heightV2):
    DucElementAddHeightV2(builder, heightV2)

def DucElementAddAngleV2(builder, angleV2):
    builder.PrependFloat32Slot(20, angleV2, None)

def AddAngleV2(builder, angleV2):
    DucElementAddAngleV2(builder, angleV2)

def DucElementAddIsDeleted(builder, isDeleted):
    builder.PrependBoolSlot(21, isDeleted, 0)

def AddIsDeleted(builder, isDeleted):
    DucElementAddIsDeleted(builder, isDeleted)

def DucElementAddGroupIds(builder, groupIds):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(groupIds), 0)

def AddGroupIds(builder, groupIds):
    DucElementAddGroupIds(builder, groupIds)

def DucElementStartGroupIdsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartGroupIdsVector(builder, numElems):
    return DucElementStartGroupIdsVector(builder, numElems)

def DucElementAddFrameId(builder, frameId):
    builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(frameId), 0)

def AddFrameId(builder, frameId):
    DucElementAddFrameId(builder, frameId)

def DucElementAddBoundElements(builder, boundElements):
    builder.PrependUOffsetTRelativeSlot(24, flatbuffers.number_types.UOffsetTFlags.py_type(boundElements), 0)

def AddBoundElements(builder, boundElements):
    DucElementAddBoundElements(builder, boundElements)

def DucElementStartBoundElementsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartBoundElementsVector(builder, numElems):
    return DucElementStartBoundElementsVector(builder, numElems)

def DucElementAddLink(builder, link):
    builder.PrependUOffsetTRelativeSlot(25, flatbuffers.number_types.UOffsetTFlags.py_type(link), 0)

def AddLink(builder, link):
    DucElementAddLink(builder, link)

def DucElementAddLocked(builder, locked):
    builder.PrependBoolSlot(26, locked, 0)

def AddLocked(builder, locked):
    DucElementAddLocked(builder, locked)

def DucElementAddTextFontSizeV2(builder, textFontSizeV2):
    builder.PrependInt32Slot(30, textFontSizeV2, None)

def AddTextFontSizeV2(builder, textFontSizeV2):
    DucElementAddTextFontSizeV2(builder, textFontSizeV2)

def DucElementAddTextFontFamily(builder, textFontFamily):
    builder.PrependUOffsetTRelativeSlot(31, flatbuffers.number_types.UOffsetTFlags.py_type(textFontFamily), 0)

def AddTextFontFamily(builder, textFontFamily):
    DucElementAddTextFontFamily(builder, textFontFamily)

def DucElementAddTextText(builder, textText):
    builder.PrependUOffsetTRelativeSlot(32, flatbuffers.number_types.UOffsetTFlags.py_type(textText), 0)

def AddTextText(builder, textText):
    DucElementAddTextText(builder, textText)

def DucElementAddTextContainerId(builder, textContainerId):
    builder.PrependUOffsetTRelativeSlot(35, flatbuffers.number_types.UOffsetTFlags.py_type(textContainerId), 0)

def AddTextContainerId(builder, textContainerId):
    DucElementAddTextContainerId(builder, textContainerId)

def DucElementAddTextLineHeightV2(builder, textLineHeightV2):
    builder.PrependFloat32Slot(37, textLineHeightV2, None)

def AddTextLineHeightV2(builder, textLineHeightV2):
    DucElementAddTextLineHeightV2(builder, textLineHeightV2)

def DucElementAddTextAutoResize(builder, textAutoResize):
    builder.PrependBoolSlot(38, textAutoResize, None)

def AddTextAutoResize(builder, textAutoResize):
    DucElementAddTextAutoResize(builder, textAutoResize)

def DucElementAddLinearElementPoints(builder, linearElementPoints):
    builder.PrependUOffsetTRelativeSlot(39, flatbuffers.number_types.UOffsetTFlags.py_type(linearElementPoints), 0)

def AddLinearElementPoints(builder, linearElementPoints):
    DucElementAddLinearElementPoints(builder, linearElementPoints)

def DucElementStartLinearElementPointsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartLinearElementPointsVector(builder, numElems):
    return DucElementStartLinearElementPointsVector(builder, numElems)

def DucElementAddLinearElementLastCommittedPoint(builder, linearElementLastCommittedPoint):
    builder.PrependUOffsetTRelativeSlot(40, flatbuffers.number_types.UOffsetTFlags.py_type(linearElementLastCommittedPoint), 0)

def AddLinearElementLastCommittedPoint(builder, linearElementLastCommittedPoint):
    DucElementAddLinearElementLastCommittedPoint(builder, linearElementLastCommittedPoint)

def DucElementAddLinearElementStartBinding(builder, linearElementStartBinding):
    builder.PrependUOffsetTRelativeSlot(41, flatbuffers.number_types.UOffsetTFlags.py_type(linearElementStartBinding), 0)

def AddLinearElementStartBinding(builder, linearElementStartBinding):
    DucElementAddLinearElementStartBinding(builder, linearElementStartBinding)

def DucElementAddLinearElementEndBinding(builder, linearElementEndBinding):
    builder.PrependUOffsetTRelativeSlot(42, flatbuffers.number_types.UOffsetTFlags.py_type(linearElementEndBinding), 0)

def AddLinearElementEndBinding(builder, linearElementEndBinding):
    DucElementAddLinearElementEndBinding(builder, linearElementEndBinding)

def DucElementAddArrowElbowed(builder, arrowElbowed):
    builder.PrependBoolSlot(45, arrowElbowed, None)

def AddArrowElbowed(builder, arrowElbowed):
    DucElementAddArrowElbowed(builder, arrowElbowed)

def DucElementAddFreeDrawSimulatePressure(builder, freeDrawSimulatePressure):
    builder.PrependBoolSlot(47, freeDrawSimulatePressure, None)

def AddFreeDrawSimulatePressure(builder, freeDrawSimulatePressure):
    DucElementAddFreeDrawSimulatePressure(builder, freeDrawSimulatePressure)

def DucElementAddFileId(builder, fileId):
    builder.PrependUOffsetTRelativeSlot(48, flatbuffers.number_types.UOffsetTFlags.py_type(fileId), 0)

def AddFileId(builder, fileId):
    DucElementAddFileId(builder, fileId)

def DucElementAddImageStatus(builder, imageStatus):
    builder.PrependUint8Slot(49, imageStatus, None)

def AddImageStatus(builder, imageStatus):
    DucElementAddImageStatus(builder, imageStatus)

def DucElementAddStackLikeIsCollapsed(builder, stackLikeIsCollapsed):
    builder.PrependBoolSlot(51, stackLikeIsCollapsed, None)

def AddStackLikeIsCollapsed(builder, stackLikeIsCollapsed):
    DucElementAddStackLikeIsCollapsed(builder, stackLikeIsCollapsed)

def DucElementAddStrokeStyleV3(builder, strokeStyleV3):
    builder.PrependInt8Slot(54, strokeStyleV3, 0)

def AddStrokeStyleV3(builder, strokeStyleV3):
    DucElementAddStrokeStyleV3(builder, strokeStyleV3)

def DucElementAddFillStyleV3(builder, fillStyleV3):
    builder.PrependInt8Slot(55, fillStyleV3, 0)

def AddFillStyleV3(builder, fillStyleV3):
    DucElementAddFillStyleV3(builder, fillStyleV3)

def DucElementAddTextTextAlign(builder, textTextAlign):
    builder.PrependInt8Slot(56, textTextAlign, None)

def AddTextTextAlign(builder, textTextAlign):
    DucElementAddTextTextAlign(builder, textTextAlign)

def DucElementAddTextVerticalAlign(builder, textVerticalAlign):
    builder.PrependInt8Slot(57, textVerticalAlign, 0)

def AddTextVerticalAlign(builder, textVerticalAlign):
    DucElementAddTextVerticalAlign(builder, textVerticalAlign)

def DucElementAddX(builder, x):
    builder.PrependFloat64Slot(58, x, 0.0)

def AddX(builder, x):
    DucElementAddX(builder, x)

def DucElementAddY(builder, y):
    builder.PrependFloat64Slot(59, y, 0.0)

def AddY(builder, y):
    DucElementAddY(builder, y)

def DucElementAddImageScale(builder, imageScale):
    builder.PrependUOffsetTRelativeSlot(60, flatbuffers.number_types.UOffsetTFlags.py_type(imageScale), 0)

def AddImageScale(builder, imageScale):
    DucElementAddImageScale(builder, imageScale)

def DucElementAddFreeDrawPressures(builder, freeDrawPressures):
    builder.PrependUOffsetTRelativeSlot(61, flatbuffers.number_types.UOffsetTFlags.py_type(freeDrawPressures), 0)

def AddFreeDrawPressures(builder, freeDrawPressures):
    DucElementAddFreeDrawPressures(builder, freeDrawPressures)

def DucElementStartFreeDrawPressuresVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)

def StartFreeDrawPressuresVector(builder, numElems):
    return DucElementStartFreeDrawPressuresVector(builder, numElems)

def DucElementAddStrokeWidthV3(builder, strokeWidthV3):
    builder.PrependFloat64Slot(62, strokeWidthV3, 0.0)

def AddStrokeWidthV3(builder, strokeWidthV3):
    DucElementAddStrokeWidthV3(builder, strokeWidthV3)

def DucElementAddAngle(builder, angle):
    builder.PrependFloat64Slot(63, angle, 0.0)

def AddAngle(builder, angle):
    DucElementAddAngle(builder, angle)

def DucElementAddRoundness(builder, roundness):
    builder.PrependFloat64Slot(64, roundness, 0.0)

def AddRoundness(builder, roundness):
    DucElementAddRoundness(builder, roundness)

def DucElementAddWidth(builder, width):
    builder.PrependFloat64Slot(65, width, 0.0)

def AddWidth(builder, width):
    DucElementAddWidth(builder, width)

def DucElementAddHeight(builder, height):
    builder.PrependFloat64Slot(66, height, 0.0)

def AddHeight(builder, height):
    DucElementAddHeight(builder, height)

def DucElementAddTextFontSize(builder, textFontSize):
    builder.PrependFloat64Slot(67, textFontSize, None)

def AddTextFontSize(builder, textFontSize):
    DucElementAddTextFontSize(builder, textFontSize)

def DucElementAddTextLineHeight(builder, textLineHeight):
    builder.PrependFloat64Slot(68, textLineHeight, None)

def AddTextLineHeight(builder, textLineHeight):
    DucElementAddTextLineHeight(builder, textLineHeight)

def DucElementAddBlending(builder, blending):
    builder.PrependInt8Slot(69, blending, None)

def AddBlending(builder, blending):
    DucElementAddBlending(builder, blending)

def DucElementAddBackground(builder, background):
    builder.PrependUOffsetTRelativeSlot(70, flatbuffers.number_types.UOffsetTFlags.py_type(background), 0)

def AddBackground(builder, background):
    DucElementAddBackground(builder, background)

def DucElementStartBackgroundVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartBackgroundVector(builder, numElems):
    return DucElementStartBackgroundVector(builder, numElems)

def DucElementAddStroke(builder, stroke):
    builder.PrependUOffsetTRelativeSlot(71, flatbuffers.number_types.UOffsetTFlags.py_type(stroke), 0)

def AddStroke(builder, stroke):
    DucElementAddStroke(builder, stroke)

def DucElementStartStrokeVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartStrokeVector(builder, numElems):
    return DucElementStartStrokeVector(builder, numElems)

def DucElementAddImageCrop(builder, imageCrop):
    builder.PrependUOffsetTRelativeSlot(72, flatbuffers.number_types.UOffsetTFlags.py_type(imageCrop), 0)

def AddImageCrop(builder, imageCrop):
    DucElementAddImageCrop(builder, imageCrop)

def DucElementAddStackLikeClip(builder, stackLikeClip):
    builder.PrependBoolSlot(73, stackLikeClip, None)

def AddStackLikeClip(builder, stackLikeClip):
    DucElementAddStackLikeClip(builder, stackLikeClip)

def DucElementAddSubset(builder, subset):
    builder.PrependInt8Slot(74, subset, None)

def AddSubset(builder, subset):
    DucElementAddSubset(builder, subset)

def DucElementAddZIndex(builder, zIndex):
    builder.PrependInt32Slot(75, zIndex, 0)

def AddZIndex(builder, zIndex):
    DucElementAddZIndex(builder, zIndex)

def DucElementAddPolygonSides(builder, polygonSides):
    builder.PrependInt32Slot(76, polygonSides, None)

def AddPolygonSides(builder, polygonSides):
    DucElementAddPolygonSides(builder, polygonSides)

def DucElementAddTableColumnOrder(builder, tableColumnOrder):
    builder.PrependUOffsetTRelativeSlot(77, flatbuffers.number_types.UOffsetTFlags.py_type(tableColumnOrder), 0)

def AddTableColumnOrder(builder, tableColumnOrder):
    DucElementAddTableColumnOrder(builder, tableColumnOrder)

def DucElementStartTableColumnOrderVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartTableColumnOrderVector(builder, numElems):
    return DucElementStartTableColumnOrderVector(builder, numElems)

def DucElementAddTableRowOrder(builder, tableRowOrder):
    builder.PrependUOffsetTRelativeSlot(78, flatbuffers.number_types.UOffsetTFlags.py_type(tableRowOrder), 0)

def AddTableRowOrder(builder, tableRowOrder):
    DucElementAddTableRowOrder(builder, tableRowOrder)

def DucElementStartTableRowOrderVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartTableRowOrderVector(builder, numElems):
    return DucElementStartTableRowOrderVector(builder, numElems)

def DucElementAddTableColumns(builder, tableColumns):
    builder.PrependUOffsetTRelativeSlot(79, flatbuffers.number_types.UOffsetTFlags.py_type(tableColumns), 0)

def AddTableColumns(builder, tableColumns):
    DucElementAddTableColumns(builder, tableColumns)

def DucElementStartTableColumnsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartTableColumnsVector(builder, numElems):
    return DucElementStartTableColumnsVector(builder, numElems)

def DucElementAddTableRows(builder, tableRows):
    builder.PrependUOffsetTRelativeSlot(80, flatbuffers.number_types.UOffsetTFlags.py_type(tableRows), 0)

def AddTableRows(builder, tableRows):
    DucElementAddTableRows(builder, tableRows)

def DucElementStartTableRowsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartTableRowsVector(builder, numElems):
    return DucElementStartTableRowsVector(builder, numElems)

def DucElementAddTableCells(builder, tableCells):
    builder.PrependUOffsetTRelativeSlot(81, flatbuffers.number_types.UOffsetTFlags.py_type(tableCells), 0)

def AddTableCells(builder, tableCells):
    DucElementAddTableCells(builder, tableCells)

def DucElementStartTableCellsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartTableCellsVector(builder, numElems):
    return DucElementStartTableCellsVector(builder, numElems)

def DucElementAddTableStyle(builder, tableStyle):
    builder.PrependUOffsetTRelativeSlot(82, flatbuffers.number_types.UOffsetTFlags.py_type(tableStyle), 0)

def AddTableStyle(builder, tableStyle):
    DucElementAddTableStyle(builder, tableStyle)

def DucElementAddDocContent(builder, docContent):
    builder.PrependUOffsetTRelativeSlot(83, flatbuffers.number_types.UOffsetTFlags.py_type(docContent), 0)

def AddDocContent(builder, docContent):
    DucElementAddDocContent(builder, docContent)

def DucElementAddLinearElementLines(builder, linearElementLines):
    builder.PrependUOffsetTRelativeSlot(84, flatbuffers.number_types.UOffsetTFlags.py_type(linearElementLines), 0)

def AddLinearElementLines(builder, linearElementLines):
    DucElementAddLinearElementLines(builder, linearElementLines)

def DucElementStartLinearElementLinesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartLinearElementLinesVector(builder, numElems):
    return DucElementStartLinearElementLinesVector(builder, numElems)

def DucElementAddEllipseRatio(builder, ellipseRatio):
    builder.PrependFloat64Slot(85, ellipseRatio, None)

def AddEllipseRatio(builder, ellipseRatio):
    DucElementAddEllipseRatio(builder, ellipseRatio)

def DucElementAddEllipseStartAngle(builder, ellipseStartAngle):
    builder.PrependFloat64Slot(86, ellipseStartAngle, None)

def AddEllipseStartAngle(builder, ellipseStartAngle):
    DucElementAddEllipseStartAngle(builder, ellipseStartAngle)

def DucElementAddEllipseEndAngle(builder, ellipseEndAngle):
    builder.PrependFloat64Slot(87, ellipseEndAngle, None)

def AddEllipseEndAngle(builder, ellipseEndAngle):
    DucElementAddEllipseEndAngle(builder, ellipseEndAngle)

def DucElementAddEllipseShowAuxCrosshair(builder, ellipseShowAuxCrosshair):
    builder.PrependBoolSlot(88, ellipseShowAuxCrosshair, None)

def AddEllipseShowAuxCrosshair(builder, ellipseShowAuxCrosshair):
    DucElementAddEllipseShowAuxCrosshair(builder, ellipseShowAuxCrosshair)

def DucElementAddFreeDrawThinning(builder, freeDrawThinning):
    builder.PrependFloat64Slot(89, freeDrawThinning, None)

def AddFreeDrawThinning(builder, freeDrawThinning):
    DucElementAddFreeDrawThinning(builder, freeDrawThinning)

def DucElementAddFreeDrawSmoothing(builder, freeDrawSmoothing):
    builder.PrependFloat64Slot(90, freeDrawSmoothing, None)

def AddFreeDrawSmoothing(builder, freeDrawSmoothing):
    DucElementAddFreeDrawSmoothing(builder, freeDrawSmoothing)

def DucElementAddFreeDrawStreamline(builder, freeDrawStreamline):
    builder.PrependFloat64Slot(91, freeDrawStreamline, None)

def AddFreeDrawStreamline(builder, freeDrawStreamline):
    DucElementAddFreeDrawStreamline(builder, freeDrawStreamline)

def DucElementAddFreeDrawEasing(builder, freeDrawEasing):
    builder.PrependUOffsetTRelativeSlot(92, flatbuffers.number_types.UOffsetTFlags.py_type(freeDrawEasing), 0)

def AddFreeDrawEasing(builder, freeDrawEasing):
    DucElementAddFreeDrawEasing(builder, freeDrawEasing)

def DucElementAddFreeDrawStartCap(builder, freeDrawStartCap):
    builder.PrependBoolSlot(93, freeDrawStartCap, None)

def AddFreeDrawStartCap(builder, freeDrawStartCap):
    DucElementAddFreeDrawStartCap(builder, freeDrawStartCap)

def DucElementAddFreeDrawStartTaper(builder, freeDrawStartTaper):
    builder.PrependFloat64Slot(94, freeDrawStartTaper, None)

def AddFreeDrawStartTaper(builder, freeDrawStartTaper):
    DucElementAddFreeDrawStartTaper(builder, freeDrawStartTaper)

def DucElementAddFreeDrawStartEasing(builder, freeDrawStartEasing):
    builder.PrependUOffsetTRelativeSlot(95, flatbuffers.number_types.UOffsetTFlags.py_type(freeDrawStartEasing), 0)

def AddFreeDrawStartEasing(builder, freeDrawStartEasing):
    DucElementAddFreeDrawStartEasing(builder, freeDrawStartEasing)

def DucElementAddFreeDrawEndCap(builder, freeDrawEndCap):
    builder.PrependBoolSlot(96, freeDrawEndCap, None)

def AddFreeDrawEndCap(builder, freeDrawEndCap):
    DucElementAddFreeDrawEndCap(builder, freeDrawEndCap)

def DucElementAddFreeDrawEndTaper(builder, freeDrawEndTaper):
    builder.PrependFloat64Slot(97, freeDrawEndTaper, None)

def AddFreeDrawEndTaper(builder, freeDrawEndTaper):
    DucElementAddFreeDrawEndTaper(builder, freeDrawEndTaper)

def DucElementAddFreeDrawEndEasing(builder, freeDrawEndEasing):
    builder.PrependUOffsetTRelativeSlot(98, flatbuffers.number_types.UOffsetTFlags.py_type(freeDrawEndEasing), 0)

def AddFreeDrawEndEasing(builder, freeDrawEndEasing):
    DucElementAddFreeDrawEndEasing(builder, freeDrawEndEasing)

def DucElementAddFreeDrawSvgPath(builder, freeDrawSvgPath):
    builder.PrependUOffsetTRelativeSlot(99, flatbuffers.number_types.UOffsetTFlags.py_type(freeDrawSvgPath), 0)

def AddFreeDrawSvgPath(builder, freeDrawSvgPath):
    DucElementAddFreeDrawSvgPath(builder, freeDrawSvgPath)

def DucElementAddFreeDrawSize(builder, freeDrawSize):
    builder.PrependFloat64Slot(100, freeDrawSize, None)

def AddFreeDrawSize(builder, freeDrawSize):
    DucElementAddFreeDrawSize(builder, freeDrawSize)

def DucElementAddLinearElementPathOverrides(builder, linearElementPathOverrides):
    builder.PrependUOffsetTRelativeSlot(101, flatbuffers.number_types.UOffsetTFlags.py_type(linearElementPathOverrides), 0)

def AddLinearElementPathOverrides(builder, linearElementPathOverrides):
    DucElementAddLinearElementPathOverrides(builder, linearElementPathOverrides)

def DucElementStartLinearElementPathOverridesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartLinearElementPathOverridesVector(builder, numElems):
    return DucElementStartLinearElementPathOverridesVector(builder, numElems)

def DucElementAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(102, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def AddDescription(builder, description):
    DucElementAddDescription(builder, description)

def DucElementAddNoPlot(builder, noPlot):
    builder.PrependBoolSlot(103, noPlot, None)

def AddNoPlot(builder, noPlot):
    DucElementAddNoPlot(builder, noPlot)

def DucElementAddStackLikeLabelingColor(builder, stackLikeLabelingColor):
    builder.PrependUOffsetTRelativeSlot(104, flatbuffers.number_types.UOffsetTFlags.py_type(stackLikeLabelingColor), 0)

def AddStackLikeLabelingColor(builder, stackLikeLabelingColor):
    DucElementAddStackLikeLabelingColor(builder, stackLikeLabelingColor)

def DucElementAddStackLikeStrokeOverride(builder, stackLikeStrokeOverride):
    builder.PrependUOffsetTRelativeSlot(105, flatbuffers.number_types.UOffsetTFlags.py_type(stackLikeStrokeOverride), 0)

def AddStackLikeStrokeOverride(builder, stackLikeStrokeOverride):
    DucElementAddStackLikeStrokeOverride(builder, stackLikeStrokeOverride)

def DucElementAddStackLikeBackgroundOverride(builder, stackLikeBackgroundOverride):
    builder.PrependUOffsetTRelativeSlot(106, flatbuffers.number_types.UOffsetTFlags.py_type(stackLikeBackgroundOverride), 0)

def AddStackLikeBackgroundOverride(builder, stackLikeBackgroundOverride):
    DucElementAddStackLikeBackgroundOverride(builder, stackLikeBackgroundOverride)

def DucElementAddBlockInstanceBlockId(builder, blockInstanceBlockId):
    builder.PrependUOffsetTRelativeSlot(107, flatbuffers.number_types.UOffsetTFlags.py_type(blockInstanceBlockId), 0)

def AddBlockInstanceBlockId(builder, blockInstanceBlockId):
    DucElementAddBlockInstanceBlockId(builder, blockInstanceBlockId)

def DucElementAddBlockInstanceElementOverrides(builder, blockInstanceElementOverrides):
    builder.PrependUOffsetTRelativeSlot(108, flatbuffers.number_types.UOffsetTFlags.py_type(blockInstanceElementOverrides), 0)

def AddBlockInstanceElementOverrides(builder, blockInstanceElementOverrides):
    DucElementAddBlockInstanceElementOverrides(builder, blockInstanceElementOverrides)

def DucElementStartBlockInstanceElementOverridesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartBlockInstanceElementOverridesVector(builder, numElems):
    return DucElementStartBlockInstanceElementOverridesVector(builder, numElems)

def DucElementEnd(builder):
    return builder.EndObject()

def End(builder):
    return DucElementEnd(builder)
