# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Duc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class StandardViewSettings(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = StandardViewSettings()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsStandardViewSettings(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def StandardViewSettingsBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x55\x43\x5F", size_prefixed=size_prefixed)

    # StandardViewSettings
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # StandardViewSettings
    def Views(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Duc.IdentifiedView import IdentifiedView
            obj = IdentifiedView()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StandardViewSettings
    def ViewsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StandardViewSettings
    def ViewsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # StandardViewSettings
    def Ucs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Duc.IdentifiedUcs import IdentifiedUcs
            obj = IdentifiedUcs()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StandardViewSettings
    def UcsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StandardViewSettings
    def UcsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # StandardViewSettings
    def GridSettings(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Duc.IdentifiedGridSettings import IdentifiedGridSettings
            obj = IdentifiedGridSettings()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StandardViewSettings
    def GridSettingsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StandardViewSettings
    def GridSettingsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # StandardViewSettings
    def SnapSettings(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Duc.IdentifiedSnapSettings import IdentifiedSnapSettings
            obj = IdentifiedSnapSettings()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StandardViewSettings
    def SnapSettingsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StandardViewSettings
    def SnapSettingsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def StandardViewSettingsStart(builder):
    builder.StartObject(4)

def Start(builder):
    StandardViewSettingsStart(builder)

def StandardViewSettingsAddViews(builder, views):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(views), 0)

def AddViews(builder, views):
    StandardViewSettingsAddViews(builder, views)

def StandardViewSettingsStartViewsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartViewsVector(builder, numElems):
    return StandardViewSettingsStartViewsVector(builder, numElems)

def StandardViewSettingsAddUcs(builder, ucs):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(ucs), 0)

def AddUcs(builder, ucs):
    StandardViewSettingsAddUcs(builder, ucs)

def StandardViewSettingsStartUcsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartUcsVector(builder, numElems):
    return StandardViewSettingsStartUcsVector(builder, numElems)

def StandardViewSettingsAddGridSettings(builder, gridSettings):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(gridSettings), 0)

def AddGridSettings(builder, gridSettings):
    StandardViewSettingsAddGridSettings(builder, gridSettings)

def StandardViewSettingsStartGridSettingsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartGridSettingsVector(builder, numElems):
    return StandardViewSettingsStartGridSettingsVector(builder, numElems)

def StandardViewSettingsAddSnapSettings(builder, snapSettings):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(snapSettings), 0)

def AddSnapSettings(builder, snapSettings):
    StandardViewSettingsAddSnapSettings(builder, snapSettings)

def StandardViewSettingsStartSnapSettingsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartSnapSettingsVector(builder, numElems):
    return StandardViewSettingsStartSnapSettingsVector(builder, numElems)

def StandardViewSettingsEnd(builder):
    return builder.EndObject()

def End(builder):
    return StandardViewSettingsEnd(builder)
