// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { DucElement } from '../duc/duc-element.js';


export class DucImageElement {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DucImageElement {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDucImageElement(bb:flatbuffers.ByteBuffer, obj?:DucImageElement):DucImageElement {
  return (obj || new DucImageElement()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDucImageElement(bb:flatbuffers.ByteBuffer, obj?:DucImageElement):DucImageElement {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DucImageElement()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

base(obj?:DucElement):DucElement|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new DucElement()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

type():string|null
type(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
type(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

fileId():string|null
fileId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
fileId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

status():string|null
status(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
status(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

scale(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readFloat32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
}

scaleLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

scaleArray():Float32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? new Float32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startDucImageElement(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addBase(builder:flatbuffers.Builder, baseOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, baseOffset, 0);
}

static addType(builder:flatbuffers.Builder, typeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, typeOffset, 0);
}

static addFileId(builder:flatbuffers.Builder, fileIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, fileIdOffset, 0);
}

static addStatus(builder:flatbuffers.Builder, statusOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, statusOffset, 0);
}

static addScale(builder:flatbuffers.Builder, scaleOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, scaleOffset, 0);
}

static createScaleVector(builder:flatbuffers.Builder, data:number[]|Float32Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createScaleVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createScaleVector(builder:flatbuffers.Builder, data:number[]|Float32Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addFloat32(data[i]!);
  }
  return builder.endVector();
}

static startScaleVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endDucImageElement(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createDucImageElement(builder:flatbuffers.Builder, baseOffset:flatbuffers.Offset, typeOffset:flatbuffers.Offset, fileIdOffset:flatbuffers.Offset, statusOffset:flatbuffers.Offset, scaleOffset:flatbuffers.Offset):flatbuffers.Offset {
  DucImageElement.startDucImageElement(builder);
  DucImageElement.addBase(builder, baseOffset);
  DucImageElement.addType(builder, typeOffset);
  DucImageElement.addFileId(builder, fileIdOffset);
  DucImageElement.addStatus(builder, statusOffset);
  DucImageElement.addScale(builder, scaleOffset);
  return DucImageElement.endDucImageElement(builder);
}
}
