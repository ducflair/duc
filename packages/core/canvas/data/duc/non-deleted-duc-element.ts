// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { DucElementUnion, unionToDucElementUnion, unionListToDucElementUnion } from '../duc/duc-element-union.js';


export class NonDeletedDucElement {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):NonDeletedDucElement {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsNonDeletedDucElement(bb:flatbuffers.ByteBuffer, obj?:NonDeletedDucElement):NonDeletedDucElement {
  return (obj || new NonDeletedDucElement()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsNonDeletedDucElement(bb:flatbuffers.ByteBuffer, obj?:NonDeletedDucElement):NonDeletedDucElement {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new NonDeletedDucElement()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

elementType():DucElementUnion {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : DucElementUnion.NONE;
}

element<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

isDeleted():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startNonDeletedDucElement(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addElementType(builder:flatbuffers.Builder, elementType:DucElementUnion) {
  builder.addFieldInt8(0, elementType, DucElementUnion.NONE);
}

static addElement(builder:flatbuffers.Builder, elementOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, elementOffset, 0);
}

static addIsDeleted(builder:flatbuffers.Builder, isDeleted:boolean) {
  builder.addFieldInt8(2, +isDeleted, +false);
}

static endNonDeletedDucElement(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createNonDeletedDucElement(builder:flatbuffers.Builder, elementType:DucElementUnion, elementOffset:flatbuffers.Offset, isDeleted:boolean):flatbuffers.Offset {
  NonDeletedDucElement.startNonDeletedDucElement(builder);
  NonDeletedDucElement.addElementType(builder, elementType);
  NonDeletedDucElement.addElement(builder, elementOffset);
  NonDeletedDucElement.addIsDeleted(builder, isDeleted);
  return NonDeletedDucElement.endNonDeletedDucElement(builder);
}
}
