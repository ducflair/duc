# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Duc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class BezierPoint(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = BezierPoint()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsBezierPoint(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # BezierPoint
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # BezierPoint
    def X(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # BezierPoint
    def Y(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def BezierPointStart(builder):
    builder.StartObject(2)

def Start(builder):
    BezierPointStart(builder)

def BezierPointAddX(builder, x):
    builder.PrependFloat32Slot(0, x, 0.0)

def AddX(builder, x):
    BezierPointAddX(builder, x)

def BezierPointAddY(builder, y):
    builder.PrependFloat32Slot(1, y, 0.0)

def AddY(builder, y):
    BezierPointAddY(builder, y)

def BezierPointEnd(builder):
    return builder.EndObject()

def End(builder):
    return BezierPointEnd(builder)
