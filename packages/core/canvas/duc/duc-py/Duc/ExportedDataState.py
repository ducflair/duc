# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Duc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ExportedDataState(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ExportedDataState()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsExportedDataState(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ExportedDataState
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ExportedDataState
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ExportedDataState
    def Version(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ExportedDataState
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ExportedDataState
    def Elements(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Duc.DucElement import DucElement
            obj = DucElement()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ExportedDataState
    def ElementsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ExportedDataState
    def ElementsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # ExportedDataState
    def AppState(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.AppState import AppState
            obj = AppState()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ExportedDataState
    def Files(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.BinaryFiles import BinaryFiles
            obj = BinaryFiles()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def ExportedDataStateStart(builder):
    builder.StartObject(6)

def Start(builder):
    ExportedDataStateStart(builder)

def ExportedDataStateAddType(builder, type):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(type), 0)

def AddType(builder, type):
    ExportedDataStateAddType(builder, type)

def ExportedDataStateAddVersion(builder, version):
    builder.PrependInt32Slot(1, version, 0)

def AddVersion(builder, version):
    ExportedDataStateAddVersion(builder, version)

def ExportedDataStateAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    ExportedDataStateAddSource(builder, source)

def ExportedDataStateAddElements(builder, elements):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(elements), 0)

def AddElements(builder, elements):
    ExportedDataStateAddElements(builder, elements)

def ExportedDataStateStartElementsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartElementsVector(builder, numElems):
    return ExportedDataStateStartElementsVector(builder, numElems)

def ExportedDataStateAddAppState(builder, appState):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(appState), 0)

def AddAppState(builder, appState):
    ExportedDataStateAddAppState(builder, appState)

def ExportedDataStateAddFiles(builder, files):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(files), 0)

def AddFiles(builder, files):
    ExportedDataStateAddFiles(builder, files)

def ExportedDataStateEnd(builder):
    return builder.EndObject()

def End(builder):
    return ExportedDataStateEnd(builder)
