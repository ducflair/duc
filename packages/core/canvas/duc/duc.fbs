// Official FlatBuffers Compiler: https://flatbuffers.ar.je/ 

namespace Duc;




// /////////////////////

// Point type
table Point {
  x: float;
  y: float;
}

// Supporting types
table PointBinding {
  elementId: string;
  focus: float;
  gap: float;
  fixedPoint: Point;
}


// Base table for DucElement with common fields
table DucElement {
  id: string;
  type: string;  // "text", "line", "freedraw", "image", "frame", "group", "magicframe", "iframe"
  x: float;
  y: float;
  index: string;
  scope: string;  // Assuming SupportedMeasures as string
  writingLayer: string;  // Assuming WritingLayers as string
  label: string;
  isVisible: bool;
  roundnessType: string; // Assuming StrokeRoundness as string
  roundnessValue: int;  // Optional int
  backgroundColor: string;
  strokeColor: string;
  strokeWidth: int;
  strokeStyle: string;  // Assuming StrokeStyle as string
  strokePlacement: int;
  opacity: float;
  width: float;
  height: float;
  angle: float;
  isDeleted: bool;
  groupIds: [string];  // Vector of GroupId
  frameId: string;
  boundElements: [BoundElement];  // Vector of bound elements
  link: string;
  locked: bool;

  // MagicFrameElement specific fields
  customData: string;  // Simplified as string
  
  isStrokeDisabled: bool;
  isBackgroundDisabled: bool;

  // TextElement specific fields
  fontSize: int;
  fontFamily: string;  // Assuming FontFamilyValues as string
  text: string;
  textAlign: string;  // Assuming TextAlign as string
  verticalAlign: string;  // Assuming VerticalAlign as string
  containerId: string;
  originalText: string;
  lineHeight: float;  // Assuming float for unitless line height
  autoResize: bool;

  // LinearElement specific fields
  points: [Point];
  lastCommittedPoint: Point;
  startBinding: PointBinding;
  endBinding: PointBinding;
  startArrowhead: string;  // Assuming Arrowhead as string
  endArrowhead: string;
  elbowed: bool;


  // FreeDrawElement specific fields
  pressures: [float];
  simulatePressure: bool;

  // ImageElement specific fields
  fileId: string;
  status: string;  // "pending", "saved", or "error"
  scale: Point;

  // FrameElement specific fields
  isCollapsed: bool;
  name: string; // FIXME: Perhaps will be deprecated because of field "label"

  // GroupElement specific fields 
  groupIdRef: string;
}



// Define a table for BoundElement used in DucElement
table BoundElement {
  id: string;
  type: string;  // "arrow" or "text"
}


// /////////////////////
















// /////////////////////





table DucGroup {
  id: string;
//   type: string = "group";
  type: string;
  isCollapsed: bool;
  label: string;
  scope: string;
  writingLayer: string;
}


table AppState {
  activeEmbeddableElement: DucElement;
  activeEmbeddableState: string;
  draggingElement: DucElement;
  resizingElement: DucElement;
  multiElement: DucElement;
  selectionElement: DucElement;
  frameToHighlight: DucElement;
  frameRenderingEnabled: bool;
  frameRenderingName: bool;
  frameRenderingOutline: bool;
  frameRenderingClip: bool;
  editingFrame: string;
  elementsToHighlight: [DucElement];
  editingElement: DucElement;
  currentItemStrokeColor: string;
  currentItemStrokePlacement: int;
  currentItemBackgroundColor: string;
  currentItemFillStyle: string;
  currentItemStrokeWidth: int;
  currentItemStrokeStyle: string;
  currentItemRoughness: int;
  currentItemOpacity: float;
  currentItemFontFamily: string;
  currentItemFontSize: int;
  currentItemTextAlign: string;
  currentItemStartArrowhead: string;
  currentItemEndArrowhead: string;
  currentItemRoundness: string;
  viewBackgroundColor: string;
  scope: string;
  writingLayer: string;
  groups: [DucGroup];
  scrollX: float;
  scrollY: float;
  cursorButton: string;
  scrolledOutside: bool;
  name: string;
  zoom: float;
  lastPointerDownWith: string;
  selectedElementIds: [string];
  previousSelectedElementIds: [string];
  selectedElementsAreBeingDragged: bool;
  shouldCacheIgnoreZoom: bool;
  gridSize: int;
  selectedGroupIds: [string];
  editingGroupId: string;
  pasteDialogShown: bool;
  pasteDialogData: string;
  scaleRatioLocked: bool;
  displayAllPointDistances: bool;
  displayDistanceOnDrawing: bool;
  displayAllPointCoordinates: bool;
  displayAllPointInfoSelected: bool;

  enableLineBendingOnEdit: bool;
  allowIndependentCurveHandles: bool; 
  coordDecimalPlaces: int;
}


// /////////////////////




// Define the BinaryFileData table
table BinaryFileData {
  mimeType: string;
  id: string;
  data: [ubyte];  // Binary data as a vector of unsigned bytes
  created: long;
  lastRetrieved: long;  // Optional field, default value can be used
}

// Define a table to hold the BinaryFiles mapping
table BinaryFilesEntry {
  key: string;
  value: BinaryFileData;
}

table BinaryFiles {
  entries: [BinaryFilesEntry];
}

// /////////////////////








// Finally, define the ExportedDataState table
table ExportedDataState {
  type: string;
  version: int;
  source: string;
  elements: [DucElement];
  appState: AppState;
  files: BinaryFiles;
}

root_type ExportedDataState;