// Official FlatBuffers Compiler: https://flatbuffers.ar.je/ 

// To maintain backward compatibility when evolving FlatBuffers schemas, follow these guidelines:

// - **Should be fine to rename fields**
// - **Add new fields at the END of tables**: This ensures older code can still read the data without issues.
// - **DONT REMOVE FIELDS**: Instead of deleting unused fields, mark them as deprecated to prevent their use in new code while maintaining compatibility with existing data.
// - **DONT CHANGE FIELD TYPES**: Modifying a field's type can lead to incompatibilities. If necessary, add a new field with the desired type and deprecate the old one.
// - **BE CAREFUL WITH DEFAULT VALUES**: Changing default values can cause inconsistencies when reading older data. It's best to set appropriate defaults initially and avoid altering them. 

namespace Duc;




// /////////////////////

// Point type
table Point {
  x_v2: float = null;
  y_v2: float = null;
  isCurve: bool = null;
  mirroring: byte = null;
  borderRadius: double = null;
  handleIn: SimplePoint;
  handleOut: SimplePoint;
  x_v3: double;
  y_v3: double;
}

// Supporting types
table PointBinding {
  elementId: string;
  focus: float;
  gap: float;
  fixedPoint: Point;
}

// Enhanced point type with additional features
table SimplePoint {
  x: double;
  y: double;  
}

// Base table for DucElement with common fields
table DucElement {
  id: string;
  type: string;  // "text", "line", "freedraw", "image", "frame", "group", "magicframe", "iframe"
  x_v2: float = null;
  y_v2: float = null;
  index: string (deprecated);
  scope: string;
  writingLayer: string (deprecated);
  label: string;
  isVisible: bool;
  roundnessType_v2: string (deprecated);
  roundnessValue_v2: int (deprecated);
  backgroundColor: string;
  strokeColor: string;
  strokeWidth_v2: int = null;
  strokeStyle_v2: string (deprecated);
  fillStyle_v2: string (deprecated);
  strokePlacement: byte;
  opacity: float;
  width_v2: float = null;
  height_v2: float = null;
  angle_v2: float = null;
  isDeleted: bool;
  groupIds: [string];
  frameId: string;
  boundElements: [BoundElement];
  link: string;
  locked: bool;
  
  // MagicFrameElement specific fields
  customData: string (deprecated);
  
  isStrokeDisabled: bool;
  isBackgroundDisabled: bool;
  
  // TextElement specific fields
  fontSize_v2: int = null;
  fontFamily: string;
  text: string;
  textAlign_v2: string (deprecated);
  verticalAlign_v2: string (deprecated);
  containerId: string;
  originalText: string (deprecated);
  lineHeight_v2: float = null;
  autoResize: bool = null;
  
  // LinearElement specific fields
  points: [Point];
  lastCommittedPoint: Point;
  startBinding: PointBinding;
  endBinding: PointBinding;
  startArrowhead: string;
  endArrowhead: string;
  elbowed: bool = null;
  
  // FreeDrawElement specific fields
  pressures_v2: [float] (deprecated);
  simulatePressure: bool = null;
  
  // ImageElement specific fields
  fileId: string;
  status: string;
  scale_v2: Point (deprecated);
  
  // FrameElement specific fields
  isCollapsed: bool = null;
  name: string; // FIXME: Perhaps will be deprecated because of field "label"
  
  // GroupElement specific fields
  groupIdRef: string;

  strokeStyle_v3: byte;
  fillStyle_v3: byte;
  textAlign_v3: byte = null;
  verticalAlign_v3: byte;
  x_v3: double;
  y_v3: double;
  scale_v3: SimplePoint;
  pressures_v3: [double];
  strokeWidth_v3: double;
  angle_v3: double;
  borderRadius: double;
  width_v3: double;
  height_v3: double;
  fontSize_v3: double = null;
  lineHeight_v3: double = null;
}

// Define a table for BoundElement used in DucElement
table BoundElement {
  id: string;
  type: string;  // "arrow" or "text"
}

table DucGroup {
  id: string;
  type: string;
  isCollapsed: bool;
  label: string;
  scope: string;
  writingLayer: string (deprecated);
}

table AppState {
  activeEmbeddableElement: DucElement (deprecated);
  activeEmbeddableState: string (deprecated);
  draggingElement: DucElement (deprecated);
  resizingElement: DucElement (deprecated);
  multiElement: DucElement (deprecated);
  selectionElement: DucElement (deprecated);
  frameToHighlight: DucElement (deprecated);
  frameRenderingEnabled: bool;
  frameRenderingName: bool;
  frameRenderingOutline: bool;
  frameRenderingClip: bool;
  editingFrame: string (deprecated);
  elementsToHighlight: [DucElement] (deprecated);
  editingElement: DucElement (deprecated);
  currentItemStrokeColor: string;
  currentItemStrokePlacement_v2: int (deprecated);
  currentItemBackgroundColor: string;
  currentItemFillStyle: string (deprecated);
  currentItemStrokeWidth_v2: int (deprecated);
  currentItemStrokeStyle: string (deprecated);
  currentItemRoughness: int (deprecated);
  currentItemOpacity: float;
  currentItemFontFamily: int;
  currentItemFontSize_v2: int (deprecated);
  currentItemTextAlign: string (deprecated);
  currentItemStartArrowhead: string;
  currentItemEndArrowhead: string;
  currentItemRoundness: string (deprecated);
  viewBackgroundColor: string;
  scope: string;
  writingLayer: string (deprecated);
  groups: [DucGroup];
  scrollX: float;
  scrollY: float;
  cursorButton: string;
  scrolledOutside: bool;
  name: string;
  zoom: float;
  lastPointerDownWith: string;
  selectedElementIds: [string];
  previousSelectedElementIds: [string] (deprecated);
  selectedElementsAreBeingDragged: bool (deprecated);
  shouldCacheIgnoreZoom: bool;
  gridSize: int;
  selectedGroupIds: [string] (deprecated);
  editingGroupId: string (deprecated);
  pasteDialogShown: bool (deprecated);
  pasteDialogData: string (deprecated);
  scaleRatioLocked: bool;
  displayAllPointDistances: bool;
  displayDistanceOnDrawing: bool;
  displayAllPointCoordinates: bool;
  displayAllPointInfoSelected: bool;
  displayRootAxis: bool;

  enableLineBendingOnEdit: bool (deprecated);
  allowIndependentCurveHandles: bool (deprecated); 
  coordDecimalPlaces: int (deprecated);

  currentItemFillStyle_v3: byte;
  currentItemStrokeStyle_v3: byte;
  currentItemTextAlign_v3: byte;
  lineBendingMode: bool;

  currentItemStrokeWidth_v3: double;
  currentItemStrokePlacement_v3: byte;
  currentItemFontSize_v3: double;
  coordDecimalPlaces_v3: byte;
}

// Define the BinaryFileData table
table BinaryFileData {
  mimeType: string;
  id: string;
  data: [ubyte];
  created: long;
  lastRetrieved: long;
}

// Define a table to hold the BinaryFiles mapping
table BinaryFilesEntry {
  key: string;
  value: BinaryFileData;
}

table BinaryFiles {
  entries: [BinaryFilesEntry];
}

// Finally, define the ExportedDataState table
table ExportedDataState {
  type: string;
  version: int;
  source: string;
  elements: [DucElement];
  appState: AppState;
  files: BinaryFiles;
}

root_type ExportedDataState;