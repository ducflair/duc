// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { DucGroup } from '../duc/duc-group';


export class AppState {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):AppState {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsAppState(bb:flatbuffers.ByteBuffer, obj?:AppState):AppState {
  return (obj || new AppState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsAppState(bb:flatbuffers.ByteBuffer, obj?:AppState):AppState {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new AppState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

frameRenderingEnabled():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

frameRenderingName():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

frameRenderingOutline():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

frameRenderingClip():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

currentItemStrokeColor():string|null
currentItemStrokeColor(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
currentItemStrokeColor(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

currentItemBackgroundColor():string|null
currentItemBackgroundColor(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
currentItemBackgroundColor(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

currentItemOpacity():number {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

currentItemFontFamily():number {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

currentItemStartArrowhead():string|null
currentItemStartArrowhead(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
currentItemStartArrowhead(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

currentItemEndArrowhead():string|null
currentItemEndArrowhead(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
currentItemEndArrowhead(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

viewBackgroundColor():string|null
viewBackgroundColor(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
viewBackgroundColor(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

scope():string|null
scope(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
scope(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

groups(index: number, obj?:DucGroup):DucGroup|null {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? (obj || new DucGroup()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

groupsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

scrollX():number {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

scrollY():number {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

cursorButton():string|null
cursorButton(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
cursorButton(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

scrolledOutside():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

zoom():number {
  const offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

lastPointerDownWith():string|null
lastPointerDownWith(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
lastPointerDownWith(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

selectedElementIds(index: number):string
selectedElementIds(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
selectedElementIds(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 82);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

selectedElementIdsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 82);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

shouldCacheIgnoreZoom():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 88);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

gridSize():number {
  const offset = this.bb!.__offset(this.bb_pos, 90);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

scaleRatioLocked():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 100);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

displayAllPointDistances():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 102);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

displayDistanceOnDrawing():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 104);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

displayAllPointCoordinates():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 106);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

displayAllPointInfoSelected():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 108);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

displayRootAxis():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 110);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

currentItemFillStyleV3():number {
  const offset = this.bb!.__offset(this.bb_pos, 118);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : 0;
}

currentItemStrokeStyleV3():number {
  const offset = this.bb!.__offset(this.bb_pos, 120);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : 0;
}

currentItemTextAlignV3():number {
  const offset = this.bb!.__offset(this.bb_pos, 122);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : 0;
}

lineBendingMode():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 124);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

currentItemStrokeWidthV3():number {
  const offset = this.bb!.__offset(this.bb_pos, 126);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

currentItemStrokePlacementV3():number {
  const offset = this.bb!.__offset(this.bb_pos, 128);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : 0;
}

currentItemFontSizeV3():number {
  const offset = this.bb!.__offset(this.bb_pos, 130);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

coordDecimalPlacesV3():number {
  const offset = this.bb!.__offset(this.bb_pos, 132);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : 0;
}

static startAppState(builder:flatbuffers.Builder) {
  builder.startObject(65);
}

static addFrameRenderingEnabled(builder:flatbuffers.Builder, frameRenderingEnabled:boolean) {
  builder.addFieldInt8(7, +frameRenderingEnabled, +false);
}

static addFrameRenderingName(builder:flatbuffers.Builder, frameRenderingName:boolean) {
  builder.addFieldInt8(8, +frameRenderingName, +false);
}

static addFrameRenderingOutline(builder:flatbuffers.Builder, frameRenderingOutline:boolean) {
  builder.addFieldInt8(9, +frameRenderingOutline, +false);
}

static addFrameRenderingClip(builder:flatbuffers.Builder, frameRenderingClip:boolean) {
  builder.addFieldInt8(10, +frameRenderingClip, +false);
}

static addCurrentItemStrokeColor(builder:flatbuffers.Builder, currentItemStrokeColorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, currentItemStrokeColorOffset, 0);
}

static addCurrentItemBackgroundColor(builder:flatbuffers.Builder, currentItemBackgroundColorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, currentItemBackgroundColorOffset, 0);
}

static addCurrentItemOpacity(builder:flatbuffers.Builder, currentItemOpacity:number) {
  builder.addFieldFloat32(21, currentItemOpacity, 0.0);
}

static addCurrentItemFontFamily(builder:flatbuffers.Builder, currentItemFontFamily:number) {
  builder.addFieldInt32(22, currentItemFontFamily, 0);
}

static addCurrentItemStartArrowhead(builder:flatbuffers.Builder, currentItemStartArrowheadOffset:flatbuffers.Offset) {
  builder.addFieldOffset(25, currentItemStartArrowheadOffset, 0);
}

static addCurrentItemEndArrowhead(builder:flatbuffers.Builder, currentItemEndArrowheadOffset:flatbuffers.Offset) {
  builder.addFieldOffset(26, currentItemEndArrowheadOffset, 0);
}

static addViewBackgroundColor(builder:flatbuffers.Builder, viewBackgroundColorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(28, viewBackgroundColorOffset, 0);
}

static addScope(builder:flatbuffers.Builder, scopeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(29, scopeOffset, 0);
}

static addGroups(builder:flatbuffers.Builder, groupsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(31, groupsOffset, 0);
}

static createGroupsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startGroupsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addScrollX(builder:flatbuffers.Builder, scrollX:number) {
  builder.addFieldFloat32(32, scrollX, 0.0);
}

static addScrollY(builder:flatbuffers.Builder, scrollY:number) {
  builder.addFieldFloat32(33, scrollY, 0.0);
}

static addCursorButton(builder:flatbuffers.Builder, cursorButtonOffset:flatbuffers.Offset) {
  builder.addFieldOffset(34, cursorButtonOffset, 0);
}

static addScrolledOutside(builder:flatbuffers.Builder, scrolledOutside:boolean) {
  builder.addFieldInt8(35, +scrolledOutside, +false);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(36, nameOffset, 0);
}

static addZoom(builder:flatbuffers.Builder, zoom:number) {
  builder.addFieldFloat32(37, zoom, 0.0);
}

static addLastPointerDownWith(builder:flatbuffers.Builder, lastPointerDownWithOffset:flatbuffers.Offset) {
  builder.addFieldOffset(38, lastPointerDownWithOffset, 0);
}

static addSelectedElementIds(builder:flatbuffers.Builder, selectedElementIdsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(39, selectedElementIdsOffset, 0);
}

static createSelectedElementIdsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSelectedElementIdsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addShouldCacheIgnoreZoom(builder:flatbuffers.Builder, shouldCacheIgnoreZoom:boolean) {
  builder.addFieldInt8(42, +shouldCacheIgnoreZoom, +false);
}

static addGridSize(builder:flatbuffers.Builder, gridSize:number) {
  builder.addFieldInt32(43, gridSize, 0);
}

static addScaleRatioLocked(builder:flatbuffers.Builder, scaleRatioLocked:boolean) {
  builder.addFieldInt8(48, +scaleRatioLocked, +false);
}

static addDisplayAllPointDistances(builder:flatbuffers.Builder, displayAllPointDistances:boolean) {
  builder.addFieldInt8(49, +displayAllPointDistances, +false);
}

static addDisplayDistanceOnDrawing(builder:flatbuffers.Builder, displayDistanceOnDrawing:boolean) {
  builder.addFieldInt8(50, +displayDistanceOnDrawing, +false);
}

static addDisplayAllPointCoordinates(builder:flatbuffers.Builder, displayAllPointCoordinates:boolean) {
  builder.addFieldInt8(51, +displayAllPointCoordinates, +false);
}

static addDisplayAllPointInfoSelected(builder:flatbuffers.Builder, displayAllPointInfoSelected:boolean) {
  builder.addFieldInt8(52, +displayAllPointInfoSelected, +false);
}

static addDisplayRootAxis(builder:flatbuffers.Builder, displayRootAxis:boolean) {
  builder.addFieldInt8(53, +displayRootAxis, +false);
}

static addCurrentItemFillStyleV3(builder:flatbuffers.Builder, currentItemFillStyleV3:number) {
  builder.addFieldInt8(57, currentItemFillStyleV3, 0);
}

static addCurrentItemStrokeStyleV3(builder:flatbuffers.Builder, currentItemStrokeStyleV3:number) {
  builder.addFieldInt8(58, currentItemStrokeStyleV3, 0);
}

static addCurrentItemTextAlignV3(builder:flatbuffers.Builder, currentItemTextAlignV3:number) {
  builder.addFieldInt8(59, currentItemTextAlignV3, 0);
}

static addLineBendingMode(builder:flatbuffers.Builder, lineBendingMode:boolean) {
  builder.addFieldInt8(60, +lineBendingMode, +false);
}

static addCurrentItemStrokeWidthV3(builder:flatbuffers.Builder, currentItemStrokeWidthV3:number) {
  builder.addFieldFloat64(61, currentItemStrokeWidthV3, 0.0);
}

static addCurrentItemStrokePlacementV3(builder:flatbuffers.Builder, currentItemStrokePlacementV3:number) {
  builder.addFieldInt8(62, currentItemStrokePlacementV3, 0);
}

static addCurrentItemFontSizeV3(builder:flatbuffers.Builder, currentItemFontSizeV3:number) {
  builder.addFieldFloat64(63, currentItemFontSizeV3, 0.0);
}

static addCoordDecimalPlacesV3(builder:flatbuffers.Builder, coordDecimalPlacesV3:number) {
  builder.addFieldInt8(64, coordDecimalPlacesV3, 0);
}

static endAppState(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
