// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class ActiveTool {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ActiveTool {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsActiveTool(bb:flatbuffers.ByteBuffer, obj?:ActiveTool):ActiveTool {
  return (obj || new ActiveTool()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsActiveTool(bb:flatbuffers.ByteBuffer, obj?:ActiveTool):ActiveTool {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ActiveTool()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

lastActiveTool():string|null
lastActiveTool(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
lastActiveTool(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

locked():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startActiveTool(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addLastActiveTool(builder:flatbuffers.Builder, lastActiveToolOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, lastActiveToolOffset, 0);
}

static addLocked(builder:flatbuffers.Builder, locked:boolean) {
  builder.addFieldInt8(1, +locked, +false);
}

static endActiveTool(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createActiveTool(builder:flatbuffers.Builder, lastActiveToolOffset:flatbuffers.Offset, locked:boolean):flatbuffers.Offset {
  ActiveTool.startActiveTool(builder);
  ActiveTool.addLastActiveTool(builder, lastActiveToolOffset);
  ActiveTool.addLocked(builder, locked);
  return ActiveTool.endActiveTool(builder);
}
}
