// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class PointBinding {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):PointBinding {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPointBinding(bb:flatbuffers.ByteBuffer, obj?:PointBinding):PointBinding {
  return (obj || new PointBinding()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPointBinding(bb:flatbuffers.ByteBuffer, obj?:PointBinding):PointBinding {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new PointBinding()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

elementId():string|null
elementId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
elementId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

focus():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

gap():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

static startPointBinding(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addElementId(builder:flatbuffers.Builder, elementIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, elementIdOffset, 0);
}

static addFocus(builder:flatbuffers.Builder, focus:number) {
  builder.addFieldFloat32(1, focus, 0.0);
}

static addGap(builder:flatbuffers.Builder, gap:number) {
  builder.addFieldFloat32(2, gap, 0.0);
}

static endPointBinding(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createPointBinding(builder:flatbuffers.Builder, elementIdOffset:flatbuffers.Offset, focus:number, gap:number):flatbuffers.Offset {
  PointBinding.startPointBinding(builder);
  PointBinding.addElementId(builder, elementIdOffset);
  PointBinding.addFocus(builder, focus);
  PointBinding.addGap(builder, gap);
  return PointBinding.endPointBinding(builder);
}
}
