# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Duc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class StrokeSides(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = StrokeSides()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsStrokeSides(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # StrokeSides
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # StrokeSides
    def Preference(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # StrokeSides
    def Values(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # StrokeSides
    def ValuesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float64Flags, o)
        return 0

    # StrokeSides
    def ValuesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StrokeSides
    def ValuesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def StrokeSidesStart(builder):
    builder.StartObject(2)

def Start(builder):
    StrokeSidesStart(builder)

def StrokeSidesAddPreference(builder, preference):
    builder.PrependInt8Slot(0, preference, 0)

def AddPreference(builder, preference):
    StrokeSidesAddPreference(builder, preference)

def StrokeSidesAddValues(builder, values):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(values), 0)

def AddValues(builder, values):
    StrokeSidesAddValues(builder, values)

def StrokeSidesStartValuesVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)

def StartValuesVector(builder, numElems):
    return StrokeSidesStartValuesVector(builder, numElems)

def StrokeSidesEnd(builder):
    return builder.EndObject()

def End(builder):
    return StrokeSidesEnd(builder)
