# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Duc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class PointBinding(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = PointBinding()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsPointBinding(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # PointBinding
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # PointBinding
    def ElementId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # PointBinding
    def Focus(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # PointBinding
    def Gap(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # PointBinding
    def FixedPoint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.Point import Point
            obj = Point()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PointBinding
    def Point(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.BindingPoint import BindingPoint
            obj = BindingPoint()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PointBinding
    def Head(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def PointBindingStart(builder):
    builder.StartObject(6)

def Start(builder):
    PointBindingStart(builder)

def PointBindingAddElementId(builder, elementId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(elementId), 0)

def AddElementId(builder, elementId):
    PointBindingAddElementId(builder, elementId)

def PointBindingAddFocus(builder, focus):
    builder.PrependFloat32Slot(1, focus, 0.0)

def AddFocus(builder, focus):
    PointBindingAddFocus(builder, focus)

def PointBindingAddGap(builder, gap):
    builder.PrependFloat32Slot(2, gap, 0.0)

def AddGap(builder, gap):
    PointBindingAddGap(builder, gap)

def PointBindingAddFixedPoint(builder, fixedPoint):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(fixedPoint), 0)

def AddFixedPoint(builder, fixedPoint):
    PointBindingAddFixedPoint(builder, fixedPoint)

def PointBindingAddPoint(builder, point):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(point), 0)

def AddPoint(builder, point):
    PointBindingAddPoint(builder, point)

def PointBindingAddHead(builder, head):
    builder.PrependInt8Slot(5, head, 0)

def AddHead(builder, head):
    PointBindingAddHead(builder, head)

def PointBindingEnd(builder):
    return builder.EndObject()

def End(builder):
    return PointBindingEnd(builder)
