# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Duc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ImageCrop(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ImageCrop()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsImageCrop(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ImageCrop
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ImageCrop
    def X(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # ImageCrop
    def Y(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # ImageCrop
    def Width(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # ImageCrop
    def Height(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # ImageCrop
    def NaturalWidth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # ImageCrop
    def NaturalHeight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def ImageCropStart(builder):
    builder.StartObject(6)

def Start(builder):
    ImageCropStart(builder)

def ImageCropAddX(builder, x):
    builder.PrependFloat64Slot(0, x, 0.0)

def AddX(builder, x):
    ImageCropAddX(builder, x)

def ImageCropAddY(builder, y):
    builder.PrependFloat64Slot(1, y, 0.0)

def AddY(builder, y):
    ImageCropAddY(builder, y)

def ImageCropAddWidth(builder, width):
    builder.PrependFloat64Slot(2, width, 0.0)

def AddWidth(builder, width):
    ImageCropAddWidth(builder, width)

def ImageCropAddHeight(builder, height):
    builder.PrependFloat64Slot(3, height, 0.0)

def AddHeight(builder, height):
    ImageCropAddHeight(builder, height)

def ImageCropAddNaturalWidth(builder, naturalWidth):
    builder.PrependFloat64Slot(4, naturalWidth, 0.0)

def AddNaturalWidth(builder, naturalWidth):
    ImageCropAddNaturalWidth(builder, naturalWidth)

def ImageCropAddNaturalHeight(builder, naturalHeight):
    builder.PrependFloat64Slot(5, naturalHeight, 0.0)

def AddNaturalHeight(builder, naturalHeight):
    ImageCropAddNaturalHeight(builder, naturalHeight)

def ImageCropEnd(builder):
    return builder.EndObject()

def End(builder):
    return ImageCropEnd(builder)
