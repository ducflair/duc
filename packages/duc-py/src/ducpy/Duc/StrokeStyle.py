# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Duc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class StrokeStyle(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = StrokeStyle()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsStrokeStyle(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # StrokeStyle
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # StrokeStyle
    def Preference(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # StrokeStyle
    def Cap(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return None

    # StrokeStyle
    def Join(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return None

    # StrokeStyle
    def Dash(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # StrokeStyle
    def DashAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float64Flags, o)
        return 0

    # StrokeStyle
    def DashLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StrokeStyle
    def DashIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # StrokeStyle
    def DashCap(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return None

    # StrokeStyle
    def MiterLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return None

def StrokeStyleStart(builder):
    builder.StartObject(6)

def Start(builder):
    StrokeStyleStart(builder)

def StrokeStyleAddPreference(builder, preference):
    builder.PrependInt8Slot(0, preference, 0)

def AddPreference(builder, preference):
    StrokeStyleAddPreference(builder, preference)

def StrokeStyleAddCap(builder, cap):
    builder.PrependInt8Slot(1, cap, None)

def AddCap(builder, cap):
    StrokeStyleAddCap(builder, cap)

def StrokeStyleAddJoin(builder, join):
    builder.PrependInt8Slot(2, join, None)

def AddJoin(builder, join):
    StrokeStyleAddJoin(builder, join)

def StrokeStyleAddDash(builder, dash):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(dash), 0)

def AddDash(builder, dash):
    StrokeStyleAddDash(builder, dash)

def StrokeStyleStartDashVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)

def StartDashVector(builder, numElems):
    return StrokeStyleStartDashVector(builder, numElems)

def StrokeStyleAddDashCap(builder, dashCap):
    builder.PrependInt8Slot(4, dashCap, None)

def AddDashCap(builder, dashCap):
    StrokeStyleAddDashCap(builder, dashCap)

def StrokeStyleAddMiterLimit(builder, miterLimit):
    builder.PrependFloat64Slot(5, miterLimit, None)

def AddMiterLimit(builder, miterLimit):
    StrokeStyleAddMiterLimit(builder, miterLimit)

def StrokeStyleEnd(builder):
    return builder.EndObject()

def End(builder):
    return StrokeStyleEnd(builder)
