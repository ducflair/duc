# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Duc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DucElement(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DucElement()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDucElement(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def DucElementBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x55\x43\x5F", size_prefixed=size_prefixed)

    # DucElement
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DucElement
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DucElement
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DucElement
    def XV2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return None

    # DucElement
    def YV2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return None

    # DucElement
    def Scope(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DucElement
    def Label(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DucElement
    def IsVisible(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # DucElement
    def BackgroundColorV3(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DucElement
    def StrokeColorV3(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DucElement
    def Opacity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # DucElement
    def WidthV2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return None

    # DucElement
    def HeightV2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return None

    # DucElement
    def AngleV2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return None

    # DucElement
    def IsDeleted(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # DucElement
    def GroupIds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # DucElement
    def GroupIdsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DucElement
    def GroupIdsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        return o == 0

    # DucElement
    def FrameId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DucElement
    def BoundElements(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Duc.BoundElement import BoundElement
            obj = BoundElement()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucElement
    def BoundElementsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DucElement
    def BoundElementsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        return o == 0

    # DucElement
    def Link(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DucElement
    def Locked(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # DucElement
    def FontSizeV2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return None

    # DucElement
    def FontFamily(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DucElement
    def Text(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DucElement
    def ContainerId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DucElement
    def LineHeightV2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return None

    # DucElement
    def AutoResize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return None

    # DucElement
    def Points(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Duc.Point import Point
            obj = Point()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucElement
    def PointsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DucElement
    def PointsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        return o == 0

    # DucElement
    def LastCommittedPoint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.Point import Point
            obj = Point()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucElement
    def StartBinding(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.PointBinding import PointBinding
            obj = PointBinding()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucElement
    def EndBinding(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.PointBinding import PointBinding
            obj = PointBinding()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucElement
    def Elbowed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(94))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return None

    # DucElement
    def SimulatePressure(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(98))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return None

    # DucElement
    def FileId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(100))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DucElement
    def Status(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(102))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DucElement
    def IsCollapsed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(106))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return None

    # DucElement
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(108))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DucElement
    def GroupIdRef(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(110))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DucElement
    def StrokeStyleV3(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(112))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # DucElement
    def FillStyleV3(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(114))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # DucElement
    def TextAlignV3(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(116))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return None

    # DucElement
    def VerticalAlignV3(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(118))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # DucElement
    def XV3(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(120))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # DucElement
    def YV3(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(122))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # DucElement
    def ScaleV3(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(124))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.SimplePoint import SimplePoint
            obj = SimplePoint()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucElement
    def PressuresV3(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(126))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # DucElement
    def PressuresV3AsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(126))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float64Flags, o)
        return 0

    # DucElement
    def PressuresV3Length(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(126))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DucElement
    def PressuresV3IsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(126))
        return o == 0

    # DucElement
    def StrokeWidthV3(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(128))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # DucElement
    def AngleV3(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(130))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # DucElement
    def Roundness(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(132))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # DucElement
    def WidthV3(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(134))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # DucElement
    def HeightV3(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(136))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # DucElement
    def FontSizeV3(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(138))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return None

    # DucElement
    def LineHeightV3(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(140))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return None

    # DucElement
    def Blending(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(142))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return None

    # DucElement
    def Background(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(144))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Duc.ElementBackground import ElementBackground
            obj = ElementBackground()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucElement
    def BackgroundLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(144))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DucElement
    def BackgroundIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(144))
        return o == 0

    # DucElement
    def Stroke(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(146))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Duc.ElementStroke import ElementStroke
            obj = ElementStroke()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucElement
    def StrokeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(146))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DucElement
    def StrokeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(146))
        return o == 0

    # DucElement
    def Crop(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(148))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.ImageCrop import ImageCrop
            obj = ImageCrop()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucElement
    def Clip(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(150))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return None

    # DucElement
    def Subset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(152))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return None

    # DucElement
    def ZIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(154))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # DucElement
    def PolygonSides(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(156))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return None

    # DucElement
    def ColumnOrder(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(158))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # DucElement
    def ColumnOrderLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(158))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DucElement
    def ColumnOrderIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(158))
        return o == 0

    # DucElement
    def RowOrder(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(160))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # DucElement
    def RowOrderLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(160))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DucElement
    def RowOrderIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(160))
        return o == 0

    # DucElement
    def Columns(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(162))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Duc.DucTableColumn import DucTableColumn
            obj = DucTableColumn()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucElement
    def ColumnsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(162))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DucElement
    def ColumnsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(162))
        return o == 0

    # DucElement
    def Rows(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(164))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Duc.DucTableRow import DucTableRow
            obj = DucTableRow()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucElement
    def RowsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(164))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DucElement
    def RowsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(164))
        return o == 0

    # DucElement
    def Cells(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(166))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Duc.DucTableCell import DucTableCell
            obj = DucTableCell()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucElement
    def CellsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(166))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DucElement
    def CellsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(166))
        return o == 0

    # DucElement
    def TableStyle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(168))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.DucTableStyle import DucTableStyle
            obj = DucTableStyle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucElement
    def DocContent(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(170))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DucElement
    def Lines(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(172))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Duc.DucLine import DucLine
            obj = DucLine()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucElement
    def LinesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(172))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DucElement
    def LinesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(172))
        return o == 0

    # DucElement
    def EllipseRatio(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(174))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return None

    # DucElement
    def EllipseStartAngle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(176))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return None

    # DucElement
    def EllipseEndAngle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(178))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return None

    # DucElement
    def EllipseShowAuxCrosshair(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(180))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return None

    # DucElement
    def FreeDrawThinning(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(182))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return None

    # DucElement
    def FreeDrawSmoothing(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(184))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return None

    # DucElement
    def FreeDrawStreamline(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(186))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return None

    # DucElement
    def FreeDrawEasing(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(188))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DucElement
    def FreeDrawStartCap(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(190))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return None

    # DucElement
    def FreeDrawStartTaper(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(192))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return None

    # DucElement
    def FreeDrawStartEasing(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(194))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DucElement
    def FreeDrawEndCap(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(196))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return None

    # DucElement
    def FreeDrawEndTaper(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(198))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return None

    # DucElement
    def FreeDrawEndEasing(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(200))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DucElement
    def FreeDrawSvgPath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(202))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DucElement
    def FreeDrawSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(204))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return None

    # DucElement
    def LinearElementPathOverrides(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(206))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Duc.DucPath import DucPath
            obj = DucPath()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucElement
    def LinearElementPathOverridesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(206))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DucElement
    def LinearElementPathOverridesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(206))
        return o == 0

def DucElementStart(builder):
    builder.StartObject(102)

def Start(builder):
    DucElementStart(builder)

def DucElementAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    DucElementAddId(builder, id)

def DucElementAddType(builder, type):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(type), 0)

def AddType(builder, type):
    DucElementAddType(builder, type)

def DucElementAddXV2(builder, xV2):
    builder.PrependFloat32Slot(2, xV2, None)

def AddXV2(builder, xV2):
    DucElementAddXV2(builder, xV2)

def DucElementAddYV2(builder, yV2):
    builder.PrependFloat32Slot(3, yV2, None)

def AddYV2(builder, yV2):
    DucElementAddYV2(builder, yV2)

def DucElementAddScope(builder, scope):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(scope), 0)

def AddScope(builder, scope):
    DucElementAddScope(builder, scope)

def DucElementAddLabel(builder, label):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(label), 0)

def AddLabel(builder, label):
    DucElementAddLabel(builder, label)

def DucElementAddIsVisible(builder, isVisible):
    builder.PrependBoolSlot(8, isVisible, 0)

def AddIsVisible(builder, isVisible):
    DucElementAddIsVisible(builder, isVisible)

def DucElementAddBackgroundColorV3(builder, backgroundColorV3):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(backgroundColorV3), 0)

def AddBackgroundColorV3(builder, backgroundColorV3):
    DucElementAddBackgroundColorV3(builder, backgroundColorV3)

def DucElementAddStrokeColorV3(builder, strokeColorV3):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(strokeColorV3), 0)

def AddStrokeColorV3(builder, strokeColorV3):
    DucElementAddStrokeColorV3(builder, strokeColorV3)

def DucElementAddOpacity(builder, opacity):
    builder.PrependFloat32Slot(17, opacity, 0.0)

def AddOpacity(builder, opacity):
    DucElementAddOpacity(builder, opacity)

def DucElementAddWidthV2(builder, widthV2):
    builder.PrependFloat32Slot(18, widthV2, None)

def AddWidthV2(builder, widthV2):
    DucElementAddWidthV2(builder, widthV2)

def DucElementAddHeightV2(builder, heightV2):
    builder.PrependFloat32Slot(19, heightV2, None)

def AddHeightV2(builder, heightV2):
    DucElementAddHeightV2(builder, heightV2)

def DucElementAddAngleV2(builder, angleV2):
    builder.PrependFloat32Slot(20, angleV2, None)

def AddAngleV2(builder, angleV2):
    DucElementAddAngleV2(builder, angleV2)

def DucElementAddIsDeleted(builder, isDeleted):
    builder.PrependBoolSlot(21, isDeleted, 0)

def AddIsDeleted(builder, isDeleted):
    DucElementAddIsDeleted(builder, isDeleted)

def DucElementAddGroupIds(builder, groupIds):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(groupIds), 0)

def AddGroupIds(builder, groupIds):
    DucElementAddGroupIds(builder, groupIds)

def DucElementStartGroupIdsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartGroupIdsVector(builder, numElems):
    return DucElementStartGroupIdsVector(builder, numElems)

def DucElementAddFrameId(builder, frameId):
    builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(frameId), 0)

def AddFrameId(builder, frameId):
    DucElementAddFrameId(builder, frameId)

def DucElementAddBoundElements(builder, boundElements):
    builder.PrependUOffsetTRelativeSlot(24, flatbuffers.number_types.UOffsetTFlags.py_type(boundElements), 0)

def AddBoundElements(builder, boundElements):
    DucElementAddBoundElements(builder, boundElements)

def DucElementStartBoundElementsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartBoundElementsVector(builder, numElems):
    return DucElementStartBoundElementsVector(builder, numElems)

def DucElementAddLink(builder, link):
    builder.PrependUOffsetTRelativeSlot(25, flatbuffers.number_types.UOffsetTFlags.py_type(link), 0)

def AddLink(builder, link):
    DucElementAddLink(builder, link)

def DucElementAddLocked(builder, locked):
    builder.PrependBoolSlot(26, locked, 0)

def AddLocked(builder, locked):
    DucElementAddLocked(builder, locked)

def DucElementAddFontSizeV2(builder, fontSizeV2):
    builder.PrependInt32Slot(30, fontSizeV2, None)

def AddFontSizeV2(builder, fontSizeV2):
    DucElementAddFontSizeV2(builder, fontSizeV2)

def DucElementAddFontFamily(builder, fontFamily):
    builder.PrependUOffsetTRelativeSlot(31, flatbuffers.number_types.UOffsetTFlags.py_type(fontFamily), 0)

def AddFontFamily(builder, fontFamily):
    DucElementAddFontFamily(builder, fontFamily)

def DucElementAddText(builder, text):
    builder.PrependUOffsetTRelativeSlot(32, flatbuffers.number_types.UOffsetTFlags.py_type(text), 0)

def AddText(builder, text):
    DucElementAddText(builder, text)

def DucElementAddContainerId(builder, containerId):
    builder.PrependUOffsetTRelativeSlot(35, flatbuffers.number_types.UOffsetTFlags.py_type(containerId), 0)

def AddContainerId(builder, containerId):
    DucElementAddContainerId(builder, containerId)

def DucElementAddLineHeightV2(builder, lineHeightV2):
    builder.PrependFloat32Slot(37, lineHeightV2, None)

def AddLineHeightV2(builder, lineHeightV2):
    DucElementAddLineHeightV2(builder, lineHeightV2)

def DucElementAddAutoResize(builder, autoResize):
    builder.PrependBoolSlot(38, autoResize, None)

def AddAutoResize(builder, autoResize):
    DucElementAddAutoResize(builder, autoResize)

def DucElementAddPoints(builder, points):
    builder.PrependUOffsetTRelativeSlot(39, flatbuffers.number_types.UOffsetTFlags.py_type(points), 0)

def AddPoints(builder, points):
    DucElementAddPoints(builder, points)

def DucElementStartPointsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartPointsVector(builder, numElems):
    return DucElementStartPointsVector(builder, numElems)

def DucElementAddLastCommittedPoint(builder, lastCommittedPoint):
    builder.PrependUOffsetTRelativeSlot(40, flatbuffers.number_types.UOffsetTFlags.py_type(lastCommittedPoint), 0)

def AddLastCommittedPoint(builder, lastCommittedPoint):
    DucElementAddLastCommittedPoint(builder, lastCommittedPoint)

def DucElementAddStartBinding(builder, startBinding):
    builder.PrependUOffsetTRelativeSlot(41, flatbuffers.number_types.UOffsetTFlags.py_type(startBinding), 0)

def AddStartBinding(builder, startBinding):
    DucElementAddStartBinding(builder, startBinding)

def DucElementAddEndBinding(builder, endBinding):
    builder.PrependUOffsetTRelativeSlot(42, flatbuffers.number_types.UOffsetTFlags.py_type(endBinding), 0)

def AddEndBinding(builder, endBinding):
    DucElementAddEndBinding(builder, endBinding)

def DucElementAddElbowed(builder, elbowed):
    builder.PrependBoolSlot(45, elbowed, None)

def AddElbowed(builder, elbowed):
    DucElementAddElbowed(builder, elbowed)

def DucElementAddSimulatePressure(builder, simulatePressure):
    builder.PrependBoolSlot(47, simulatePressure, None)

def AddSimulatePressure(builder, simulatePressure):
    DucElementAddSimulatePressure(builder, simulatePressure)

def DucElementAddFileId(builder, fileId):
    builder.PrependUOffsetTRelativeSlot(48, flatbuffers.number_types.UOffsetTFlags.py_type(fileId), 0)

def AddFileId(builder, fileId):
    DucElementAddFileId(builder, fileId)

def DucElementAddStatus(builder, status):
    builder.PrependUOffsetTRelativeSlot(49, flatbuffers.number_types.UOffsetTFlags.py_type(status), 0)

def AddStatus(builder, status):
    DucElementAddStatus(builder, status)

def DucElementAddIsCollapsed(builder, isCollapsed):
    builder.PrependBoolSlot(51, isCollapsed, None)

def AddIsCollapsed(builder, isCollapsed):
    DucElementAddIsCollapsed(builder, isCollapsed)

def DucElementAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(52, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    DucElementAddName(builder, name)

def DucElementAddGroupIdRef(builder, groupIdRef):
    builder.PrependUOffsetTRelativeSlot(53, flatbuffers.number_types.UOffsetTFlags.py_type(groupIdRef), 0)

def AddGroupIdRef(builder, groupIdRef):
    DucElementAddGroupIdRef(builder, groupIdRef)

def DucElementAddStrokeStyleV3(builder, strokeStyleV3):
    builder.PrependInt8Slot(54, strokeStyleV3, 0)

def AddStrokeStyleV3(builder, strokeStyleV3):
    DucElementAddStrokeStyleV3(builder, strokeStyleV3)

def DucElementAddFillStyleV3(builder, fillStyleV3):
    builder.PrependInt8Slot(55, fillStyleV3, 0)

def AddFillStyleV3(builder, fillStyleV3):
    DucElementAddFillStyleV3(builder, fillStyleV3)

def DucElementAddTextAlignV3(builder, textAlignV3):
    builder.PrependInt8Slot(56, textAlignV3, None)

def AddTextAlignV3(builder, textAlignV3):
    DucElementAddTextAlignV3(builder, textAlignV3)

def DucElementAddVerticalAlignV3(builder, verticalAlignV3):
    builder.PrependInt8Slot(57, verticalAlignV3, 0)

def AddVerticalAlignV3(builder, verticalAlignV3):
    DucElementAddVerticalAlignV3(builder, verticalAlignV3)

def DucElementAddXV3(builder, xV3):
    builder.PrependFloat64Slot(58, xV3, 0.0)

def AddXV3(builder, xV3):
    DucElementAddXV3(builder, xV3)

def DucElementAddYV3(builder, yV3):
    builder.PrependFloat64Slot(59, yV3, 0.0)

def AddYV3(builder, yV3):
    DucElementAddYV3(builder, yV3)

def DucElementAddScaleV3(builder, scaleV3):
    builder.PrependUOffsetTRelativeSlot(60, flatbuffers.number_types.UOffsetTFlags.py_type(scaleV3), 0)

def AddScaleV3(builder, scaleV3):
    DucElementAddScaleV3(builder, scaleV3)

def DucElementAddPressuresV3(builder, pressuresV3):
    builder.PrependUOffsetTRelativeSlot(61, flatbuffers.number_types.UOffsetTFlags.py_type(pressuresV3), 0)

def AddPressuresV3(builder, pressuresV3):
    DucElementAddPressuresV3(builder, pressuresV3)

def DucElementStartPressuresV3Vector(builder, numElems):
    return builder.StartVector(8, numElems, 8)

def StartPressuresV3Vector(builder, numElems):
    return DucElementStartPressuresV3Vector(builder, numElems)

def DucElementAddStrokeWidthV3(builder, strokeWidthV3):
    builder.PrependFloat64Slot(62, strokeWidthV3, 0.0)

def AddStrokeWidthV3(builder, strokeWidthV3):
    DucElementAddStrokeWidthV3(builder, strokeWidthV3)

def DucElementAddAngleV3(builder, angleV3):
    builder.PrependFloat64Slot(63, angleV3, 0.0)

def AddAngleV3(builder, angleV3):
    DucElementAddAngleV3(builder, angleV3)

def DucElementAddRoundness(builder, roundness):
    builder.PrependFloat64Slot(64, roundness, 0.0)

def AddRoundness(builder, roundness):
    DucElementAddRoundness(builder, roundness)

def DucElementAddWidthV3(builder, widthV3):
    builder.PrependFloat64Slot(65, widthV3, 0.0)

def AddWidthV3(builder, widthV3):
    DucElementAddWidthV3(builder, widthV3)

def DucElementAddHeightV3(builder, heightV3):
    builder.PrependFloat64Slot(66, heightV3, 0.0)

def AddHeightV3(builder, heightV3):
    DucElementAddHeightV3(builder, heightV3)

def DucElementAddFontSizeV3(builder, fontSizeV3):
    builder.PrependFloat64Slot(67, fontSizeV3, None)

def AddFontSizeV3(builder, fontSizeV3):
    DucElementAddFontSizeV3(builder, fontSizeV3)

def DucElementAddLineHeightV3(builder, lineHeightV3):
    builder.PrependFloat64Slot(68, lineHeightV3, None)

def AddLineHeightV3(builder, lineHeightV3):
    DucElementAddLineHeightV3(builder, lineHeightV3)

def DucElementAddBlending(builder, blending):
    builder.PrependInt8Slot(69, blending, None)

def AddBlending(builder, blending):
    DucElementAddBlending(builder, blending)

def DucElementAddBackground(builder, background):
    builder.PrependUOffsetTRelativeSlot(70, flatbuffers.number_types.UOffsetTFlags.py_type(background), 0)

def AddBackground(builder, background):
    DucElementAddBackground(builder, background)

def DucElementStartBackgroundVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartBackgroundVector(builder, numElems):
    return DucElementStartBackgroundVector(builder, numElems)

def DucElementAddStroke(builder, stroke):
    builder.PrependUOffsetTRelativeSlot(71, flatbuffers.number_types.UOffsetTFlags.py_type(stroke), 0)

def AddStroke(builder, stroke):
    DucElementAddStroke(builder, stroke)

def DucElementStartStrokeVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartStrokeVector(builder, numElems):
    return DucElementStartStrokeVector(builder, numElems)

def DucElementAddCrop(builder, crop):
    builder.PrependUOffsetTRelativeSlot(72, flatbuffers.number_types.UOffsetTFlags.py_type(crop), 0)

def AddCrop(builder, crop):
    DucElementAddCrop(builder, crop)

def DucElementAddClip(builder, clip):
    builder.PrependBoolSlot(73, clip, None)

def AddClip(builder, clip):
    DucElementAddClip(builder, clip)

def DucElementAddSubset(builder, subset):
    builder.PrependInt8Slot(74, subset, None)

def AddSubset(builder, subset):
    DucElementAddSubset(builder, subset)

def DucElementAddZIndex(builder, zIndex):
    builder.PrependInt32Slot(75, zIndex, 0)

def AddZIndex(builder, zIndex):
    DucElementAddZIndex(builder, zIndex)

def DucElementAddPolygonSides(builder, polygonSides):
    builder.PrependInt32Slot(76, polygonSides, None)

def AddPolygonSides(builder, polygonSides):
    DucElementAddPolygonSides(builder, polygonSides)

def DucElementAddColumnOrder(builder, columnOrder):
    builder.PrependUOffsetTRelativeSlot(77, flatbuffers.number_types.UOffsetTFlags.py_type(columnOrder), 0)

def AddColumnOrder(builder, columnOrder):
    DucElementAddColumnOrder(builder, columnOrder)

def DucElementStartColumnOrderVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartColumnOrderVector(builder, numElems):
    return DucElementStartColumnOrderVector(builder, numElems)

def DucElementAddRowOrder(builder, rowOrder):
    builder.PrependUOffsetTRelativeSlot(78, flatbuffers.number_types.UOffsetTFlags.py_type(rowOrder), 0)

def AddRowOrder(builder, rowOrder):
    DucElementAddRowOrder(builder, rowOrder)

def DucElementStartRowOrderVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartRowOrderVector(builder, numElems):
    return DucElementStartRowOrderVector(builder, numElems)

def DucElementAddColumns(builder, columns):
    builder.PrependUOffsetTRelativeSlot(79, flatbuffers.number_types.UOffsetTFlags.py_type(columns), 0)

def AddColumns(builder, columns):
    DucElementAddColumns(builder, columns)

def DucElementStartColumnsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartColumnsVector(builder, numElems):
    return DucElementStartColumnsVector(builder, numElems)

def DucElementAddRows(builder, rows):
    builder.PrependUOffsetTRelativeSlot(80, flatbuffers.number_types.UOffsetTFlags.py_type(rows), 0)

def AddRows(builder, rows):
    DucElementAddRows(builder, rows)

def DucElementStartRowsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartRowsVector(builder, numElems):
    return DucElementStartRowsVector(builder, numElems)

def DucElementAddCells(builder, cells):
    builder.PrependUOffsetTRelativeSlot(81, flatbuffers.number_types.UOffsetTFlags.py_type(cells), 0)

def AddCells(builder, cells):
    DucElementAddCells(builder, cells)

def DucElementStartCellsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartCellsVector(builder, numElems):
    return DucElementStartCellsVector(builder, numElems)

def DucElementAddTableStyle(builder, tableStyle):
    builder.PrependUOffsetTRelativeSlot(82, flatbuffers.number_types.UOffsetTFlags.py_type(tableStyle), 0)

def AddTableStyle(builder, tableStyle):
    DucElementAddTableStyle(builder, tableStyle)

def DucElementAddDocContent(builder, docContent):
    builder.PrependUOffsetTRelativeSlot(83, flatbuffers.number_types.UOffsetTFlags.py_type(docContent), 0)

def AddDocContent(builder, docContent):
    DucElementAddDocContent(builder, docContent)

def DucElementAddLines(builder, lines):
    builder.PrependUOffsetTRelativeSlot(84, flatbuffers.number_types.UOffsetTFlags.py_type(lines), 0)

def AddLines(builder, lines):
    DucElementAddLines(builder, lines)

def DucElementStartLinesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartLinesVector(builder, numElems):
    return DucElementStartLinesVector(builder, numElems)

def DucElementAddEllipseRatio(builder, ellipseRatio):
    builder.PrependFloat64Slot(85, ellipseRatio, None)

def AddEllipseRatio(builder, ellipseRatio):
    DucElementAddEllipseRatio(builder, ellipseRatio)

def DucElementAddEllipseStartAngle(builder, ellipseStartAngle):
    builder.PrependFloat64Slot(86, ellipseStartAngle, None)

def AddEllipseStartAngle(builder, ellipseStartAngle):
    DucElementAddEllipseStartAngle(builder, ellipseStartAngle)

def DucElementAddEllipseEndAngle(builder, ellipseEndAngle):
    builder.PrependFloat64Slot(87, ellipseEndAngle, None)

def AddEllipseEndAngle(builder, ellipseEndAngle):
    DucElementAddEllipseEndAngle(builder, ellipseEndAngle)

def DucElementAddEllipseShowAuxCrosshair(builder, ellipseShowAuxCrosshair):
    builder.PrependBoolSlot(88, ellipseShowAuxCrosshair, None)

def AddEllipseShowAuxCrosshair(builder, ellipseShowAuxCrosshair):
    DucElementAddEllipseShowAuxCrosshair(builder, ellipseShowAuxCrosshair)

def DucElementAddFreeDrawThinning(builder, freeDrawThinning):
    builder.PrependFloat64Slot(89, freeDrawThinning, None)

def AddFreeDrawThinning(builder, freeDrawThinning):
    DucElementAddFreeDrawThinning(builder, freeDrawThinning)

def DucElementAddFreeDrawSmoothing(builder, freeDrawSmoothing):
    builder.PrependFloat64Slot(90, freeDrawSmoothing, None)

def AddFreeDrawSmoothing(builder, freeDrawSmoothing):
    DucElementAddFreeDrawSmoothing(builder, freeDrawSmoothing)

def DucElementAddFreeDrawStreamline(builder, freeDrawStreamline):
    builder.PrependFloat64Slot(91, freeDrawStreamline, None)

def AddFreeDrawStreamline(builder, freeDrawStreamline):
    DucElementAddFreeDrawStreamline(builder, freeDrawStreamline)

def DucElementAddFreeDrawEasing(builder, freeDrawEasing):
    builder.PrependUOffsetTRelativeSlot(92, flatbuffers.number_types.UOffsetTFlags.py_type(freeDrawEasing), 0)

def AddFreeDrawEasing(builder, freeDrawEasing):
    DucElementAddFreeDrawEasing(builder, freeDrawEasing)

def DucElementAddFreeDrawStartCap(builder, freeDrawStartCap):
    builder.PrependBoolSlot(93, freeDrawStartCap, None)

def AddFreeDrawStartCap(builder, freeDrawStartCap):
    DucElementAddFreeDrawStartCap(builder, freeDrawStartCap)

def DucElementAddFreeDrawStartTaper(builder, freeDrawStartTaper):
    builder.PrependFloat64Slot(94, freeDrawStartTaper, None)

def AddFreeDrawStartTaper(builder, freeDrawStartTaper):
    DucElementAddFreeDrawStartTaper(builder, freeDrawStartTaper)

def DucElementAddFreeDrawStartEasing(builder, freeDrawStartEasing):
    builder.PrependUOffsetTRelativeSlot(95, flatbuffers.number_types.UOffsetTFlags.py_type(freeDrawStartEasing), 0)

def AddFreeDrawStartEasing(builder, freeDrawStartEasing):
    DucElementAddFreeDrawStartEasing(builder, freeDrawStartEasing)

def DucElementAddFreeDrawEndCap(builder, freeDrawEndCap):
    builder.PrependBoolSlot(96, freeDrawEndCap, None)

def AddFreeDrawEndCap(builder, freeDrawEndCap):
    DucElementAddFreeDrawEndCap(builder, freeDrawEndCap)

def DucElementAddFreeDrawEndTaper(builder, freeDrawEndTaper):
    builder.PrependFloat64Slot(97, freeDrawEndTaper, None)

def AddFreeDrawEndTaper(builder, freeDrawEndTaper):
    DucElementAddFreeDrawEndTaper(builder, freeDrawEndTaper)

def DucElementAddFreeDrawEndEasing(builder, freeDrawEndEasing):
    builder.PrependUOffsetTRelativeSlot(98, flatbuffers.number_types.UOffsetTFlags.py_type(freeDrawEndEasing), 0)

def AddFreeDrawEndEasing(builder, freeDrawEndEasing):
    DucElementAddFreeDrawEndEasing(builder, freeDrawEndEasing)

def DucElementAddFreeDrawSvgPath(builder, freeDrawSvgPath):
    builder.PrependUOffsetTRelativeSlot(99, flatbuffers.number_types.UOffsetTFlags.py_type(freeDrawSvgPath), 0)

def AddFreeDrawSvgPath(builder, freeDrawSvgPath):
    DucElementAddFreeDrawSvgPath(builder, freeDrawSvgPath)

def DucElementAddFreeDrawSize(builder, freeDrawSize):
    builder.PrependFloat64Slot(100, freeDrawSize, None)

def AddFreeDrawSize(builder, freeDrawSize):
    DucElementAddFreeDrawSize(builder, freeDrawSize)

def DucElementAddLinearElementPathOverrides(builder, linearElementPathOverrides):
    builder.PrependUOffsetTRelativeSlot(101, flatbuffers.number_types.UOffsetTFlags.py_type(linearElementPathOverrides), 0)

def AddLinearElementPathOverrides(builder, linearElementPathOverrides):
    DucElementAddLinearElementPathOverrides(builder, linearElementPathOverrides)

def DucElementStartLinearElementPathOverridesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartLinearElementPathOverridesVector(builder, numElems):
    return DucElementStartLinearElementPathOverridesVector(builder, numElems)

def DucElementEnd(builder):
    return builder.EndObject()

def End(builder):
    return DucElementEnd(builder)
