# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Duc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ElementStroke(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ElementStroke()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsElementStroke(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ElementStroke
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ElementStroke
    def Content(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.ElementContentBase import ElementContentBase
            obj = ElementContentBase()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ElementStroke
    def Width(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # ElementStroke
    def Style(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.StrokeStyle import StrokeStyle
            obj = StrokeStyle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ElementStroke
    def Placement(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # ElementStroke
    def StrokeSides(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.StrokeSides import StrokeSides
            obj = StrokeSides()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def ElementStrokeStart(builder):
    builder.StartObject(5)

def Start(builder):
    ElementStrokeStart(builder)

def ElementStrokeAddContent(builder, content):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(content), 0)

def AddContent(builder, content):
    ElementStrokeAddContent(builder, content)

def ElementStrokeAddWidth(builder, width):
    builder.PrependFloat64Slot(1, width, 0.0)

def AddWidth(builder, width):
    ElementStrokeAddWidth(builder, width)

def ElementStrokeAddStyle(builder, style):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(style), 0)

def AddStyle(builder, style):
    ElementStrokeAddStyle(builder, style)

def ElementStrokeAddPlacement(builder, placement):
    builder.PrependInt8Slot(3, placement, 0)

def AddPlacement(builder, placement):
    ElementStrokeAddPlacement(builder, placement)

def ElementStrokeAddStrokeSides(builder, strokeSides):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(strokeSides), 0)

def AddStrokeSides(builder, strokeSides):
    ElementStrokeAddStrokeSides(builder, strokeSides)

def ElementStrokeEnd(builder):
    return builder.EndObject()

def End(builder):
    return ElementStrokeEnd(builder)
