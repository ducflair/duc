# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Duc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class LinearElementEditor(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = LinearElementEditor()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsLinearElementEditor(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # LinearElementEditor
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # LinearElementEditor
    def ElementId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # LinearElementEditor
    def SelectedPointsIndices(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # LinearElementEditor
    def SelectedPointsIndicesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # LinearElementEditor
    def SelectedPointsIndicesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # LinearElementEditor
    def SelectedPointsIndicesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # LinearElementEditor
    def PointerDownState(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.PointerDownState import PointerDownState
            obj = PointerDownState()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # LinearElementEditor
    def IsDragging(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # LinearElementEditor
    def LastUncommittedPoint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.Point import Point
            obj = Point()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # LinearElementEditor
    def PointerOffset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.SimplePoint import SimplePoint
            obj = SimplePoint()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # LinearElementEditor
    def StartBindingElement(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # LinearElementEditor
    def EndBindingElement(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # LinearElementEditor
    def HoverPointIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # LinearElementEditor
    def SegmentMidPointHoveredCoords(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.Point import Point
            obj = Point()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def LinearElementEditorStart(builder):
    builder.StartObject(10)

def Start(builder):
    LinearElementEditorStart(builder)

def LinearElementEditorAddElementId(builder, elementId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(elementId), 0)

def AddElementId(builder, elementId):
    LinearElementEditorAddElementId(builder, elementId)

def LinearElementEditorAddSelectedPointsIndices(builder, selectedPointsIndices):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(selectedPointsIndices), 0)

def AddSelectedPointsIndices(builder, selectedPointsIndices):
    LinearElementEditorAddSelectedPointsIndices(builder, selectedPointsIndices)

def LinearElementEditorStartSelectedPointsIndicesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartSelectedPointsIndicesVector(builder, numElems):
    return LinearElementEditorStartSelectedPointsIndicesVector(builder, numElems)

def LinearElementEditorAddPointerDownState(builder, pointerDownState):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(pointerDownState), 0)

def AddPointerDownState(builder, pointerDownState):
    LinearElementEditorAddPointerDownState(builder, pointerDownState)

def LinearElementEditorAddIsDragging(builder, isDragging):
    builder.PrependBoolSlot(3, isDragging, 0)

def AddIsDragging(builder, isDragging):
    LinearElementEditorAddIsDragging(builder, isDragging)

def LinearElementEditorAddLastUncommittedPoint(builder, lastUncommittedPoint):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(lastUncommittedPoint), 0)

def AddLastUncommittedPoint(builder, lastUncommittedPoint):
    LinearElementEditorAddLastUncommittedPoint(builder, lastUncommittedPoint)

def LinearElementEditorAddPointerOffset(builder, pointerOffset):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(pointerOffset), 0)

def AddPointerOffset(builder, pointerOffset):
    LinearElementEditorAddPointerOffset(builder, pointerOffset)

def LinearElementEditorAddStartBindingElement(builder, startBindingElement):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(startBindingElement), 0)

def AddStartBindingElement(builder, startBindingElement):
    LinearElementEditorAddStartBindingElement(builder, startBindingElement)

def LinearElementEditorAddEndBindingElement(builder, endBindingElement):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(endBindingElement), 0)

def AddEndBindingElement(builder, endBindingElement):
    LinearElementEditorAddEndBindingElement(builder, endBindingElement)

def LinearElementEditorAddHoverPointIndex(builder, hoverPointIndex):
    builder.PrependInt32Slot(8, hoverPointIndex, 0)

def AddHoverPointIndex(builder, hoverPointIndex):
    LinearElementEditorAddHoverPointIndex(builder, hoverPointIndex)

def LinearElementEditorAddSegmentMidPointHoveredCoords(builder, segmentMidPointHoveredCoords):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(segmentMidPointHoveredCoords), 0)

def AddSegmentMidPointHoveredCoords(builder, segmentMidPointHoveredCoords):
    LinearElementEditorAddSegmentMidPointHoveredCoords(builder, segmentMidPointHoveredCoords)

def LinearElementEditorEnd(builder):
    return builder.EndObject()

def End(builder):
    return LinearElementEditorEnd(builder)
