# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Duc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Point(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Point()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsPoint(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def PointBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x55\x43\x5F", size_prefixed=size_prefixed)

    # Point
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Point
    def XV2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return None

    # Point
    def YV2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return None

    # Point
    def Mirroring(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return None

    # Point
    def XV3(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Point
    def YV3(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def PointStart(builder):
    builder.StartObject(11)

def Start(builder):
    PointStart(builder)

def PointAddXV2(builder, xV2):
    builder.PrependFloat32Slot(0, xV2, None)

def AddXV2(builder, xV2):
    PointAddXV2(builder, xV2)

def PointAddYV2(builder, yV2):
    builder.PrependFloat32Slot(1, yV2, None)

def AddYV2(builder, yV2):
    PointAddYV2(builder, yV2)

def PointAddMirroring(builder, mirroring):
    builder.PrependInt8Slot(3, mirroring, None)

def AddMirroring(builder, mirroring):
    PointAddMirroring(builder, mirroring)

def PointAddXV3(builder, xV3):
    builder.PrependFloat64Slot(7, xV3, 0.0)

def AddXV3(builder, xV3):
    PointAddXV3(builder, xV3)

def PointAddYV3(builder, yV3):
    builder.PrependFloat64Slot(8, yV3, 0.0)

def AddYV3(builder, yV3):
    PointAddYV3(builder, yV3)

def PointEnd(builder):
    return builder.EndObject()

def End(builder):
    return PointEnd(builder)
