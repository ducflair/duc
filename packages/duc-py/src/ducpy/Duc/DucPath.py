# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Duc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DucPath(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DucPath()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDucPath(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def DucPathBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x55\x43\x5F", size_prefixed=size_prefixed)

    # DucPath
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DucPath
    def LineIndices(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # DucPath
    def LineIndicesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # DucPath
    def LineIndicesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DucPath
    def LineIndicesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # DucPath
    def Background(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.ElementBackground import ElementBackground
            obj = ElementBackground()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DucPath
    def Stroke(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Duc.ElementStroke import ElementStroke
            obj = ElementStroke()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def DucPathStart(builder):
    builder.StartObject(3)

def Start(builder):
    DucPathStart(builder)

def DucPathAddLineIndices(builder, lineIndices):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(lineIndices), 0)

def AddLineIndices(builder, lineIndices):
    DucPathAddLineIndices(builder, lineIndices)

def DucPathStartLineIndicesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartLineIndicesVector(builder, numElems):
    return DucPathStartLineIndicesVector(builder, numElems)

def DucPathAddBackground(builder, background):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(background), 0)

def AddBackground(builder, background):
    DucPathAddBackground(builder, background)

def DucPathAddStroke(builder, stroke):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(stroke), 0)

def AddStroke(builder, stroke):
    DucPathAddStroke(builder, stroke)

def DucPathEnd(builder):
    return builder.EndObject()

def End(builder):
    return DucPathEnd(builder)
